<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  
  <title><![CDATA[Programming DIY]]></title>
  <link href="http://demin.ws/atom.xml" rel="self"/>
  <link href="http://demin.ws/"/>
  <updated>2012-04-05T18:17:02+01:00</updated>
  <id>http://demin.ws/</id>
  <author>
    <name><![CDATA[Alexander Demin]]></name>
    <email><![CDATA[alexander@demin.ws]]></email>
  </author>

  
  <entry>
    <title type="html"><![CDATA[First post in English]]></title>
    <link href="http://demin.ws/blog/english/2012/04/05/first-test-post-in-english/"/>
    <updated>2012-04-05T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2012/04/05/first-test-post-in-english/</id>
    <content type="html"><![CDATA[<p>Test post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NOR Machine in Ruby]]></title>
    <link href="http://demin.ws/blog/english/2012/03/07/nor-machine-in-ruby/"/>
    <updated>2012-03-07T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2012/03/07/nor-machine-in-ruby/</id>
    <content type="html"><![CDATA[<p>My <a href="http://pragprog.com/magazines/2012-03/the-nor-machine">article about a virtual CPU, a machine, computing only one instruction - NOR</a>, in The Pragmatic Bookshelf magazine.</p>

<p>The idea was previously described in a series of posts:</p>

<ul>
<li>NORCPU hackme challenge (part 1, part 2)</li>
<li>One-command NORCPU program hacking challenge: analysis and solutions</li>
<li>CPU executing just one operation</li>
</ul>

<p>The article discovers an implementation in Ruby. Now NOR assembly code looks almost as a regular assembler language. I was amazed how powerful Ruby is in creating domain specific languages (DSL). Mostly because it allows to omit parentheses in function calls.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Born by copy-paste]]></title>
    <link href="http://demin.ws/blog/english/2012/02/06/born-by-copy-paste/"/>
    <updated>2012-02-06T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2012/02/06/born-by-copy-paste/</id>
    <content type="html"><![CDATA[<p>I usually start crying when see a copy-paste with numbered variables. A probability to screw up is very high, just forget to change a single number after pasting. Here is a horrifying piece of code (don&rsquo;t you mind to spot on an incy wincy typo?)</p>

<pre><code class="cpp">void Test_SplitPair() {
  typedef std::pair&lt;std::string, std::string&gt; Pair;
  using string::SplitPair;

  const Pair p1 = SplitPair(&quot;&quot;, '=');
  assert(p1.first.empty());
  assert(p1.second.empty());

  const Pair p2 = SplitPair(&quot;=&quot;, '=');
  assert(p2.first.empty());
  assert(p2.second.empty());

  const Pair p3 = SplitPair(&quot;name=value&quot;, '=');
  assert(p3.first == &quot;name&quot;);
  assert(p3.second == &quot;value&quot;);

  const Pair p4 = SplitPair(&quot;name = value&quot;, '=');
  assert(p3.first == &quot;name&quot;);
  assert(p3.second == &quot;value&quot;);

  const Pair p5 = SplitPair(&quot; n ame  \t =  va lue  \r\n&quot;, '=');
  assert(p5.first == &quot; n ame  \t &quot;);
  assert(p5.second == &quot;  va lue  \r\n&quot;);
}
</code></pre>

<p>Any ways to make to better? The ideal solution is to split to multiple tests. But even less radical approach works to avoid copy-paste problems:</p>

<pre><code class="cpp">void Test_SplitPair() {
  typedef std::pair&lt;std::string, std::string&gt; Pair;
  using string::SplitPair;
  {
  const Pair p = SplitPair(&quot;&quot;, '=');
  assert(p.first.empty());
  assert(p.second.empty());
  }
  {
  const Pair p = SplitPair(&quot;=&quot;, '=');
  assert(p.first.empty());
  assert(p.second.empty());
  }
  {
  const Pair p = SplitPair(&quot;name=value&quot;, '=');
  assert(p.first == &quot;name&quot;);
  assert(p.second == &quot;value&quot;);
  }
  {
  const Pair p = SplitPair(&quot;name = value&quot;, '=');
  assert(p.first == &quot;name&quot;);
  assert(p.second == &quot;value&quot;);
  }
  {
  const Pair p = SplitPair(&quot; n ame  \t =  va lue  \r\n&quot;, '=');
  assert(p.first == &quot; n ame  \t &quot;);
  assert(p.second == &quot;  va lue  \r\n&quot;);
  }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bruce Tate, &#34;Seven languages in seven weeks&#34;]]></title>
    <link href="http://demin.ws/blog/english/2012/02/02/seven-languages-in-seven-weeks/"/>
    <updated>2012-02-02T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2012/02/02/seven-languages-in-seven-weeks/</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve finished accelerated reading of &ldquo;<a href="http://pragprog.com/book/btlang/seven-languages-in-seven-weeks">Seven languages in seven weeks</a>&rdquo; by Bruce Tate.</p>

<p><img src="http://demin.ws/images/covers/english/7-languages-in-7-weeks-cover.jpg" /></p>

<p>In my case it was &ldquo;Seven languages in seven evenings&rdquo;. For each language there is an introduction, which makes sense only if a language is brand new for you. There are also interviews with creators of the languages. One of the asked interesting questions was about what the author would like to change in the language if he could re-design it from scratch now.</p>

<p>Languages:</p>

<ul>
<li>Ruby</li>
<li>Io</li>
<li>Prolog</li>
<li>Scala</li>
<li>Erlang</li>
<li>Clojure</li>
<li>Haskell</li>
</ul>

<p>The reviews of each chapter below are my subjective views two things at once: a programming language and a material about it. Why? For familiar languages it hardly makes any sense to describe the language per se, but to note interesting distinctive features could be useful. But if a languages is a green field, it is worth describe it in general.</p>

<p><strong>Ruby</strong></p>

<p>The Ruby chapter was quite useless for me because I thoughtfully read &ldquo;<a href="http://pragprog.com/book/ruby3/programming-ruby-1-9">Programming Ruby 1.9</a>&rdquo;, and have been hooked. Ruby is an amazing scripting language. Each time when programming in Ruby I feel so delighted similar to when I tried PHP first time after Perl.</p>

<p>Ruby&rsquo;s creator, <a href="http://en.wikipedia.org/wiki/Yukihiro_Matsumoto">Yukihiro Matsumoto</a>, says in the interview, that if he could re-design Ruby today, he&rsquo;d like to change the concept of multi-threading to <a href="http://en.wikipedia.org/wiki/Actor_model">Actor</a>.</p>

<p>In short, &ldquo;Actor&rdquo; is when concurrent threads don&rsquo;t share memory and don&rsquo;t use mutex or semaphores for synchronization. Instead, they send and receive messages to each other, and messaging is provided by runtime and built-in to the languages syntax. Examples: Scala, Go, Erlang, Io.</p>

<p><strong>Io</strong></p>

<p><a href="http://iolanguage.com/">Io</a> is a very small, compact language, based on prototypes like JavaScript, where there is no distinction between classes and objects.</p>

<p>There is an interesting concurrency feature in addition to actors and coroutines (cooperative multi-threading as in <a href="http://www.lua.org/manual/5.2/manual.html#2.6">Lua</a>), called futures. &ldquo;Futures&rdquo; are similar to the actor. There the only difference is when the caller thread tries to use the result of the future, it will be blocked until the future completes and gives the result back.</p>

<p>An example from the book:</p>

<pre><code class="io">// Fire up the future.
futureResult := URL with(&quot;http://google.com/&quot;) @fetch
writeln(&quot;Continue immediately when future is running in background.&quot;)
// This line will be executed immediately after spawning the future.
writeln(&quot;fetched &quot;, futureResult size, &quot; bytes&quot;)
// But this line will be blocked until the future returns.
</code></pre>

<p><strong>Prolog</strong></p>

<p>I&rsquo;ve been gnawing this animal for years. But thanks to Erlang recently, all this functional stuff in general is now giving up for me, and monsters like Prolog or Haskell don&rsquo;t look so scary anymore.</p>

<p>It turned out that the depth of the material about Prolog has matched precisely with my level. The eight queens problem and a Sudoku solver were excellent examples for me.</p>

<p>Shortly, a program in Prolog is a pile of facts and rules. Then the Prolog runtime performs a depth-first search amongst possible results and tries to find those satisfying all the given facts and rules.</p>

<p>In fact, the Sudoku solver program is a set of variables, representing the Sudoku field, and a list of rules (summations by columns, rows and squared groups) according to the rules of Sudoku. Then Prolog performs an exhaustive search to find the values and their combinations satisfying the rules.</p>

<p>Of course, this is very much a superficial glance, but this has given me much more understanding of Prolog.</p>

<p><strong>Scala</strong></p>

<p>I will note only a few facts interesting to me.</p>

<p>Multi-threading is based on actors. After Erlang and Go you understand how good and handy it is.</p>

<p>I think that Scala has all possible bells and whistles even invented for programming languages. But sometimes it has not only good consequences.</p>

<p><strong>Erlang</strong></p>

<p>I&rsquo;m a big fan of Erlang and already read a few big books. That&rsquo;s why this book hasn&rsquo;t given to me anything new. But for novices this introduction may give quite solid view on Erlang functional approach and concurrency model.</p>

<p><strong>Clojure</strong></p>

<p>Clojure is a Lisp-based language driven by Java VM.</p>

<p>It has an interesting feature called <a href="http://en.wikipedia.org/wiki/Software_transactional_memory">STM, software transactional memory</a>. In STM a piece of code is declared to be a transaction. It is executed atomically or all the changes of variables are rolled back.</p>

<p>And finally, Haskell</p>

<p>Haskell is a taught guy. The introduction in this book is very light and minimal, just to remember the word &ldquo;Haskell&rdquo;. I read &ldquo;<a href="http://www.amazon.co.uk/Programming-Haskell-Graham-Hutton/dp/0521692695">Programming in Haskell</a>&rdquo; and currently I&rsquo;m on &ldquo;<a href="http://www.amazon.co.uk/Real-World-Haskell-Bryan-OSullivan/dp/0596514980">Real World Haskell</a>&rdquo;, that&rsquo;s why I simply skimmed the chapter in this book.</p>

<p>Okay, to sum up. This book is to be read just once, to broaden your outlook.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My current languages]]></title>
    <link href="http://demin.ws/blog/english/2012/01/30/my-current-languages/"/>
    <updated>2012-01-30T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2012/01/30/my-current-languages/</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve realised recently that I like to learn new programming languages. A symptom is a very easy to spot: I have a permanent pile of books I&rsquo;m reading. Thanks for the iPad, I can have them all with me all the time and choose depending on mood. Surprisingly, but books about languages are being read first and replaced with new ones.</p>

<p>Simply wanted to share current interests.</p>

<p>Everyday work (design, planning, coding and reviews): C and C++. C++ 0x11 goes at full speed and it is worth to catch up. <a href="http://accu.org/index.php/conferences/accu_conference_2012/accu2012_schedule">ACCU 2012</a> is almost fully dedicated to the new C++.</p>

<p>For fun:</p>

<ul>
<li>scripting - Ruby</li>
<li>a server side and multi-threading: Erlang and Go</li>
<li>embedded: Lua and Scheme</li>
</ul>

<p>To &ldquo;gnaw&rdquo; in hope to write something real - Haskell and Prolog.</p>

<p>In a queue at least minimum acquaintance: Clojure. This one is more promising because it is Lisp.</p>

<p>After overall migration to Mac, I wish to try Objection-C and AppleScript in action. But what to write on Mac, in Objective-C? Of course, UI! But UI is totally out of my interests. But, Objective-C still looks tempting because of so quickly growing mobile apps market.</p>

<p>From recently touched, but not involved:</p>

<ul>
<li>Scala - a sophisticated language requiring a &ldquo;deep dive&rdquo;, and without a real suitable problem the interest is gone. Twitter is already re-written in Scala ;-).</li>
<li>Racket - an interesting Lisp based animal on steroids of a very powerful library.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graph visualization in DOT]]></title>
    <link href="http://demin.ws/blog/english/2012/01/26/graph-visualization-in-dot/"/>
    <updated>2012-01-26T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2012/01/26/graph-visualization-in-dot/</id>
    <content type="html"><![CDATA[<p>Background. We do financial transactions processing. At some point we decided that we need profiling. We could record a path of how a transaction being passed amongst modules. There are two options - either to do static analysis or to trace the runtime.</p>

<p>So, the connections are determined and now we have to formalize and visualize them.</p>

<p>At the first glance this is not an easy task, but it turned out there is a simple and elegant solution.</p>

<p>There is a plain text language to declare graphs &ndash; <a href="http://en.wikipedia.org/wiki/DOT_language">DOT</a>. Its beauty is in ultimate simplicity. For example, a trivial graph:</p>

<pre><code>graph name {
  a -- b
  b -- c
  b -- d
}
</code></pre>

<p>Feed it to special software and get this:</p>

<p><img src="http://demin.ws/images/blog/dot-graph.png" /></p>

<p>That&rsquo;s it! The output is in SVG, ready to stick on a wall.</p>

<p>Unfortunately, the best software I&rsquo;ve found to visualize DOT is <a href="http://www.graphviz.org/">Graphviz</a>. It does pretty decent job properly processing quite sophisticated graphs, but in terms of user experience it&rsquo;s shite.</p>

<p>If anyone is interested, I&rsquo;ve shared a <a href="http://demin.ws/downloads/dot/graph.gv">real trace</a> (obviously, names are obfuscated). It gives an idea about simplicity of the source and visualization capabilities - <a href="http://demin.ws/downloads/dot/graph.png">PNG</a> and <a href="http://demin.ws/downloads/dot/graph.svg">SVG</a>.</p>

<p>Again, the graph formalization is dead simple - you only need to specify pairs of connected vertices. Also, in DOT you can describe directed graphs and extra attributes of the vertices.</p>

<p>To sum up, great technology.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maximite - 8-bit nostalgia with a soldering iron]]></title>
    <link href="http://demin.ws/blog/english/2012/01/19/maximite-kit/"/>
    <updated>2012-01-19T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2012/01/19/maximite-kit/</id>
    <content type="html"><![CDATA[<p>Recently I have come across an interesting project - Maximite.</p>

<p>This is a micro-computer based on Microchip PIC32 running BASIC. It is so simple that even a novice can build it in a few hours.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0099.jpg" /></p>

<p>It is a bit more powerful than <a href="http://en.wikipedia.org/wiki/History_of_computer_hardware_in_Soviet_Bloc_countries#Radio-86RK">Radio-86RK</a> and ZX Spectrum 48. But its peripherals are fantastic: SD/FAT card, USB, VGA, PS/2, timers, RS232, I2C, SPI, PWM, ADC/DAC and individual general purpose pins.</p>

<p>If you build it on a mock up board buying parts by yourself, it will cost less then ten Australian dollars.</p>

<p>The <a href="http://geoffg.net/maximite.html">project is open-sourced</a> (schematics, PCB artwork, sources).</p>

<p>Even if quickly flip through the <a href="http://geoffg.net/Downloads/Maximite/Maximite%20User%20Manual%20V3.0.pdf">documentation</a>, no doubts - a list features is impressive. All peripherals are available directly from BASIC.</p>

<p>Programs and data can be stored on a SD card. If there is a &ldquo;AUTORUN.BAS&rdquo; file on the card, BASIC will run at the start.</p>

<p>I liked Maximite, but soldering is not my favourite activity. Unfortunately it is only possible to buy a kit, but not a fully assembled unit.</p>

<p>I ordered the <a href="http://www.altronics.com.au/index.asp?area=item&amp;id=K9550">kit from Altronics</a> and soon after it arrived.</p>

<p>Only the microprocessor was already soldered because soldering such form factor chip isn’t an easy task.</p>

<p>Anyway, screw it, let’s do it.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0102.jpg" /></p>

<p>Here a few parts are already in place. I’m not a complete newbie in soldering but last time I took a soldering iron in my hands was about five years ago. I had no acid for soldering, so I was crumbling rosin right to soldering points. The effect is similar to acid. The soldering iron (the one on the plate) with a sharp sting.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0103.jpg" /></p>

<p>I spent the first hour struggling with only a few parts, but eventually it went smoother.</p>

<p>A half is ready.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0106.jpg" /></p>

<p>After one more hour it was all done.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0107.jpg" /></p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0110.jpg" /></p>

<p>Maximite can be powered from an external 9V source or form USB. I used USB.</p>

<p>Plug into USB and VGA. An off you go!</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0111.jpg" /></p>

<p>BASIC is ready but there is no keyboard. I hand’t a proper PS/2 one and I tried a USB-PS/2 connector. Alas, it didn’t fit.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0119.jpg" /></p>

<p>Next day I found the PS/2 keyboard and finally connected.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0114.jpg" /></p>

<p>The case.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0115.jpg" /></p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0112.jpg" /></p>

<p>Fully assembled.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0113.jpg" /></p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0116.jpg" /></p>

<p>I have to admit - the kit from Altronics is a very good quality product. The holes are metallized on the board, and the case fits perfectly.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0118.jpg" /></p>

<p>Then I had to upgrade the firmware to the latest version. Maximite can flash itself over USB without a special programmer. Just open the case and hold a special button when switching Maximite on. It goes to a boot loader mode.</p>

<p>Maximite is a standard CDC device in USB infrastructure. Windows still requires a driver though, but Mac has it built-in.</p>

<p>Plug-in.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/dsc01130.jpg" /></p>

<p>Flashing.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/dsc01129.jpg" /></p>

<p>Right, the firmware is upgraded up to 3.0A.</p>

<p>As I said, Maximite supports VGA and PS/2, but you can also connect it to a PC via USB. In this case Maximite mirrors the VGA output to that serial connection to the PC, also treats the data coming from that connection as keyboard input.</p>

<p>So, it is possible to detach VGA and PS/2 at all and talk to Maximite over the serial USB connection only.</p>

<p>For example, VGA dispay (voltmeter):</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/dsc01125.jpg" /></p>

<p>The same data on in a terminal emulation application on the PC:</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/dsc01123.jpg" /></p>

<p>Interestingly, Maximite works with pixels, not characters. So when a character is being displayed, it is also copied to the console, but when Maxitile draws graphics it is not visible in the serial console.</p>

<p>BASIC language in Maximite gives full control over the peripherals using operators.</p>

<p>There is an archive of BASIC programs running on Maximite available of the project website.</p>

<p>There are a few screenshots.</p>

<p>Clock.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/dsc01132.jpg" /></p>

<p>Character editor.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/dsc01128.jpg" /></p>

<p>Voltmeter.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/dsc01133.jpg" /></p>

<p>Puzzles.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/dsc01126.jpg" />
<img src="http://demin.ws/images/blog/maximite-kit/dsc01131.jpg" /></p>

<p>I believe, no comment here.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/dsc01134.jpg" /></p>

<p>Conclusion</p>

<p>Every penny I have spent on Maximite is worth that fun I’ve got.</p>

<p>The Maximite project is surprisingly solid. Everything is nice and simple. And it works!</p>

<p>For beginners, even kids, interested in microelectronics, Maximite is simply a godsend. Easy and nice to build. I as an amateur have built everything in a few hours only.</p>

<p>When my brother was building <a href="http://radio86.googlecode.com/hg/online/radio86.html">Radio-86RK Emulator</a> and Spectrum about twenty years ago, there was a joke about DIY projects published in radio electronics magazines: if a author says that his device doesn’t required any tuning, there is at least a little chance to get it working; but the author says that his device does require some minor tuning&hellip;</p>

<p>Anyway, if you want to come back to your 8-bit youth with a soldering iron in hands — build Maximite.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stuck process detector]]></title>
    <link href="http://demin.ws/blog/english/2012/01/05/stuck-process-detector/"/>
    <updated>2012-01-05T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2012/01/05/stuck-process-detector/</id>
    <content type="html"><![CDATA[<p>There is a problem — how to automatically detect stuck long running server processes? Say if a process is stuck it means there is a deadlock or it is spinning in an infinite loop.</p>

<p>An idea — periodically take a snapshot of the process stack trace. For instance:</p>

<pre><code>#0  0x991a8c22 in mach_msg_trap ()
#1  0x991a81f6 in mach_msg ()
#2  0x968870ea in __CFRunLoopServiceMachPort ()
#3  0x96890214 in __CFRunLoopRun ()
#4  0x9688f8ec in CFRunLoopRunSpecific ()
#5  0x9688f798 in CFRunLoopRunInMode ()
#6  0x92158a7f in RunCurrentEventLoopInMode ()
#7  0x9215fd9b in ReceiveNextEventCommon ()
#8  0x9215fc0a in BlockUntilNextEventMatchingListInMode ()
#9  0x90010040 in _DPSNextEvent ()
#10 0x9000f8ab in -[NSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] ()
#11 0x9000bc22 in -[NSApplication run] ()
#12 0x902a018a in NSApplicationMain ()
#13 0x0012e356 in main ()
</code></pre>

<p>For Linux, HPUX and Solaris there is a tool called <code>pstack</code>, and <code>procstack</code> on AIX. I’m sure it is possible to do the same on Windows because Process Explorer can do it.</p>

<p>Comparing the current stack trace with the previous one we can measure how much it has been changed. If the stack wasn’t changed at all or only a few deepest lines were changed (for example, inside the kernel), we may assume that this process is stuck. The deadlock on a file or database is even simpler because the code will be blocked on a function inside the kernel.</p>

<p>Of course, such detector has to be adjusted for specifics of the monitored processes. But it can be configurable via regular expressions or a script language as Lua, for instance.</p>

<p>The good thing is that such monitor doesn’t require any changes in the target software, and can be implemented on any language suitable for easy text parsing, for example, Ruby or Python.</p>

<p>Am I reinventing a wheel?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trade-off with const in legacy code]]></title>
    <link href="http://demin.ws/blog/english/2012/01/04/trade-off-with-const-in-legacy-code/"/>
    <updated>2012-01-04T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2012/01/04/trade-off-with-const-in-legacy-code/</id>
    <content type="html"><![CDATA[<p>Today we argued an hour with a colleague regarding the following code:</p>

<pre><code class="cpp">void foo(T* t) {
  bar(t);
}
</code></pre>

<p>The problem is that the function <code>bar</code> is a part of a legacy library which we cannot refactor right now. The signature of <code>bar</code> is <code>void bar(T*)</code>. <code>T</code> is not <code>const</code>. But in reality <code>bar</code> never changes an object referenced by <code>t</code>. This is how it was implemented.</p>

<p>But <code>foo</code> is a part of a brand new API, and we want to make nice or clean. The contract of the function <code>foo</code> says that it doesn’t need to change its parameter.</p>

<p>I think the code should be like this:</p>

<pre><code class="cpp">void foo(const T* t) {
  bar(const_cast&lt;T*&gt;(t));
}
</code></pre>

<p>Why? The contact of foo doesn’t require the pointer t to be non-const. We must reflect this in the API by making <code>t</code> <code>const</code>. It doesn’t matter that for some reason a particular implementation of <code>foo</code> is based on the legacy <code>bar</code> function not having <code>const</code> in the argument but never changing it. Yes, we have to use the ugly <code>const_cast</code> but this bad code is nicely isolated inside <code>foo</code> only and doesn’t affect our nice and clean brand new API. Moreover, if we refactor <code>foo</code> at some point and get rid of legacy <code>bar</code> at all, the problem will disappear completely.</p>

<p>Here is a counterargument from my colleague: it may turn out that the function <code>foo</code> can have a bug and accidentally change <code>t</code> even it is declared as <code>const</code>. The solution is to simply keep the argument of <code>foo</code> non-const. In this case we don’t need that cast, we explicitly show to an end user of <code>foo</code> that she should expect its parameter to be <code>const</code>, and eventually we never violate the contact of the function <code>foo</code>.</p>

<p>Eventually we haven’t agreed. My flaw is that <code>const</code> doesn’t really protect from side effects coming from legacy <code>bar</code> and the argument of <code>foo</code> may be changed regardless being <code>const</code>. My friend’s flaw is that it is not easy to explain in the documentation how and why the argument of <code>foo</code> may be changed. Just because our particular implementation dictates this? Such approach spreads the drawback of the legacy code to our nice and shiny new code.</p>

<p>Dilemma.</p>

<p>P.S. There is another esoteric approach — to create a temporary deep copy of <code>T</code> inside <code>foo</code> and pass it to <code>bar</code> by non-const pointer. Personally if I have to choose between quick but badly designed code and slow but nicely written code I usually go for the second one. Tomorrow we can buy another faster computer and the slow code will be faster, but that computer will make the bad code better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Walter Isaacson, &#34;Steve Jobs: The Exclusive Biography&#34;]]></title>
    <link href="http://demin.ws/blog/english/2011/12/27/steve-jobs-the-exclusive-biography/"/>
    <updated>2011-12-27T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2011/12/27/steve-jobs-the-exclusive-biography/</id>
    <content type="html"><![CDATA[<p>&ldquo;<a href="http://www.amazon.co.uk/Steve-Jobs-Exclusive-Walter-Isaacson/dp/1408703742">Steve Jobs: The Exclusive Biography</a>&rdquo; by Walter Isaacson</p>

<p><img src="http://demin.ws/images/covers/english/steve-jobs-exclusive-biography-cover.jpg" /></p>

<p>I thought that biographies are for &ldquo;old people&rdquo;. This book has changed that mindset in me. Being driven by massive ads and recently emerged love with Apple products and philosophy I had started reading.</p>

<p>Initially it was like an expanded version of &ldquo;<a href="http://www.imdb.com/title/tt0168122/">Pirates of Silicon Valley</a>&rdquo; which I, frankly, liked, but as reading progressed I had just fallen in love with this book and weren&rsquo;t able to stop.</p>

<p>The book can be treated as conjuncture or just an attempt to leverage the situation that Steve has just passed away. I was fully biased but after the first chapter I was hooked.</p>

<p>It is fascinating reading. Maybe just because the author is talented, I don&rsquo;t know.</p>

<p>Conclusion: strongly recommend.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thomas L. Friedman, &#34;The world is flat 3.0: A Brief History of the Twenty-first Century&#34;]]></title>
    <link href="http://demin.ws/blog/english/2011/12/24/world-is-flat/"/>
    <updated>2011-12-24T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2011/12/24/world-is-flat/</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve come back to audiobooks. 40-50 minutes per day when heading an office and then back allow to consume books with decent speed.</p>

<p>A recent.</p>

<p>&ldquo;<a href="http://www.amazon.com/World-Flat-3-0-History-Twenty-first/dp/0312425074/">The world is flat 3.0: A Brief History of the Twenty-first Century</a>&rdquo;, Thomas L. Friedman</p>

<p><img src="http://demin.ws/images/covers/english/world-is-flat-cover.jpg" /></p>

<p>This is a killer book to understand or even discover that nowadays:</p>

<ul>
<li>individuals can compete with corporations</li>
<li>an importance of engineering and especially computer education is increasing enormously</li>
<li>a number of places on the Earth when you can have decent life doing what you love to do is not narrowed to the US and a few EU countries anymore</li>
<li>India, China, Russia and many other countries have a very strong position competing with even US now without immigration
permanent self education and nurturing your curiosity (CQ + PQ always greater that IQ) is the only way to remain valuable</li>
</ul>

<p>And many other topics.</p>

<p>Frankly, there were moments in my life when I doubted and thought I would be better off doing, for instance, real estate, natural resources, ads or media rather than software. If you have even a tiny similar concern this book will wipe it out forever, and maybe even show the way.</p>

<p>To conclude: very useful, interesting and fascinating reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Virtual private functions in C++]]></title>
    <link href="http://demin.ws/blog/english/2011/12/21/virtual-private-functions-in-cpp/"/>
    <updated>2011-12-21T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2011/12/21/virtual-private-functions-in-cpp/</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve come across an interesting in my point of view bit of code. There was a virtual private function. The approach is odd at the first place and I thought it shouldn&rsquo;t even compile, but surprisingly it did. I felt that this was yet another gap in my C++.</p>

<p>I wrote this code:</p>

<pre><code class="cpp">#include &lt;iostream&gt;

class A {
public:
  void bar() { foo(); }
private:
  virtual void foo() = 0;
};

class B: public A {
private:
  virtual void foo() { std::cout &lt;&lt; &quot;B::foo()&quot; &lt;&lt; std::endl; }
};

int main(int argc, char* argv[]) {
  A* a = new B();
  a-&gt;bar();
  delete a;
  return 0;
}
</code></pre>

<p>VS2010 and GCC compile it perfectly and it prints out <code>B::foo()</code>.</p>

<p>I have concluded that the virtual function mechanism usually implemented via vtable is runtime, but public/private is compile time, and they don&rsquo;t depend on each other.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub as a blog engine]]></title>
    <link href="http://demin.ws/blog/english/2011/12/18/blogging-on-github/"/>
    <updated>2011-12-18T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2011/12/18/blogging-on-github/</id>
    <content type="html"><![CDATA[<p>To say that Blogspot (Blogger) infuriates me is to say nothing. The only benefit of it is fast indexing by Google.</p>

<p>Artemy Lebedev said that he despises all this <a href="http://en.wikipedia.org/wiki/Search_engine_optimization">SEO</a> bullshit because it is much more productive to focus on creating great posts rather than thinking how to attract more readers. His <a href="http://tema.livejournal.com/">LJ</a> uses a default template without even minor tweaks to make it looking “cool”. Despite of this his blog is in Russian Top 10.</p>

<p>Nobody reads blogs directly nowadays. Everybody uses Google Reader or other aggregators making the design of blogs absolutely pointless.</p>

<p>Anyway let’s leave odious Lebedev and come back to our techy blogs. Tom Preston-Werner, one of the Github founders, <a href="http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html">said that he wanted to write posts</a> but not tweaking different templates or keeping the version of WordPress or Mephisto up to date.</p>

<p>A similar thought haunts me from the day one of using Blogspot. Only recently I have sorted a way of creating post by using <a href="http://docutils.sourceforge.net/docs/user/rst/quickref.html">ReST</a>. Now I write posts in this markup and convert to HTML before publishing by a few handcrafted scripts. Unfortunately hosting for images is not automated in anyway.</p>

<p>Many times I wanted to migrate to a standalone platform, for example, WordPress. But my laziness and unwillingness to spend even a second on its maintenance always stopped me.</p>

<p>At the moment I have another attack of hate to Blogspot and as a consequence look for alternatives.</p>

<p>Surprisingly I never considered using <a href="http://www.subspacefield.org/~travis/static_blog_generators.html">static blog engines</a>.</p>

<p>What if just simply migrate to <a href="http://pages.github.com/">GitHub Pages</a>? It converts one of your repositories to a website which can be also processed by <a href="http://jekyllrb.com/">Jekyll</a>, a static engine from Tom Preston-Werner.</p>

<p>I could kill a few birds with one stone – to use a proper markup language, <a href="http://daringfireball.net/projects/markdown/syntax">Markdown</a> or <a href="http://en.wikipedia.org/wiki/Textile_(markup_language)">Textile</a>, instead of bloody HTML and to manage publishing by git. Of course ReST is better but I can cope with it.</p>

<p>Also GitHub Pages can be integrated with your own domain if needed.</p>

<p>Comments and discussions. <a href="http://disqus.com/">Disqus</a> seems to be an easiest way to sort it without any hassle.</p>

<p>Google Analytics perfectly works with any engine where you can insert their JavaScript hook into pages.</p>

<p>What is still missing?</p>

<p>Sometimes people still visit blogs directly, for instance, to find previous posts or explore “social” details. In this case all these bells and whistles in a form of JavaScript gadgets are very useful and save a lot of time. Blogspot allows adding them in a few clicks.</p>

<p>But coming back to the question at the beginning – do I really need them? If the content is interesting the audience will inevitably find you. A word of mouth in a form of Twitter or Facebook will attract people. But if the content is crap all those bells and whistles (and SEO) will not help.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chromebook Samsung 5 5G review]]></title>
    <link href="http://demin.ws/blog/english/2011/10/02/chromebook-samsumg-5-3g-review/"/>
    <updated>2011-10-02T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2011/10/02/chromebook-samsumg-5-3g-review/</id>
    <content type="html"><![CDATA[<p>I read in papers that Google has <a href="http://www.telegraph.co.uk/technology/google/8800002/Worlds-first-Google-store-opens-in-London.html">launched an offline shop for Chromebooks</a>.</p>

<p>I went to check out the stop and the Chromebook.</p>

<p>The &ldquo;Shop&rdquo; is a two desk place with a dozen of demo notebooks in the <a href="http://www.pcworld.co.uk/gbuk/s/find-a-store.html?iStoreId=696">PC World</a> nearby Apple, Sony and other departments.</p>

<p>The Chromebook demoing there is <a href="http://www.currys.co.uk/gbuk/samsung-series-5-3g-chromebook-white-10822582-pdt.html">Samsung Series 5 3G</a>.</p>

<p>Below there are a few not quite good quality pictures I&rsquo;ve done during an hour playing with this device at the shop.</p>

<p>Closed lid.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-closed-lid.jpg" /></p>

<p>Left - power, a weird video connector, USB and audio.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-left-side.jpg" /></p>

<p>Right - one more USB.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-right-side.jpg" /></p>

<p>Front - SD.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-sd-port.jpg" /></p>

<p>The power socket is quite fragile.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-power-connector.jpg" /></p>

<p>Look at the keyboard.</p>

<p>Above Shift there is an interesting button called &ldquo;Search&rdquo; opening a new tab and pointing the cursor to the URL bar. In fact, CTRL-T. I liked this button.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-search-button.jpg" /></p>

<p>There are internet related buttons in the top row. The button between full screen and the brightness is the switch amongst Chrome windows when there are multiple of them opened.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-inet-buttons.jpg" /></p>

<p>There are no Ins, Del, Page Up and Page Down.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-no-ins-del-pgup-pgwn.jpg" /></p>

<p>After 8 seconds of boot time you see a login window for your Google Account (I used a demo one), and then the main screen comes out.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-main-screen.jpg" /></p>

<p>In Chromebook there is only one application - the Chrome browser. It is not possible to exit from it. You can only open new tabs and windows.</p>

<p>The Chrome itself differs from its desktop version. There are extra menus. For example, network settings.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-network-settings.jpg" /></p>

<p>WiFi</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-wifi-selector.jpg" /></p>

<p>Russian keyboard layout is configurable through the settings.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-russian.jpg" /></p>

<p>Printing works via a direct connection to a USB printer (HCL is provided), or a &ldquo;proper&rdquo; Google way printing via Cloud Print.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-cloud-print.jpg" /></p>

<p>It is possible to keep files locally. For instance, you can attach them to e-mails.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-local-file-open.jpg" /></p>

<p>Only a few types of files allow to do anything with them. For example, photos and vides can be uploaded to WebPicasa.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-local-file-storage.jpg" /></p>

<p>All downloads and screenshots also go to the local storage.</p>

<p>Skype was not available, so I tried GTalk (this is mine shaved head in the window).</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-gtalk.jpg" /></p>

<p>GTalk settings.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-gtalk-setup.jpg" /></p>

<p>After a few minutes of jiggling around GTalk crashed.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-gtalk-crash.jpg" /></p>

<p>Of course, I checked out the <a href="http://easy-coding.blogspot.com">right website</a>.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-easycoding.jpg" /></p>

<p>And <a href="http://radio86.googlecode.com/hg/online/radio86.html">another one</a>.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-volcano.jpg" /></p>

<p>And <a href="http://bellard.org/jslinux/">another one</a> to figure out the overall performance.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-jslinux.jpg" /></p>

<p>Linux booted in 33 seconds. On my Mac Air Core Due it boots in 8 seconds. But bogomips were the same (~20) for some reason.</p>

<p>Now my biased conclusion.</p>

<p>400 quid is nuts. The notebook itself isn&rsquo;t light, tiny and slick, which could be an excuse for such high price, but there are a dozen of other netbooks around doing the same stuff, plus the rest.</p>

<p>Even at the shop, where WiFi was really fast, working fully online becomes annoying very soon due to network lags. The official &ldquo;Offline Gmail&rdquo; is available but it is a joke, and barely usable seriously.</p>

<p>For 50 quid I could buy it right there, just because I use Google&rsquo;s products and is willing to play with this &ldquo;Google Console&rdquo;, but 400 is &ldquo;no, thank you&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cast to incomplete type in C and C++]]></title>
    <link href="http://demin.ws/blog/english/2011/08/17/cast-to-incomplete-type-in-c-and-cpp/"/>
    <updated>2011-08-17T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2011/08/17/cast-to-incomplete-type-in-c-and-cpp/</id>
    <content type="html"><![CDATA[<p>This compiles in C and C++ without any problems:</p>

<pre><code class="cpp">void* p = (struct this_does_not_exist *) -1;
</code></pre>

<p>Remove <code>struct</code>, compile as C++ and get an error:</p>

<pre><code>cast.cpp
cast.cpp(1) : error C2065: 'this_does_not_exist' : undeclared identifier
cast.cpp(1) : error C2059: syntax error : ')'
</code></pre>

<p>Adding a forward declaration:</p>

<pre><code class="cpp">class this_does_not_exist;
void* p = (this_does_not_exist *) -1;
</code></pre>

<p>And it again compiles cleanly.</p>

<p>All examples conform the Standard but to be honest the first one is really odd.</p>

<p>GCC gives a warning at least.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software development in one picture]]></title>
    <link href="http://demin.ws/blog/english/2011/07/17/software-development-in-one-picture/"/>
    <updated>2011-07-17T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2011/07/17/software-development-in-one-picture/</id>
    <content type="html"><![CDATA[<p>I don&rsquo;t remember where and when I dug this picture but since then I keep it. It nicely visualizes a software development process.</p>

<p><img src="http://demin.ws/images/blog/software-development-in-one-picture.jpg" /></p>

<p>Every time I come across famous Shakespeare&rsquo;s trade off &ldquo;to refactor or not refactor&rdquo; I come back to this picture. You can keep going to put more and more cheap crutches preventing your house from irreversible falling down. It can help for sometime but at some point there will be a point of no return. Or you can get all the people out of the house for a while and rebuilt it of bricks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[strcpy() on overlapped strings]]></title>
    <link href="http://demin.ws/blog/english/2011/07/14/strcpy-on-overlapped-strings/"/>
    <updated>2011-07-14T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2011/07/14/strcpy-on-overlapped-strings/</id>
    <content type="html"><![CDATA[<p>Consider the code:</p>

<pre><code class="cpp">#include &lt;string.h&gt;
#include &lt;stdio.h&gt;

int main(int argc, char* argv[]) {
  char b[32];
  strcpy(b, &quot;123456789012345&quot;);
  strcpy(b + 1, b);
  printf(&quot;[%s]\n&quot;, b);
  return 0;
}
</code></pre>

<p>There is a problem here because the parameters of <code>strcpy()</code> overlap.</p>

<p>This is an unpredictable behaviour because <code>strcpy()</code> doesn&rsquo;t guarantee the order of moving bytes (from left to right or vice versa) but the result depends on it.</p>

<p>Check on different compilers and platforms.</p>

<p><strong>Visual Studio 2010 64-bit</strong></p>

<pre><code>[1123446788012245]
</code></pre>

<p>The result is corrupted every four bytes. Obviously, it has been copied 32 bit words.</p>

<p><strong>Linux 64-bit</strong></p>

<pre><code>[1123456788012345]
</code></pre>

<p>The result is now different. Compiler and libc:</p>

<pre><code>ldd --version
ldd (GNU libc) 2.5

gcc --version
gcc (GCC) 4.1.2 20080704 (Red Hat 4.1.2-50)
</code></pre>

<p><code>man strcpy</code> says:</p>

<pre><code>The strings may not overlap...
</code></pre>

<p>Why not &ldquo;must not&rdquo;?</p>

<p><strong>Solaris (SPARC)</strong></p>

<pre><code>[1123446788012245]
</code></pre>

<p>Compiler and libc:</p>

<pre><code>cc -V
cc: Sun C 5.8 2005/10/13

version /usr/lib/libC*
version of &quot;/usr/lib/libC.so.3&quot;: SC2.0.1 12/20/94 Sun C++ 3.0.1 patch 100962-09
version of &quot;/usr/lib/libC.so.5&quot;: Sun SUNWlibC SunOS 5.10 Patch 119963-06 2006/04/21
version of &quot;/usr/lib/libCrun.so.1&quot;: Sun SUNWlibC SunOS 5.10 Patch 119963-06 2006/04/21
version of &quot;/usr/lib/libCstd.so.1&quot;: Sun SUNWlibC SunOS 5.10 Patch 119963-06 2006/04/21
</code></pre>

<p><strong>AIX</strong></p>

<pre><code>[1111111111012245]
</code></pre>

<p>This result is clearly wrong. The man pages are pretty clear on it:</p>

<p><em>String movement is performed on a character-by-character basis and starts at the left. Overlapping moves toward the left work as expected, but overlapping moves to the right may give unexpected results.</em></p>

<p>Compiler and libc:</p>

<pre><code>lslpp -L | grep Compiler
vacpp.cmp.core            8.0.0.20    C     F    IBM XL C/C++ Compiler

lslpp -L | grep libc
bos.rte.libc               5.3.9.1    C     F    libc Library
</code></pre>

<p><strong>HP-UX</strong></p>

<pre><code>[1123456789012345]
</code></pre>

<p>Compiler:</p>

<pre><code>what `which cc`

HP C/aC++ for Integrity Servers B3910B A.06.22 [Nov 14 2008]
</code></pre>

<p>This result is correct but man pages warn in a funny way:</p>

<p><em>Character movement is performed differently in different implementations, so moves involving overlapping source and destination strings may yield surprises.</em></p>

<p><strong>Conclusion</strong>: <code>strcpy()</code> is bad, due to many reasons.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Number of crossings in bipartite graph]]></title>
    <link href="http://demin.ws/blog/english/2011/05/24/number-of-crossings-in-bipartite-graph/"/>
    <updated>2011-05-24T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2011/05/24/number-of-crossings-in-bipartite-graph/</id>
    <content type="html"><![CDATA[<p>Given a <a href="http://en.wikipedia.org/wiki/Bipartite_graph">bipartite graph</a>: &ldquo;n&rdquo; vertices on the left, &ldquo;m&rdquo; on the right and edges. The question is: how many edges in this graph are crossed?</p>

<p>In this example n=5, m=4, ten edges: 1-1, 1-2, 2-1, 2-2, 3-3, 4-1, 4-3, 5-1, 5-2, 5-4, a number of crossings: 10.</p>

<p><img src="http://demin.ws/images/blog/bipartite-graph.gif" /></p>

<p>Crossings are always considered in pairs. For example, if three edges are crossed in one physical point, formally there are still three crossings, not one.</p>

<p>O(n*m) solution exists.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Safer sizeof for arrays in C++]]></title>
    <link href="http://demin.ws/blog/english/2011/05/24/safer-sizeof-for-arrays-in-cpp/"/>
    <updated>2011-05-24T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2011/05/24/safer-sizeof-for-arrays-in-cpp/</id>
    <content type="html"><![CDATA[<p>Sometimes you have to deal with raw arrays and pointers to them in C++, and also determine a number of elements in the array at compile time.</p>

<p>For example, it can be done this way:</p>

<pre><code class="cpp">#define arraysize(array) (sizeof(array) / sizeof(array[0]))
</code></pre>

<p>But there is a little problem over there. If accidently a pointer is passed to the this macro instead of an array, the code still compiles but the value will be far from being conceived.</p>

<p>There is a way to make this macro safer.</p>

<pre><code class="cpp">template &lt;typename T, size_t N&gt;
char (&amp;ArraySizeHelper(T (&amp;array)[N]))[N];
#define arraysize(array) (sizeof(ArraySizeHelper(array)))
</code></pre>

<p>Looks cryptic, but we can break it apart:</p>

<ul>
<li><code>T (&amp;array)[N])</code> - an array definition (<code>T array[N]</code>) passed by reference</li>
<li><code>char (&amp;ArraySizeHelper(...)[N]</code> - a function returning a array by reference</li>
<li><code>sizeof(ArraySizeHelper(array))</code> - take a size of the function return value type</li>
<li>This is a template function, parameterized by an array type and its size deduced automatically by the compiler. The function isn&rsquo;t called, so its definition is not required.</li>
</ul>

<p>Frankly, it is not easy to get it. But this macro is great.</p>

<p>By the way, we can play with <code>sizeof()</code> of the function return value type:</p>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;string&gt;

std::string f() {
  return std::string();
}

int main() {
  std::cout &lt;&lt; sizeof( (&amp;f)() ) &lt;&lt; std::endl;
  std::cout &lt;&lt; sizeof( std::string ) &lt;&lt; std::endl;
  return 0;
}
</code></pre>

<p>My VS2010 prints out &ldquo;28&rdquo; twice.</p>

<p>Interestingly, in C it is also possible:</p>

<pre><code class="cpp">#include &lt;stdio.h&gt;

struct t {
  char x[1024];
};

struct t f() {
  struct t a;
  return a;
}

int main() {
  printf(&quot;%d\n&quot;, sizeof(struct t));
  printf(&quot;%d\n&quot;, sizeof( (*f)() ));
  return 0;
}
</code></pre>

<p>It prints out <code>1024</code> twice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In-place string literal subscripting]]></title>
    <link href="http://demin.ws/blog/english/2011/05/22/in-place-string-literal-subscripting/"/>
    <updated>2011-05-22T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2011/05/22/in-place-string-literal-subscripting/</id>
    <content type="html"><![CDATA[<p>I confess, I had never occurred before to subscript a string literal in-place. For example:</p>

<pre><code class="cpp">#include &lt;stdio.h&gt;

int main() {
  int i;
  for (i = 0; i &lt; 8; ++i)
    printf(&quot;%c&quot;, &quot;12345678&quot;[i]);
  printf(&quot;\n&quot;);
  return 0;
}
</code></pre>

<p>To me personally the expression <code>&quot;12345678&quot;[i]</code> cuts the eye. But from the language point of view everything is fine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ACCU 2011 videos]]></title>
    <link href="http://demin.ws/blog/english/2011/05/09/accu-2011-videos/"/>
    <updated>2011-05-09T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2011/05/09/accu-2011-videos/</id>
    <content type="html"><![CDATA[<p>Alas, it is necessary to give just links, because they don&rsquo;t allow embedding code for viewing directly from the page.</p>

<p>Scott Meyers</p>

<p><a href="http://skillsmatter.com/podcast/home/cpu-caches-and-why-you-care">CPU caches and why you care</a></p>

<p><a href="http://skillsmatter.com/podcast/home/move-semanticsperfect-forwarding-and-rvalue-references">Move semantics, perfect forwarding, and rvalue references</a></p>

<p>John Lakos (Bloomberg)</p>

<p><a href="http://skillsmatter.com/podcast/home/defensive-programming-done-right">Defensive programming done right</a></p>

<p>Dietmar Kuhl (Bloomberg)</p>

<p><a href="http://skillsmatter.com/podcast/home/generic-programming-with-c-plus-plus-0x">Generic Programming with C++ 0x</a></p>

<p><a href="http://skillsmatter.com/event/home/accu-2011">Other videos are also available</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symbolic links to files and directories in Windows]]></title>
    <link href="http://demin.ws/blog/english/2011/05/09/symbolic-links-to-files-and-directories-in-windows/"/>
    <updated>2011-05-09T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2011/05/09/symbolic-links-to-files-and-directories-in-windows/</id>
    <content type="html"><![CDATA[<p>To my shame, I thought that Windows still lives in the previous century without links in the file system. I knew about junctions, links to directories, which can be created, for instance, in FAR via Alt-F6.</p>

<p>But today, thumbing through &ldquo;<a href="http://www.amazon.co.uk/Windows-Internals-PRO-Developer-Mark-Russinovich/dp/0735625301/">Windows Internals</a>&rdquo;, I came across a paragraph about it.</p>

<p>So, there is a little log from the console (Windows 7).</p>

<pre><code>ver

Microsoft Windows [Version 6.1.7601]
</code></pre>

<p>Create a file and a directory:</p>

<p>cd C:\Temp\links
C:\temp\links&gt;mkdir folder
C:\temp\links&gt;echo &gt;file</p>

<p>Create a symbolic link to the directory:</p>

<pre><code>C:\temp\links&gt;mklink /D link1 folder
symbolic link created for link1 &lt;&lt;===&gt;&gt; folder
</code></pre>

<p>Create a junction to the directory (it isn&rsquo;t possible to point it to a file):</p>

<pre><code>C:\temp\links&gt;mklink /J link2 folder
Junction created for link2 &lt;&lt;===&gt;&gt; folder
</code></pre>

<p>Create a symbolic link slightly differently:</p>

<pre><code>C:\temp\links&gt;mklink link3 folder
symbolic link created for link3 &lt;&lt;===&gt;&gt; folder
</code></pre>

<p>Create a symbolic link to a file:</p>

<pre><code>C:\temp\links&gt;mklink link4 file
symbolic link created for link4 &lt;&lt;===&gt;&gt; file
</code></pre>

<p>Result:</p>

<pre><code>C:\temp\links&gt;dir
 Volume in drive C has no label.
 Volume Serial Number is C021-6C9F

 Directory of C:\temp\links

09/05/2011  18:26    &lt;DIR&gt;          .
09/05/2011  18:26    &lt;DIR&gt;          ..
09/05/2011  18:26                13 file
09/05/2011  18:25    &lt;SYMLINKD&gt;     link1 [folder]
09/05/2011  18:25    &lt;JUNCTION&gt;     link2 [C:\temp\links\folder]
09/05/2011  18:25    &lt;SYMLINK&gt;      link3 [folder]
09/05/2011  18:26    &lt;SYMLINK&gt;      link4 [file]
09/05/2011  18:23    &lt;DIR&gt;          folder
               3 File(s)             13 bytes
               5 Dir(s)  208,278,925,312 bytes free
</code></pre>

<p>Note the interesting types of files: <code>&lt;SYMLINKD&gt;</code>, <code>&lt;JUNCTION&gt;</code>, <code>&lt;SYMLINK&gt;</code>. The book says the first two are identical in functionality, simply <code>&lt;JUNCTION&gt;</code> is older mechanism available in older versions of Windows and supporting links within the same volume only.</p>

<p>Also, note that even <code>link3</code> points to a directory, it doesn&rsquo;t behave as a regular directory (in contrast to <code>link1</code> and <code>link2</code> which work normally as directories). FAR, by the way, also doesn&rsquo;t see <code>link3</code> as a directory.</p>

<p>In general, such simple task as links in the file system, solved in UNIX more than twenty years ago, has been solved in Windows in traditional for this operating system way - there are multiple solutions with different level of compatibility.</p>

<p>By the way, &ldquo;<a href="http://www.amazon.co.uk/Windows-Internals-PRO-Developer-Mark-Russinovich/dp/0735625301/">Windows Internals</a>&rdquo; is bloody fantastic, strongly recommend.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Process exit code after crash]]></title>
    <link href="http://demin.ws/blog/english/2011/04/06/process-exit-code-after-crash/"/>
    <updated>2011-04-06T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2011/04/06/process-exit-code-after-crash/</id>
    <content type="html"><![CDATA[<p>Just come across an interesting bug. Being executed from a Makefile script a unit test runner crashed. It looked like another memory corruption. But the consequence was more interesting. That Makefile kept going regardless the crash of the unit test runner. It means the runner still returned zero exit code instead of non-zero.</p>

<p>We fixed that bug (including Makefile problem) but a generic question occured: what exit code is returned to the parent when the process crashes before executing <a href="http://linux.die.net/man/3/exit">exit()</a>?</p>

<p>In UNIX there are special macros inspecting the status returned from <a href="http://linux.die.net/man/2/wait">wait()</a>. But all UNIXes are different and there is Windows as well.</p>

<p>Eventually I wrote a simple self-killing program:</p>

<pre><code class="cpp">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

int main(int argc, char* argv[]) {
  char cmd[80];
  int r;
  sprintf(cmd, &quot;%s ?&quot;, argv[0]);
  if (argc &gt; 1) {
    if (argv[1][strlen(argv[1]) - 1] == '1')
      *(char *)0 = 0;
    exit(0x77);
  }
  printf(&quot;Normal: %08X\n&quot;, system(cmd));
  cmd[strlen(cmd) - 1] = '1';
  printf(&quot;Crash : %08X\n&quot;, system(cmd));
  return 0;
}
</code></pre>

<p>And run it on different systems.</p>

<p>Windows 7, Visual Studio 2010, <code>cl crash.c &amp;&amp; crash</code>:</p>

<pre><code>Normal: 00000077
Crash : C0000005
</code></pre>

<p>Linux x86_64 (<code>cc -o crash crash.c &amp;&amp; ./crash</code>):</p>

<pre><code>Normal: 00007700
Crash : 0000000B
</code></pre>

<p>Signal 0x0B (13), by the way, is <code>SIGSEGV</code>, segmentation violation.</p>

<p>Solaris SPARC 5.10:</p>

<pre><code>Normal: 00007700
Segmentation Fault - core dumped
Crash : 00008B00
</code></pre>

<p>HP-UX Itanium 2:</p>

<pre><code>Normal: 00007700
sh: 25112 Memory fault(coredump)
Crash : 00008B00
</code></pre>

<p>AIX 5.2:</p>

<p>Normal: 00007700
Crash : FFFFFFFF</p>

<p>Here seems the exit code wasn&rsquo;t even propagated to <code>system()</code>.</p>

<p>Conclusion: it (as usually) really depends on the operating system.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit tests for syntax highlighting]]></title>
    <link href="http://demin.ws/blog/english/2011/04/02/unit-tests-for-syntax-highlighting/"/>
    <updated>2011-04-02T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2011/04/02/unit-tests-for-syntax-highlighting/</id>
    <content type="html"><![CDATA[<p>Quite often people argue whether all those efforts to use unit tests are worth those benefits in code maintenance and regression bugs. Despite of many pros and cons being said there could be situations when it is not obvious that is better, but I can give a very representative example below.</p>

<p>At the moment I&rsquo;m working on a project customizing putty to support of-the-fly syntax highlighting for a proprietary programming language. The main difficulty is that the language has very complicated and not well defined and irregular grammar with lots of ambiguities.</p>

<p>As a result what I&rsquo;m doing is fixing different special cases here and there. But syntax highlighting is complicated in general - you fix one thing and easily break ten others at the same time.</p>

<p>After some time of maintenance I gave up and I spent a day setting up <a href="http://code.google.com/p/cmockery/">cmockery</a> and all the rest of unit testing plumbing. Then I remade all code examples I used to verify everything manually in a form of unit tests.</p>

<p>Once I&rsquo;ve done that life become simpler. Now after every change I can automatically check by running tests that all previous cases are not broken. I&rsquo;m confident to change things without being afraid of regression. Of course I spent an extra day to two developing, debugging and configuring unit tests infrastructure but it has paid off already, fully or even more.</p>

<p>Every new feature or bug fix I start from creating a test demonstrating how it should work, and, obviously, this test must fail. Then I implement a bit of functionality to make this test working. I cannot image how I might develop this project further without unit tests.</p>

<p>By the way, this is a classical approach when tests are written beforehand. And the main code complements the tests afterwards.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Common misconceptions about plastic bank cards]]></title>
    <link href="http://demin.ws/blog/english/2011/03/27/common-misconceptions-about-plastic-bank-cards/"/>
    <updated>2011-03-27T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2011/03/27/common-misconceptions-about-plastic-bank-cards/</id>
    <content type="html"><![CDATA[<p>Having more than ten years of experience working in banking, in particular with electronic payments, with the help of colleagues I&rsquo;ve created a mini FAQ about plastic bank cards. Some questions are obvious, but some can be quite vague.</p>

<p>Thus, there are ten common misconceptions.</p>

<p>1. The amount of money stored on the card.</p>

<p>On regular credit or debit cards (even having a chip) there is no money counter. The card is just an identifier. There are exceptions in the form of additional wallet applications on the chip cards. Usually it can be discount or loyalty programs, virtual money (for instance, petrol liters) etc. In general this is not related to the normal card usage. Such applications are usually accepted in special stores that only support these cards.</p>

<p>2. Anyone, who wants to accept the plastic cards, can be connected directly to Visa, MasterCard or to other international payment networks.</p>

<p>It&rsquo;s not possible for just anyone to connect directly to Visa or MasterCard. Only major banks or independent processing centers can do it because it requires special equipment, considerable insurance accounts, security certification and lots of other &ldquo;little things&rdquo;. Furthermore not every bank can afford it. All others wishing to take cards use their services.</p>

<p>3\ ATMs or POS terminals are connected directly to Visa or MasterCard.</p>

<p>Major international payment networks do not have their own ATMs or payment terminals. ATMs or POS terminals must belong to a bank, which, in turn, is either directly or indirectly (see #2) connected to the payment network.</p>

<p>4. I have $200 &ldquo;on the card&rdquo;. That&rsquo;s all that I can spend.</p>

<p>The card balance and the amount you can spend daily using the card are not entirely related to each other. It is more constructive discussing the daily limit on the card. The daily limit depends on many factors, and can be either less than the card balance or even greater. For example, even having one million on the account, you may not be allowed to withdraw more than a few thousand in cash a day at the ATM (and this is not an ATM hardware limitation). And vice versa, if you are a VIP customer, usually having millions in the bank, but at the moment you&rsquo;ve lost everything in a casino, after the call to the bank, individually, some of the top managers can give the command to increase your daily limit allowing you to pay off. In this situation the bank takes all the responsibility that you will return everything back.</p>

<p>5. ATM or POS terminals validate the PIN.</p>

<p>In the overwhelming number of cases, any use of the card refers to a connection with the bank that issued the card. If you insert a card issued by HSBC UK in Australia, an approval to withdraw money will be requested from the HSBC UK anyway right before your eyes. This is because the PIN can be verified only by the bank that issued the card. The only exceptions are cards with a chip. Such cards can verify the PIN without connecting to the bank. These cards are microcomputers able to calculate crypto functions. Sometimes when making a purchase (not cash withdraw), a store may not connect to the bank when a non-chip card is being used if the amount is less than a certain limit. The reason for this is the transactional and communication costs. When the amount is not significant the risk of loss after possible fraud is also not significant.</p>

<p>6. The PIN is stored on the magnetic stripe and any bank or store employee can &ldquo;steal&rdquo; it when holding your card while you turn away.</p>

<p>In fact, there is only a crypto convolution of the PIN recorded on the magnetic stripe, and it is calculated using a crypto key stored in a bank HSM (high security module). Using data from the magnetic stripe can only verify the PIN, and only if you know the secret key. Usually the 3DES algorithm is used. HSM is a hardware device for storing keys and cryptographic operations using those keys. After initial input of keys to HSM (personalization) they are never sent outside the physical case of HSM in the plain form.</p>

<p>In addition to the major effort for the physical protection of these devices, they themselves are protected from an unauthorized intrusion. For example, if you try to open the case connecting a &ldquo;sniffer&rdquo;, all the keys will be automatically erased.</p>

<p>There is an interesting technique of primary keys input. For example, here is a realistic scenario. We choose N security officers of the bank, for example 3 (ideally, they shouldn&rsquo;t know each other personally). Each officer generates a key and doesn&rsquo;t show it to anyone else. Then, they in turn go into the room with HSM and enter their keys. After all the keys are entered, the HSM computes bitwise XOR amongst them and keeps the result as the master key. It turns out that nobody knows that master key at all. To restore the master key you have to know all original components from those N security officers, who must take care of keeping it secret.</p>

<p>There are no &ldquo;unimportant&rdquo; questions in the security, and such procedures are mandatory when the power of cryptography ends and the human factor starts.</p>

<p>This is very important: nobody from the bank staff, ever, under any circumstances will ask you the PIN. However, you cannot imagine how often countless customers, when being asked by the bank operator the security question say the PIN.</p>

<p>7. When making the purchase, money immediately comes directly from the customer&rsquo;s account to the account of the merchant.</p>

<p>Usually clearing happens in the end of the business day. When making the purchase the amount from the available day limit (see #4) is only taken on hold. The account is debited a few days later when the bank issued the card receives the financial representation from the bank that accepted the card and processed the payment (bank-acquirer).</p>

<p>8. The amount, printed on your receipt when paying by card, is precisely what will be deducted from your account.</p>

<p>In fact, the authorized amount may differ significantly from the amount that was withdrawn by the financial transaction. It often happens in car rentals and hotels. Such merchants are allowed to charge extras (for example, for petrol and minibar). And these are not the only type of merchants allowed to adjust the final amount.</p>

<p>Also the amount taken on hold on purchase and the amount eventually withdrawn from the account can differ if the account currency is different to the transaction currency. Clearing usually takes a few days but the exchange rate could change in this time.</p>

<p>9. The amount, taken on hold when paying by card, will be withdrawn from the account anyway.</p>

<p>The amount on hold may be never debited from the account. After 10 (for ATM) or 45 (for other types of terminals) days, if there is no financial representation received from the bank-acquirer, the hold will be lifted. This is &ldquo;good&rdquo; and &ldquo;bad&rdquo;. It is &ldquo;good&rdquo; if you have just paid but want to cancel. You can contact your bank immediately, explain the reason for the cancellation, and if everything is okay with the payment, the operator cancels the transaction and the hold disappears. In this case if your bank receives a financial representation of this payment from the merchant (in a few days period) the bank will be dealing with this problem without you (and your money). It is &ldquo;bad&rdquo; if you waited a couple of days and the financial representation has been delivered before your call. In this case it will be much harder to cancel the transaction and get your money back. The bank will have to start an investigation, which can take up to 45 days. Meanwhile that amount will still be on hold.</p>

<p>10. Debit card users cannot go to overdraft.</p>

<p>As explained in #4, the purchase authorization logic is not based on the account balance, but on the daily limits. And it works similarly for debit and credit cards. The bank can adjust the daily limit, slightly exceeding the account balance, even for debit cards.</p>

<p>Hope all this information will help you avoid some unpleasant surprises when using plastic cards.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MicroXP - a lightweight Windows XP]]></title>
    <link href="http://demin.ws/blog/english/2011/02/23/microxp/"/>
    <updated>2011-02-23T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2011/02/23/microxp/</id>
    <content type="html"><![CDATA[<p>The problem &ndash; a need to connect to a remote network via <a href="http://en.wikipedia.org/wiki/Remote_Desktop_Protocol">RDP</a>. To establish such connection, special software must be installed on a client workstation to create an encrypted tunnel between the workstation and the remote network. When that software is up and running, any application (telnet/ssh, ftp, radmin etc), including RDP client (mstsc.exe), might access to the remote network.</p>

<p>Not a problem when a client workstation runs Windows. You just go to a web site and logon, and then an ActiveX component gets started from the page, installs and runs everything required.</p>

<p>It becomes complicated if the workstation is not Windows. Indeed, there are RDP clients available for Linux and Mac, but it doesn&rsquo;t help much because without that encrypted channel it just doesn&rsquo;t have any meaning.</p>

<p>What do Linux and Mac users have to do? Install Windows in a virtual machine and run RDP in there. This is a good solution but with a drawback. A virtual machine hosting standard Windows usually takes a few gigabytes minimum and boots considerably slow.</p>

<p>I googled a bit and found <a href="http://www.google.co.uk/search?q=MicroXP-0.82.iso">MicroXP</a>. This is a very stripped-down version of XP SP3. The distribution ISO takes around ~100 MB, and when installed ~250. In VirtualBox on Mac Air the installation lasts five minutes and the already installed system boots in 10 seconds or less. The virtual machine requirements are minimal &ndash; a dynamic 300 MB disk and 64 MB of RAM.</p>

<p>After the installation of MicroXP you have to add Virtual Box Guest Additions (~200 KB) to share directories and not to struggle with the mouse, and then add a <a href="http://www.google.co.uk/search?q=RemoteDesktop-MicroXp-0.82.zip">RDP client</a> (it can be transferred to the VM via the shared folders).</p>

<p>In summary, if you need minimalistic and fast XP, MicroXP is a very good candidate.</p>

<p>P.S. Don&rsquo;t visit microxp.org. This is a fake to fish e-mails.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One-command NORCPU program hacking challenge: analysis and solutions (link)]]></title>
    <link href="http://demin.ws/blog/english/2011/02/16/norcpu-hacking-challenge-analisys-and-solutions-link/"/>
    <updated>2011-02-16T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2011/02/16/norcpu-hacking-challenge-analisys-and-solutions-link/</id>
    <content type="html"><![CDATA[<p>For some reason Google Reader wasn&rsquo;t able to index my last huge post - <a href="http://demin.ws/blog/english/2011/02/16/norcpu-hacking-challenge-analisys-and-solutions/">One-command NORCPU program hacking challenge: analysis and solutions</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One-command NORCPU program hacking challenge: analysis and solutions]]></title>
    <link href="http://demin.ws/blog/english/2011/02/16/norcpu-hacking-challenge-analisys-and-solutions/"/>
    <updated>2011-02-16T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2011/02/16/norcpu-hacking-challenge-analisys-and-solutions/</id>
    <content type="html"><![CDATA[<p>Publishing the <a href="http://demin.ws/blog/english/2011/02/08/norcpu-hackme-challenge/">announcement of the problem to hack</a> a program running on the CPU executing just one single command, I hoped to get a solution to the end of March, not earlier.</p>

<p>Note: Quoted materials below are provided &ldquo;as is&rdquo; in the original author edition. Only minor formatting changes are applied. Of course, the texts on Russian are translated to English.</p>

<p>But the reality was different. Literally a few hours after the announcement, I received an e-mail from <strong>Vasiliy Artemev</strong>.</p>

<blockquote>
<p>Secret code: 139471</p>
</blockquote>

<p>That was the correct answer. Vasiliy was a winner and received the 100$ prize. He kindly shared that he bruteforced the problem. In fact, a simple bruteforce attach forced the program printing out the magic message even on a 3-character attempt. Alas, my hash function used to check the password had many collisions and become a weak link.</p>

<p>But there was no complete analysis of the password checking algorithm, and Vasiliy offered to sponsor the rest of the challenge to figure out the algorithm with 50$ from his prize. The challenge kept going.</p>

<p>In meanwhile I wrote the <a href="http://demin.ws/projects/norcpu/challenge/norcpu2.html">second version of the problem</a> without hashing but just an encrypted password. I hoped this makes the analysis harder. But in the same day evening I received an e-mail from <strong>Anton Bukov</strong>:</p>

<blockquote>
<p>Answer for NORCPU hackme challenge, Version 2: &ldquo;R0und2 D0ne!&rdquo; ?</p>
</blockquote>

<p>It was the correct one. I wondered how is it possible to figure out so quickly?</p>

<p>Anton also shared his approach.</p>

<blockquote>
<p>My hack is based on the line:</p>
</blockquote>

<pre><code>mem = mem_0.slice(0);
</code></pre>

<blockquote>
<p>An array gets copied here, and if you call <code>calc()</code> function twice on the same array, then for any incorrect password it will print out the answer. In code it looked as:</p>
</blockquote>

<pre><code>wcout &lt;&lt; calc(L&quot;0&quot;) &lt;&lt; endl &lt;&lt; calc(L&quot;0&quot;) &lt;&lt; endl;
</code></pre>

<blockquote>
<p>I guess that copying was used to prevent it. I&rsquo;m afraid this is not the way you expected. Even I was surprised when got the answer in the output. Afterwards I figured out where it appeared from.</p>
</blockquote>

<p>Accidentally Anton discovered a bug causing the program itself to reveal the secret, again. It needed just to run the interpreter twice without resetting memory.</p>

<p>The root of the problem:</p>

<pre><code class="nasm">...
  IS_0(flag)
  JZ okay
  EXIT(1)
okay:
  ; print the secret
  ...
</code></pre>

<p>After the first wrong run and refusing to print out the secret the program has stopped at the line 4, the <code>ip</code> register points to the <code>okay</code> label. If the interpreter gets started again without resetting memory (all registers including <code>ip</code> reside in memory), it keeps executing right from the <code>okay</code> and prints out the secret.</p>

<p>It was a shame. I fixed the problem quickly and released the version 2.1 without this side effect.</p>

<p>A couple of days left.</p>

<p>I received an e-mail from a guy with <strong>a5b</strong> nickname.</p>

<blockquote>
<p>Hot-patch of branching and the answer pw: <code>abcd</code> resp: <code>R0und2 D0ne!</code></p>

<ul>
<li>the password, obviously, is incorrect</li>
<li>inverted data being written to <code>(i == 27692 i==31712)</code></li>
</ul>
</blockquote>

<p>Formally, this is the solution, but there is no password which means the algorithm is not analysed so far.</p>

<p>But after an hour I received an addendum:</p>

<pre><code>h1cKmE1fUsAn

input data:
chr conI LEET xor
CHR1 13417 13313 104 h
CHR2 39953 39968 49 1
CHR3 54302 54397 99 c
CHR4 32223 32148 75 K
CHR5 30900 30937 109 m
CHR6 27373 27304 69 E
CHR7 16420 16405 49 1
CHR8 49210 49244 102 f
CHR9 16740 16689 85 U
CHR10 50115 50096 115 s
CHR11 19308 19245 65 A
CHR12 57802 57764 110 n

static init:
CHRi 59609= 59651
CONi 59610= 59634
CNTR 59611=12
SUM 59608=0
LEET 59607 = 13313

1:
[59609]+1 -&gt; [59609] // select next chr
[59610]+1 -&gt; [59610] // select next con

SUM |= CHRi ^ LEET ^ CONi
LEET = LEET * 3 + 29

[59611]: if([59611] != 0) Loop 1

...
if(SUM != 0) exit
else print R0und2 D0ne // haven't analysed this part.
// Based on the code modifications (moving the index), it loads 12 constants:
// 29528 22899 2971 9089 27542 17353 52278 25635 11626 34909 39131 51838,
// deals with each one and prints out.
</code></pre>

<p>This is the solution now. <strong>a5b</strong> became the first one who sent the algorithm of the <a href="http://demin.ws/projects/norcpu/challenge/norcpu2.html">problem 2</a>.</p>

<p>In the same evening I received a solution from <strong>Max Filippov</strong>.</p>

<blockquote>
<p>Algorithm that was used to check password correctness in the first round was the following:</p>
</blockquote>

<pre><code class="cpp">bool check(const char *p)
{
   int v = 0x1040;

   for(; *p; ++p)
   {
       v ^= *p;
       for (int i = 0; i &lt; 8; ++i)
       {
           int f = v &amp; 1;
           v &gt;&gt;= 1;
           if (f)
               v ^= 0x1408;
       }
   }
   return v == 0x1c89;
}
</code></pre>

<blockquote>
<p>that is, sort of CRC.</p>

<p>To discover it I&rsquo;ve collected NORCPU execution trace and &ldquo;disassembled&rdquo; it.</p>

<p>Modified NORCPU source and disassembler are attached, and also may be found <a href="http://jcmvbkbc.spb.ru/git/?p=dumb/norcpu.git;a=summary">there</a>.</p>
</blockquote>

<p>And a little add-on:</p>

<blockquote>
<p>The method used is pretty straightforward:</p>

<ul>
<li>collect execution trace;</li>
<li>recognize instruction patterns and collapse sequences of primitive instructions to more complex ones;</li>
<li>analyze disassembled trace.</li>
</ul>

<p>So, first I needed trace: I copied javascript text into cpp source, fixed lingual differences and inserted the following printf:</p>
</blockquote>

<pre><code class="cpp">while (1) {
  int i = mem[ip];
  printf(&quot;%04x:NOR(%04x, %04x =&gt; %04x) &quot;, i, mem[i], mem[i + 1], mem[i + 2]);
  int a = mem[i + 0];
</code></pre>

<blockquote>
<p>so that I got a long line (about 8Mb) of primitive instruction execution trace.</p>

<p>Then I started constructing sed script that would make it readable.</p>

<p>First, it broke the trace linewise, one instruction per line (288323 lines, will read it in case of insomnia). I took a look at processed trace and recorded several obvious instruction patterns into sed. Then reran script, took next look, recorded more patterns, &hellip;</p>

<p>This way I figured out all boolean logic commands and jumps. Then rotations left. Each time new command got recognized, new filtered processed trace was suggesting next step, e.g. 15 ROTL equals ROTR etc.</p>

<p>Then I looked into <a href="http://demin.ws/blog/english/2010/04/06/modelling-a-cpu-with-only-one-operation/">your article</a>. And found addition pattern in disassembly. And recorded it in sed script.</p>

<p>After that I was able to just read the trace (which shrink to 1035 lines). Its inner loop fit into one page, I just made some notes on a scratchpad:</p>
</blockquote>

<pre><code>[f1ba]: current in-T index (i)
[f1b4]: LEN
[f1b5]: 8

0012-0035:[f1b9] ^= (T[i] &amp; 0xff)

006d-007b:[f1b8] = [f1b9] &amp; 1
008a-0158:[f1b9] &gt;&gt;= 1
0167-10c7:[f1aa] = [f1b8] + -1, [f1ab] = !carry
10ca-10e6:jmp on carry to 1145:110d

110d-111b:[f1b9] ^= 1408

1145-1f4f:--[f1b5]
20a5-3005:[f1aa] = [f1b5] + -1, f1ab = !carry
3008-3024:jmp on carry to 006d:304b

304b-304b:++i
3fab-3fab:--LEN
4f0b-5e8a:jmp on carry to 5eb1:6
</code></pre>

<blockquote>
<p>then I browsed through the repetitions of this inner loop and found the end of the outer loop.</p>
</blockquote>

<pre><code>5eb1-6e74:check 1c89
</code></pre>

<blockquote>
<p>Then just translated it into C. It all took me three evenings.</p>
</blockquote>

<p>Then Max Filippov sent the solution for the <a href="http://demin.ws/projects/norcpu/challenge/norcpu2.html">problem 2</a>.</p>

<blockquote>
<p>The second problem answer &ndash; <code>h1cKmE1fUsAn</code></p>

<p>The result &ndash; <code>R0und2 D0ne!</code></p>

<p>The password check algorithm is:</p>
</blockquote>

<pre><code class="cpp">bool check(const char *p)
{
   static const int xor_array[] = {
       0x3469,
       0x9c11,
       0xd41e,
       0x7ddf,
       0x78b4,
       0x6aed,
       0x4024,
       0xc03a,
       0x4164,
       0xc3c3,
       0x4b6c,
       0xe1ca,
   };

   int v = 0;
   int x = 0x3401;

   for (int i = 0; i &lt; 12; ++i)
   {
       int f = p[i] ^ x ^ xor_array[i];
       // printf(&quot;x: %04x, f: %04x\n&quot;, x, f);
       v |= f;
       x = (x * 3 + 0x1d) &amp; 0xffff;
   }
   return !v;
}
</code></pre>

<blockquote>
<p>The commented printf prints out the secret phrase on-the-fly.</p>

<p>The method of analysis &ndash; similar to the first problem &ndash; disassembling of the trace.</p>

<p>The first round was frankly more interestintg.</p>
</blockquote>

<p>And, finally, the last solution of the <a href="http://demin.ws/projects/norcpu/challenge/norcpu.html">first problem</a> is received from <strong>Salo Kril</strong>.</p>

<p>No comments &ndash; just sources.</p>

<pre><code class="cpp">// Password generation.

// Brute_force(3);

WORD ks_f(char *buff, int len)
{
   int i, j;
   WORD ks = 0x1040;

   for (i = 0; i &lt; len; i++)
   {
       ks ^= buff[i];
       for (j = 0; j &lt; 8; j++)
       {
           if((ks &amp; 1) == 0)
               ks = ks &gt;&gt; 1;
           else
               ks = (ks &gt;&gt; 1) ^ 0x1408;
       }
   }
   return ks;
}

void Brute_force(int n)
{
   int i;
   static char alphabet[] =
       &quot;\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F&quot;
       &quot;\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F&quot;
       &quot;\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F&quot;
       &quot;\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F&quot;
       &quot;\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F&quot;
       &quot;\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E&quot;;

   if(n == 0)
   {
       if(ks_f(buff_bf, BF_N) == 0x1c89)
           printf(&quot;%s\n&quot;,buff_bf);
       return;
   }

   n--;
   for (i = 0; alphabet[i]; i++)
   {
       buff_bf[n] = alphabet[i];
       Brute_force(n);
   }
}
</code></pre>

<p>and re-constructed code:</p>

<pre><code class="cpp">#define DEST_COUNT  0xF1FE
extern WORD mem[];

/*
    Secret code: 139471
*/
void reconstructed_fn(void)
{
    int i, j;
    WORD src, dest, key, count, hash, hash_OK, key_const;

    src = mem[0xF1BA];     // input string
    count = mem[0xF1ED];   // input string length
    dest = mem[0xF1BB];    // 0xf1ff
    hash_OK = mem[0xF1BC]; // 0x1c89
    hash = mem[0xF1B9];    // 0x1040


    for(i = 0; i &lt; count; i++)
    {
        hash ^= mem[src + i] &amp; 0xFF;

        for (j = 0; j &lt; 8; j++)
        {
            if ((hash &amp; 1) == 0)
                hash = hash &gt;&gt; 1;
            else
                hash = (hash &gt;&gt; 1) ^ 0x1408;
        }
    }

    if (hash == hash_OK)
    {
        src = mem[0x6EB6];              // &quot;Secret code: 139471&quot;
        count = mem[0xF1C7];            // 19
        key = ((hash &gt;&gt; 8) ^ hash) + 1;
        key_const = mem[0x6EA8];        // 11
    }
    else
    {
        src = mem[0x5EBE];          // &quot;Wrong password!&quot;
        count = mem[0xF1DC];        // 15
        key = mem[0xF1BD];
        key_const = mem[0xF1BE];    // 17
    }

    mem[DEST_COUNT] = count;
    for (i = 0; i &lt; count; i++)
    {
        mem[dest + i] = mem[src + i] ^ key;
        key = key * 3 + key_const;
    }
}

/*
--------------------------------------------------------------------------------------------
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--------------------------------------------------------------------------------------------
*/
WORD and(WORD w1, WORD w2)
{
    return w1 &amp; w2;
}

WORD or(WORD w1, WORD w2)
{
    return w1 | w2;
}

WORD xor(WORD w1, WORD w2)
{
    return w1 ^ w2;
}

WORD rol(WORD w1, WORD n)
{
    return (w1 &lt;&lt; n) | (w1 &gt;&gt; (16 - n));
}

WORD ror(WORD w1, WORD n)
{
    return (w1 &gt;&gt; n) | (w1 &lt;&lt; (16 - n));
}
WORD extend_16(WORD k1)
{
    int i, k2;

    for (i = 0, k2 = 0; i &lt; 16; i++)
    {
        k2 = or(k2, k1);
        k1 = rol(k1, 1);
    }

    return k2;
}

WORD add(WORD *kk1, WORD a, WORD b)
{
    WORD mask_bit, aa0, aa1, tmp1, i, k1, k2;
    k1 = 0;
    k2 = 0;
    mask_bit = 1;

    for (i = 0; i &lt; 16; i++)
    {
        k1 = and(k1, mask_bit);
        aa0 = xor(a, b);
        tmp1 = xor(aa0, k1);
        tmp1 = and(tmp1, mask_bit);
        k2 = or(tmp1, k2);
        aa1 = and(a, b);
        aa0 = and(k1, aa0);
        k1 = or(aa1, aa0);
        k1 = rol(k1, 1);
        mask_bit = rol(mask_bit, 1);
    }
    k1 = and(k1, mask_bit);
    *kk1 = extend_16(k1);

    return k2;
}

void reconstr(void)
{
    WORD k1, k2, src, dest, tmp1, key, count, tmp2, tmp3, i, ks, ks_OK, key_a;
    WORD mask_bit, aa1, aa0;

    k1 = mem[0xF1AF];    // 0x88
    k2 = mem[0xF1A3];    // 0x47
    src = mem[0xF1BA];   // input string
    count = mem[0xF1ED]; // input string length
    dest = mem[0xF1BB];  // 0xf1ff
    ks_OK = mem[0xF1BC]; // 0x1c89             &quot;w&quot;:ks=0x0ACC   &quot;WWW&quot;:0x0FCE   &quot;123456789&quot;:ks=0x05E3
    ks = mem[0xF1B9];    // 0x1040


l_0006:
    ks = xor(ks, and(mem[src], 0xFF));
    i = 8;

l_006D:
    tmp3 = and(ks, 1);
    ks = ror(ks, 1);
    ks = and(ks, 0x7FFF);
    tmp2 = add(&amp;k2, tmp3, -1);
    if(k2 != 0)
    {
        ks = xor(ks, 0x1408);
    }

l_1145:
    i = add(&amp;k1, i, -1);
    tmp2 = add(&amp;k2, i, -1);
    if(k2 != 0)
        goto l_006D;

l_304B:
    src = add(&amp;k1, src, 1);
    count = add(&amp;k1, count, -1);
    tmp2 = add(&amp;k2, count, -1);
    if(k2 != 0)
        goto l_0006;


    src = mem[0x5EBE];    // Wrong password!
    count = mem[0xF1DC];  // 15
    key = mem[0xF1BD];
    key_a = mem[0xF1BE];
    ks_OK = xor(ks_OK, ks);
    tmp2 = add(&amp;k2, ks_OK, -1);

    if(k2 != 0)
        goto l_8552;

l_6E9B:
    src = mem[0x6EB6];     // Secret code: 139471
    count = mem[0xF1C7];   // 19
    key = ks;
    key_a = mem[0x6EA8];

    key = ror(key, 8);
    key = and(key, 0xFF);
    key = xor(ks, key);
    key = and(key, 0x7FFF);
    key = add(&amp;k1, key, 1);


l_8552:
    mem[DEST_COUNT] = count;
l_8558:
    mem[dest] = xor(mem[src], key);
    tmp3 = add(&amp;k1, key, key);
    key = add(&amp;k1, key, tmp3);
    key = add(&amp;k1, key, key_a);
    src = add(&amp;k1, src, 1);
    dest = add(&amp;k1, dest, 1);
    count = add(&amp;k1, count, -1);
    tmp2 = add(&amp;k2, count, -1);
    if(k2 != 0)
        goto l_8558;

l_F186:
    mem[0xF1B2] = mem[0xF193]; // nc
}
</code></pre>

<p>Well, as you understand the solutions have been fully comprehensive.</p>

<p>Thanks to all participants.</p>

<p>I&rsquo;m putting the original sources below. Just run the Python script to compile the code written on the function-macros, to run through and to generate an html-page (&ldquo;template.html&rdquo; is required).</p>

<p>All the sources are available on as a git <a href="https://github.com/begoon/norcpu/">repository</a>.</p>

<h2>Problem 1</h2>

<p>File <a href="https://github.com/begoon/norcpu/blob/master/v1/norcpu.py">norcpu.py</a> (<a href="https://github.com/begoon/norcpu/blob/master/v1/template.html">template.html</a>):</p>

<pre><code class="python">import sys, re, time, string, binascii

verbose = False
verbose_cpu = False
scramble = True

test_wrong_crc = 0

secret_code = &quot;Secret code: 139471&quot;
password = &quot;h0cKmE1fUsAn&quot;
guess    = &quot;123456789012&quot;
guess    = password

# Secret code message encryption mask.
secret_coef_add = 17

message_text = &quot;Wrong password!&quot;
# Wrong password message encryption mask.
message_mask = 0x6301
message_coef_add = 11

# Non-standard CRC initial value (should be 0xFFFF).
crc16_initial_value = 0x1040

# Non-standard CRC constant (should be 0x8401).
crc16_constant = 0x1408

code_segment = []
data_segment = []

label_count = 0

def dump(data, length = 8):
  result = []
  for i in xrange(0, len(data), length):
    line = data[i:i + length]
    hex_line = ' '.join([&quot;%04X&quot; % x for x in line])
    result.append(&quot;%04X: %-*s\n&quot; % (i, length*5, hex_line))
  return ''.join(result)

def dump_js(data, length = 8):
  result = []
  for i in xrange(0, len(data), length):
    line = data[i:i + length]
    hex_line = ' '.join([&quot;0x%04X,&quot; % x for x in line])
    result.append(&quot;%-*s\n&quot; % (length*5, hex_line))
  return ''.join(result)

def calc_crc16(data):
  global crc16_initial_value
  global crc16_constant

  crc16 = crc16_initial_value
  for i in range(0, len(data)):
    ch = ord(data[i]) &amp; 0xff
    crc16 = crc16 ^ ch
    for j in range(0, 8):
      if ((crc16 &amp; 1) != 0):
        crc16 = (crc16 &gt;&gt; 1) ^ crc16_constant
      else:
        crc16 = crc16 &gt;&gt; 1
  return crc16

crc16 = calc_crc16(password)

def encode_string(data, name, mask, coef_add):
  global mem, names
  offset = names[name]
  offset_sz = names[name + &quot;_sz&quot;]
  for i in range(0, len(data)):
    mem[offset + i] = ord(data[i]) ^ mask
    mask = (mask * 3 + coef_add) &amp; 0xffff
  mem[offset_sz] = len(data)

def put_string(data, name):
  global mem, names
  offset = names[name]
  offset_sz = names[name + &quot;_sz&quot;]
  for i in range(0, len(data)):
    mem[offset + i] = ord(data[i])
  mem[offset_sz] = len(data)

def save_mem(name, size = -1):
  f = open(name, &quot;w&quot;)
  if size == -1: size = len(mem)
  for i in (mem[0:size]):
    hex = &quot;%04X&quot; % i
    bin = binascii.a2b_hex(hex)
    f.write(bin)
  f.close()

def next_label():
  global label_count
  label_count = label_count + 1
  return &quot;label_%04d&quot; % label_count

def code_rem(comment):
  code_segment.append('; ' + comment)

def data_rem(comment):
  data_segment.append('; ' + comment)

def data_label(name):
  data_segment.append(name + &quot;:&quot;)

def code_label(name):
  code_segment.append(name + &quot;:&quot;)

def code(value):
  printed = value
  if type(value).__name__ == 'int':
    printed = &quot;%d&quot; % value
  code_segment.append(&quot;  dw %s&quot; % printed)

scramble_counter = 0x27

def next_scramble_counter():
  global scramble_counter
  scramble_counter = scramble_counter * 3 + 7
  return scramble_counter &amp; 0xff

def word(value):
  if value == -1:
    if scramble:
      value = next_scramble_counter()
    else:
      value = 0
  printed = value
  if type(value).__name__ == 'int':
    printed = &quot;%d&quot; % value
  data_segment.append(&quot;  dw %s&quot; % printed)

def buffer(length, value = -1):
  for i in range(0, length):
    word(value)

def var(name, value = -1):
  data_label(name);
  word(value);

def NOR(a, b, r):
  code_rem('NOR ' + str(a) + ' ' + str(b) + ' ' + str(r))
  code(a)
  code(b)
  code(r)

def NOT(a, r):
  NOR(a, a, r);

def OR(a, b, r):
  NOR(a, b, &quot;or_reg&quot;)
  NOT(&quot;or_reg&quot;, r)
var(&quot;or_reg&quot;)

def AND(a, b, r):
  NOT(a, &quot;and_reg_a&quot;)
  NOT(b, &quot;and_reg_b&quot;)
  OR(&quot;and_reg_a&quot;, &quot;and_reg_b&quot;, &quot;and_reg_a&quot;)
  NOT(&quot;and_reg_a&quot;, r)
var(&quot;and_reg_a&quot;)
var(&quot;and_reg_b&quot;)

def ANDi(a, imm, r):
  MOVi(imm, &quot;and_i_reg&quot;)
  AND(a, &quot;and_i_reg&quot;, r)
var(&quot;and_i_reg&quot;)

def XOR(a, b, r):
  NOT(a, &quot;xor_reg_a&quot;)
  NOT(b, &quot;xor_reg_b&quot;)
  AND(a, &quot;xor_reg_b&quot;, &quot;xor_reg_b&quot;)
  AND(b, &quot;xor_reg_a&quot;, &quot;xor_reg_a&quot;)
  OR(&quot;xor_reg_a&quot;, &quot;xor_reg_b&quot;, r)
var(&quot;xor_reg_a&quot;)
var(&quot;xor_reg_b&quot;)

def XORi(a, imm, r):
  MOVi(imm, &quot;xor_i_reg&quot;)
  XOR(a, &quot;xor_i_reg&quot;, r)
var(&quot;xor_i_reg&quot;)

def MOV(a, b):
  code_rem('MOV ' + str(a) + ' ' + str(b))
  NOT(a, &quot;move_reg&quot;)
  NOT(&quot;move_reg&quot;, b)
  code_rem('MOV END')
var(&quot;move_reg&quot;)

def JMP(a):
  code_rem('JMP ' + str(a))
  MOV(a, &quot;ip&quot;)

def JMPi(a):
  code_rem('JMPi ' + str(a))
  label = next_label()
  JMP(label)
  code_label(label)
  code(a)

def MOVi(imm, a):
  code_rem('MOVi #' + str(imm) + ' ' + str(a))
  label_data = next_label()
  label_jump = next_label()
  MOV(label_data, a)
  JMPi(label_jump)
  code_label(label_data)
  code(imm)
  code_label(label_jump)

# [a] -&gt; b
def PEEK(a, b):
  label1 = next_label()
  label2 = next_label()
  MOV(a, label1)
  MOV(a, label2)
  code_label(label1)  # NOT(0, 0, move_reg)
  code(0)             # &lt;- a
  code_label(label2)  #
  code(0)             # &lt;- a
  code(&quot;move_reg&quot;)    #
  NOT(&quot;move_reg&quot;, b)

# a -&gt; [b]
def POKE(a, b):
  code_rem('POKE ' + str(a) + ' [' + str(b) + ']')
  label = next_label()
  MOV(b, label)
  NOT(a, &quot;move_reg&quot;)  # +3 (three operations)
  code(&quot;move_reg&quot;)    # +4
  code(&quot;move_reg&quot;)    # +5
  code_label(label)
  code(0)             # &lt;- b

# imm -&gt; [a]
def POKEi(imm, a):
  MOVi(imm, &quot;poke_i_reg&quot;)
  POKE(&quot;poke_i_reg&quot;, a)
var(&quot;poke_i_reg&quot;)

def EXIT(a):
  MOV(a, &quot;exit_reg&quot;)

def EXITi(a):
  MOVi(a, &quot;exit_reg&quot;)

def FADD(mask, carry, a, b, r):
  AND(a, mask, &quot;fadd_reg_a&quot;)  # zero bits in 'a' except mask'ed
  AND(b, mask, &quot;fadd_reg_b&quot;)  # zero bits in 'b' except mask'ed
  AND(carry, mask, carry)     # zero bits in 'carry' except mask'ed

  # SUM = (a ^ b) ^ carry
  XOR(a, b, &quot;fadd_reg_t1&quot;)
  XOR(&quot;fadd_reg_t1&quot;, carry, &quot;fadd_reg_bit_r&quot;)

  # Leave only 'mask'ed bit in bit_r.
  AND(&quot;fadd_reg_bit_r&quot;, mask, &quot;fadd_reg_bit_r&quot;)

  # Add current added bit to the result.
  OR(&quot;fadd_reg_bit_r&quot;, r, r)

  # CARRY = (a &amp; b) | (carry &amp; (a ^ b))
  AND(a, b, &quot;fadd_reg_t2&quot;)
  AND(carry, &quot;fadd_reg_t1&quot;, &quot;fadd_reg_t1&quot;)

  # CARRY is calculated, and 'shift_reg' contains the same value
  # but shifted the left by 1 bit.
  OR(&quot;fadd_reg_t2&quot;, &quot;fadd_reg_t1&quot;, carry)

  # CARRY is shifted the left by 1 bit to be used on the next round.
  MOV(&quot;shift_reg&quot;, carry)

  # shift_reg = mask &lt;&lt; 1
  MOV(mask, mask)
  # mask = shift (effectively &quot;mask = mask &lt;&lt; 1&quot;)
  MOV(&quot;shift_reg&quot;, mask)

  AND(carry, mask, carry)

var(&quot;fadd_reg_a&quot;)
var(&quot;fadd_reg_b&quot;)
var(&quot;fadd_reg_bit_r&quot;)
var(&quot;fadd_reg_t1&quot;)
var(&quot;fadd_reg_t2&quot;)

def ZERO(a):
  XOR(a, a, a)

def FADC(a, b, r):
  ZERO(&quot;fadc_reg_t&quot;)
  MOV(&quot;const_1&quot;, &quot;fadc_reg_mask&quot;)
  for i in range(0, 16):
    FADD(&quot;fadc_reg_mask&quot;, &quot;carry_reg&quot;, a, b, &quot;fadc_reg_t&quot;)
  MOV(&quot;fadc_reg_t&quot;, r)

  ZERO(&quot;fadc_reg_t&quot;)

  for i in range(0, 16):
    OR(&quot;fadc_reg_t&quot;, &quot;carry_reg&quot;, &quot;fadc_reg_t&quot;)
    MOV(&quot;carry_reg&quot;, &quot;carry_reg&quot;)
    MOV(&quot;shift_reg&quot;, &quot;carry_reg&quot;)

  MOV(&quot;fadc_reg_t&quot;, &quot;carry_reg&quot;)

var(&quot;fadc_reg_mask&quot;)
var(&quot;fadc_reg_t&quot;)

def ADD(a, b, r):
  ZERO(&quot;carry_reg&quot;)
  FADC(a, b, r)

def ADDi(a, imm, r):
  MOVi(imm, &quot;add_i_reg&quot;)
  ADD(a, &quot;add_i_reg&quot;, r)
var(&quot;add_i_reg&quot;)

def PUSH(a):
  ADD(&quot;stack_reg&quot;, &quot;const_minus_1&quot;, &quot;stack_reg&quot;)
  POKE(a, &quot;stack_reg&quot;)

def PUSHi(imm):
  MOVi(imm, &quot;push_i_reg&quot;)
  PUSH(&quot;push_i_reg&quot;)
var(&quot;push_i_reg&quot;)

def POP(a):
  PEEK(&quot;stack_reg&quot;, a)
  ADD(&quot;stack_reg&quot;, &quot;const_1&quot;, &quot;stack_reg&quot;)

def CALL(a):
  label = next_label()
  PUSHi(label)
  JMP(a)
  code_label(label)

def CALLi(a):
  label = next_label()
  PUSHi(label)
  JMPi(a)
  code_label(label)

def RET():
  POP(&quot;ip&quot;)

# Jump 'a', if cond = FFFF, and 'b' if conf = 0000
def BRANCH(a, b, cond):
  AND(a, cond, &quot;branch_reg_a&quot;)              # reg_a = a &amp; cond
  NOT(cond, &quot;branch_reg_b&quot;)                 # reg_b = !cond
  AND(b, &quot;branch_reg_b&quot;, &quot;branch_reg_b&quot;)    # reg_b = b &amp; reg_b = b &amp; !cond
  OR(&quot;branch_reg_a&quot;, &quot;branch_reg_b&quot;, &quot;ip&quot;)  # ip = (a &amp; cond) | (b &amp; !cond)
var(&quot;branch_reg_a&quot;)
var(&quot;branch_reg_b&quot;)

# Jump 'a', if cond = FFFF, and 'b' if conf = 0000
def BRANCHi(a, b, cond):
  MOVi(a, &quot;branch_i_reg_a&quot;)
  MOVi(b, &quot;branch_i_reg_b&quot;)
  BRANCH(&quot;branch_i_reg_a&quot;, &quot;branch_i_reg_b&quot;, cond)
var(&quot;branch_i_reg_a&quot;)
var(&quot;branch_i_reg_b&quot;)

# if a != 0 -&gt; carry = FFFF else carry = 0000
def IS_0(a):
  ZERO(&quot;carry_reg&quot;)
  FADC(a, &quot;const_minus_1&quot;, &quot;is_0_reg&quot;)
  NOT(&quot;carry_reg&quot;, &quot;zero_reg&quot;)
var(&quot;is_0_reg&quot;)
var(&quot;zero_reg&quot;)

# ip = (zero_reg == FFFF ? a : ip)
def JZi(a):
  label = next_label()
  BRANCHi(a, label, &quot;zero_reg&quot;)
  code_label(label)

# ip = (zero_reg == FFFF ? a : ip)
def JNZi(a):
  label = next_label()
  BRANCHi(label, a, &quot;zero_reg&quot;)
  code_label(label)

def ROL(a, b):
  MOV(a, a)            # shift_reg = a &lt;&lt; 1
  MOV(&quot;shift_reg&quot;, b)

def ROR(a, b):
  MOV(a, &quot;ror_reg&quot;)
  for i in range(0, 15):
    ROL(&quot;ror_reg&quot;, &quot;ror_reg&quot;)
  MOV(&quot;ror_reg&quot;, b)
var(&quot;ror_reg&quot;)

def SHL(a, b):
  ROL(a, b)
  ANDi(b, 0x0001, b)

def SHR(a, b):
  ROR(a, b)
  ANDi(b, 0x7FFF, b)

# NORCPU code

var(&quot;ip&quot;, &quot;start&quot;)
var(&quot;shift_reg&quot;)
var(&quot;carry_reg&quot;)
var(&quot;const_1&quot;, 1)
var(&quot;const_minus_1&quot;, 0xFFFF)
var(&quot;exit_reg&quot;)

var(&quot;stack_reg&quot;, &quot;stack&quot;)

code_label(&quot;start&quot;)

var(&quot;i&quot;)
var(&quot;j&quot;)
var(&quot;ch&quot;)
var(&quot;mask&quot;)
var(&quot;t&quot;)

var(&quot;crc16&quot;, crc16_initial_value)

var(&quot;ptr&quot;, &quot;password&quot;)
MOV(&quot;password_sz&quot;, &quot;i&quot;)

crc_loop = next_label()
code_label(crc_loop)          # crc_loop
# ch = *ptr
PEEK(&quot;ptr&quot;, &quot;ch&quot;)
# ch &amp;= 0xFF
ANDi(&quot;ch&quot;, 0xFF, &quot;ch&quot;)
# crc16 ^= ch
XOR(&quot;crc16&quot;, &quot;ch&quot;, &quot;crc16&quot;)

MOVi(8, &quot;j&quot;)
crc_loop_j = next_label()
code_label(crc_loop_j)        # crc_loop_j

# t = crc16 &amp; 1
ANDi(&quot;crc16&quot;, 1, &quot;t&quot;)
# crc16 &gt;&gt;= 1
SHR(&quot;crc16&quot;, &quot;crc16&quot;)
IS_0(&quot;t&quot;)
crc_loop_1 = next_label()
JZi(crc_loop_1)
# crc16 ^= crc16_constant
XORi(&quot;crc16&quot;, crc16_constant, &quot;crc16&quot;)
code_label(crc_loop_1)        # crc_loop_1

ADD(&quot;j&quot;, &quot;const_minus_1&quot;, &quot;j&quot;)
IS_0(&quot;j&quot;)
JNZi(crc_loop_j)

# ptr += 1
ADD(&quot;ptr&quot;, &quot;const_1&quot;, &quot;ptr&quot;)
# i = i - 1
ADD(&quot;i&quot;, &quot;const_minus_1&quot;, &quot;i&quot;)
IS_0(&quot;i&quot;)
JNZi(crc_loop)

var(&quot;ptr2&quot;, &quot;result&quot;)

correct_crc = crc16 + test_wrong_crc

var(&quot;correct_crc&quot;, correct_crc)

# By default we're going to decrypt 'Wrong...' message.
MOVi(&quot;message&quot;, &quot;ptr&quot;)
MOV(&quot;message_sz&quot;, &quot;i&quot;)

var(&quot;message_mask&quot;, message_mask)
MOV(&quot;message_mask&quot;, &quot;mask&quot;)

var(&quot;coef_add&quot;, message_coef_add)

wrong_label = next_label()

XOR(&quot;correct_crc&quot;, &quot;crc16&quot;, &quot;correct_crc&quot;)
IS_0(&quot;correct_crc&quot;)
JNZi(wrong_label)

# Now we switch to descrypt the secret message.
MOVi(secret_coef_add, &quot;coef_add&quot;)

MOVi(&quot;secret&quot;, &quot;ptr&quot;)
MOV(&quot;secret_sz&quot;, &quot;i&quot;)

# mask = ((crc16 &amp; 0xff) | ((crc16 &gt;&gt; 8) &amp; 0xff)) + 1
MOV(&quot;crc16&quot;, &quot;mask&quot;)
for i in range(0, 8):
  SHR(&quot;mask&quot;, &quot;mask&quot;)
XOR(&quot;crc16&quot;, &quot;mask&quot;, &quot;mask&quot;)
ANDi(&quot;mask&quot;, 0xff, &quot;mask&quot;)

ADD(&quot;mask&quot;, &quot;const_1&quot;, &quot;mask&quot;)

code_label(wrong_label)

MOV(&quot;i&quot;, &quot;result_sz&quot;)

loop = next_label()
code_label(loop)              # loop
# ch = *ptr
PEEK(&quot;ptr&quot;, &quot;ch&quot;)
# ch ^= mask
XOR(&quot;ch&quot;, &quot;mask&quot;, &quot;ch&quot;)
POKE(&quot;ch&quot;, &quot;ptr2&quot;)
# mask = mask * 3 + 11
ADD(&quot;mask&quot;, &quot;mask&quot;, &quot;t&quot;)
ADD(&quot;mask&quot;, &quot;t&quot;, &quot;mask&quot;)
ADD(&quot;mask&quot;, &quot;coef_add&quot;, &quot;mask&quot;)
# ptr += 1
ADD(&quot;ptr&quot;, &quot;const_1&quot;, &quot;ptr&quot;)
# ptr2 += 1
ADD(&quot;ptr2&quot;, &quot;const_1&quot;, &quot;ptr2&quot;)
# i = i - 1
ADD(&quot;i&quot;, &quot;const_minus_1&quot;, &quot;i&quot;)
IS_0(&quot;i&quot;)
JNZi(loop)

EXITi(0x00)

buffer(8)
data_label(&quot;stack&quot;)

var(&quot;secret_sz&quot;, len(secret_code))
data_label(&quot;secret&quot;)
buffer(len(secret_code) + 1)

var(&quot;message_sz&quot;)
data_label(&quot;message&quot;)
buffer(16)

var(&quot;password_sz&quot;)
data_label(&quot;password&quot;)
buffer(16)

# The buffer holding the result string.
var(&quot;result_sz&quot;)
data_label(&quot;result&quot;)
buffer(32)

# Compiler

text = code_segment
text.extend(data_segment)

if verbose:
  print &quot;\n&quot;.join(text)

# Phase 1. Calculate names.

addr = 0
names = {}
for line in text:
  if line[0] == ';': continue
  if line[0] != ' ':
    name = line.partition(':')[0]
    names[name] = addr
  else:
    addr = addr + 1

if verbose:
  print names

raw_text = &quot;\n&quot;.join(text)

# Resolve names.

for name in names:
  if verbose:
    print name, names[name], type(names[name])
  name_re = re.compile(r'dw ' + name + '$', re.M)
  value = &quot;%d&quot; % names[name]
  raw_text = name_re.sub('dw ' + value, raw_text)

text = raw_text.split(&quot;\n&quot;)

if verbose:
  print &quot;\n&quot;.join(text)

# Phase 2. Compilation.

addr = 0
comment = &quot;&quot;
mem = []
for line in text:
  if line[0] == ';' or line[0] != ' ':
    comment = comment + line + ' '
  else:
    value = int(line.strip().partition(&quot; &quot;)[2])
    if verbose:
      print &quot;%04X: %04X ; %s&quot; % (addr, value, comment)
    mem.append(value)
    addr = addr + 1
    comment = &quot;&quot;

# Interpretation

ip = names[&quot;ip&quot;]
exit_reg = names[&quot;exit_reg&quot;]
shift_reg = names[&quot;shift_reg&quot;]
carry_reg = names[&quot;carry_reg&quot;]

def nor(a, b):
  r = a | b
  r = r ^ 0xFFFF
  return r &amp; 0xFFFF

def norcpu():
  while 1:
    i = mem[ip];
    a = mem[i + 0]
    b = mem[i + 1]
    r = mem[i + 2]
    mem[ip] = i + 3
    f = nor(mem[a], mem[b])
    mem[r] = f
    mem[shift_reg] = ((f &gt;&gt; 15) &amp; 1) | ((f &amp; 0x7FFF) &lt;&lt; 1)

    if verbose_cpu:
      print &quot;%04X: %04X [%04X] %04X [%04X] -&gt; %04X [%04X]&quot; % \
            (i, a, mem[a], b, mem[b], r, mem[r])
    if r == exit_reg:
      break

print &quot;Starting from [%04X]&quot; % mem[ip]

# Encrypt the secret code.
secret_mask = ((crc16 &amp; 0xff) ^ ((crc16 &gt;&gt; 8) &amp; 0xff)) + 1
encode_string(secret_code, &quot;secret&quot;, secret_mask, secret_coef_add);

# Encrypt 'Wrong...' message.
encode_string(message_text, &quot;message&quot;, message_mask, message_coef_add);

mem_js = dump_js(mem)
save_mem(&quot;norcpu-1-before.bin&quot;)
mem_sz = len(mem)

if len(mem) &gt;= 0x10000:
  print &quot;Too much code (%08X, %04X)&quot; % (len(mem), len(mem) - 0x10000)
  sys.exit()

# Inject plain password in the last moment (for testing).
put_string(guess, &quot;password&quot;)

save_mem(&quot;norcpu-2-before-with-password.bin&quot;)

if verbose:
  print &quot;Original memory:&quot;
  print dump(mem)

start_time = time.time()

norcpu()

end_time = time.time()

save_mem(&quot;norcpu-3-after.bin&quot;, mem_sz)

if verbose:
  print &quot;Memory after:&quot;
  dump(mem)

print
print &quot;Size: %X&quot; % len(mem)
print &quot;Time: %d&quot; % (end_time - start_time)
print &quot;Exit: %04X&quot; % mem[exit_reg]

print(&quot;CRC : %04X (%04X)&quot; % (crc16, correct_crc))

result = names[&quot;result&quot;]
result_value = &quot;&quot;
for i in range(0, mem[names[&quot;result_sz&quot;]]):
  result_value = result_value + chr(mem[result + i] &amp; 0xff)

if result_value != secret_code:
  print &quot;ERROR: [%s] != [%s]&quot; % (secret_code, result_value)

js = string.Template(open('template.html', 'r').read())

js = js.substitute( \
  ip = names[&quot;ip&quot;],
  exit_reg = names[&quot;exit_reg&quot;],
  shift_reg = names[&quot;shift_reg&quot;],
  password = names[&quot;password&quot;],
  password_sz = names[&quot;password_sz&quot;],
  result = names[&quot;result&quot;],
  result_sz = names[&quot;result_sz&quot;],
  mem_js = mem_js
)

f = open(&quot;norcpu.html&quot;, &quot;w&quot;)
f.write(js)
f.close()
</code></pre>

<h2>Problem 2</h2>

<p>File <a href="https://github.com/begoon/norcpu/blob/master/v2/norcpu.py">norcpu.py</a> (<a href="https://github.com/begoon/norcpu/blob/master/v2/template.html">template.html</a>):</p>

<pre><code class="cpp">import sys, re, time, string, binascii

verbose = False
verbose_cpu = False
scramble = True

secret_password = &quot;h1cKmE1fUsAn&quot;
secret_password_xor_mask = 0x3401
secret_password_add = 29

secret_code = &quot;R0und2 D0ne!&quot;
secret_code_xor_mask = 0x730A
secret_code_add = 37

guess = &quot;123456789012&quot;
guess = secret_password

code_segment = []
data_segment = []

label_count = 0

def dump(data, length = 8):
  result = []
  for i in xrange(0, len(data), length):
    line = data[i:i + length]
    hex_line = ' '.join([&quot;%04X&quot; % x for x in line])
    result.append(&quot;%04X: %-*s\n&quot; % (i, length*5, hex_line))
  return ''.join(result)

def dump_js(data, length = 8):
  result = []
  for i in xrange(0, len(data), length):
    line = data[i:i + length]
    hex_line = ' '.join([&quot;0x%04X,&quot; % x for x in line])
    result.append(&quot;%-*s\n&quot; % (length*5, hex_line))
  return ''.join(result)

def encode_string(data, name, mask, coef_add):
  global mem, names
  offset = names[name]
  offset_sz = names[name + &quot;_sz&quot;]
  for i in range(0, len(data)):
    mem[offset + i] = ord(data[i]) ^ mask
    mask = (mask * 3 + coef_add) &amp; 0xffff
  mem[offset_sz] = len(data)

def put_string(data, name):
  global mem, names
  offset = names[name]
  offset_sz = names[name + &quot;_sz&quot;]
  for i in range(0, len(data)):
    mem[offset + i] = ord(data[i])
  mem[offset_sz] = len(data)

def save_mem(name, size = -1):
  f = open(name, &quot;w&quot;)
  if size == -1: size = len(mem)
  for i in (mem[0:size]):
    hex = &quot;%04X&quot; % i
    bin = binascii.a2b_hex(hex)
    f.write(bin)
  f.close()

def next_label():
  global label_count
  label_count = label_count + 1
  return &quot;label_%04d&quot; % label_count

def code_rem(comment):
  code_segment.append('; ' + comment)

def data_rem(comment):
  data_segment.append('; ' + comment)

def data_label(name):
  data_segment.append(name + &quot;:&quot;)

def code_label(name):
  code_segment.append(name + &quot;:&quot;)

def code(value):
  printed = value
  if type(value).__name__ == 'int':
    printed = &quot;%d&quot; % value
  code_segment.append(&quot;  dw %s&quot; % printed)

scramble_counter = 0x2743

def next_scramble_counter():
  global scramble_counter
  scramble_counter = scramble_counter * 3 + 7
  return scramble_counter &amp; 0xffff

def word(value):
  if value == -1:
    if scramble:
      value = next_scramble_counter()
    else:
      value = 0
  printed = value
  if type(value).__name__ == 'int':
    printed = &quot;%d&quot; % value
  data_segment.append(&quot;  dw %s&quot; % printed)

def buffer(length, value = -1):
  for i in range(0, length):
    word(value)

def var(name, value = -1):
  data_label(name);
  word(value);

# Macros

def NOR(a, b, r):
  code_rem('NOR ' + str(a) + ' ' + str(b) + ' ' + str(r))
  code(a)
  code(b)
  code(r)

def NOT(a, r):
  NOR(a, a, r);

def OR(a, b, r):
  NOR(a, b, &quot;or_reg&quot;)
  NOT(&quot;or_reg&quot;, r)
var(&quot;or_reg&quot;)

def AND(a, b, r):
  NOT(a, &quot;and_reg_a&quot;)
  NOT(b, &quot;and_reg_b&quot;)
  OR(&quot;and_reg_a&quot;, &quot;and_reg_b&quot;, &quot;and_reg_a&quot;)
  NOT(&quot;and_reg_a&quot;, r)
var(&quot;and_reg_a&quot;)
var(&quot;and_reg_b&quot;)

def ANDi(a, imm, r):
  MOVi(imm, &quot;and_i_reg&quot;)
  AND(a, &quot;and_i_reg&quot;, r)
var(&quot;and_i_reg&quot;)

def XOR(a, b, r):
  NOT(a, &quot;xor_reg_a&quot;)
  NOT(b, &quot;xor_reg_b&quot;)
  AND(a, &quot;xor_reg_b&quot;, &quot;xor_reg_b&quot;)
  AND(b, &quot;xor_reg_a&quot;, &quot;xor_reg_a&quot;)
  OR(&quot;xor_reg_a&quot;, &quot;xor_reg_b&quot;, r)
var(&quot;xor_reg_a&quot;)
var(&quot;xor_reg_b&quot;)

def XORi(a, imm, r):
  MOVi(imm, &quot;xor_i_reg&quot;)
  XOR(a, &quot;xor_i_reg&quot;, r)
var(&quot;xor_i_reg&quot;)

def MOV(a, b):
  code_rem('MOV ' + str(a) + ' ' + str(b))
  NOT(a, &quot;move_reg&quot;)
  NOT(&quot;move_reg&quot;, b)
  code_rem('MOV END')
var(&quot;move_reg&quot;)

def JMP(a):
  code_rem('JMP ' + str(a))
  MOV(a, &quot;ip&quot;)

def JMPi(a):
  code_rem('JMPi ' + str(a))
  label = next_label()
  JMP(label)
  code_label(label)
  code(a)

def MOVi(imm, a):
  code_rem('MOVi #' + str(imm) + ' ' + str(a))
  label_data = next_label()
  label_jump = next_label()
  MOV(label_data, a)
  JMPi(label_jump)
  code_label(label_data)
  code(imm)
  code_label(label_jump)

# [a] -&gt; b
def PEEK(a, b):
  label1 = next_label()
  label2 = next_label()
  MOV(a, label1)
  MOV(a, label2)
  code_label(label1)  # NOT(0, 0, move_reg)
  code(0)             # &lt;- a
  code_label(label2)  #
  code(0)             # &lt;- a
  code(&quot;move_reg&quot;)    #
  NOT(&quot;move_reg&quot;, b)

# a -&gt; [b]
def POKE(a, b):
  code_rem('POKE ' + str(a) + ' [' + str(b) + ']')
  label = next_label()
  MOV(b, label)
  NOT(a, &quot;move_reg&quot;)  # +3 (three operations)
  code(&quot;move_reg&quot;)    # +4
  code(&quot;move_reg&quot;)    # +5
  code_label(label)
  code(0)             # &lt;- b

# imm -&gt; [a]
def POKEi(imm, a):
  MOVi(imm, &quot;poke_i_reg&quot;)
  POKE(&quot;poke_i_reg&quot;, a)
var(&quot;poke_i_reg&quot;)

def EXIT(a):
  MOV(a, &quot;exit_reg&quot;)

def EXITi(a):
  MOVi(a, &quot;exit_reg&quot;)

def FADD(mask, carry, a, b, r):
  AND(a, mask, &quot;fadd_reg_a&quot;)  # zero bits in 'a' except mask'ed
  AND(b, mask, &quot;fadd_reg_b&quot;)  # zero bits in 'b' except mask'ed
  AND(carry, mask, carry)     # zero bits in 'carry' except mask'ed

  # SUM = (a ^ b) ^ carry
  XOR(a, b, &quot;fadd_reg_t1&quot;)
  XOR(&quot;fadd_reg_t1&quot;, carry, &quot;fadd_reg_bit_r&quot;)

  # Leave only 'mask'ed bit in bit_r.
  AND(&quot;fadd_reg_bit_r&quot;, mask, &quot;fadd_reg_bit_r&quot;)

  # Add current added bit to the result.
  OR(&quot;fadd_reg_bit_r&quot;, r, r)

  # CARRY = (a &amp; b) | (carry &amp; (a ^ b))
  AND(a, b, &quot;fadd_reg_t2&quot;)
  AND(carry, &quot;fadd_reg_t1&quot;, &quot;fadd_reg_t1&quot;)

  # CARRY is calculated, and 'shift_reg' contains the same value
  # but shifted the left by 1 bit.
  OR(&quot;fadd_reg_t2&quot;, &quot;fadd_reg_t1&quot;, carry)

  # CARRY is shifted the left by 1 bit to be used on the next round.
  MOV(&quot;shift_reg&quot;, carry)

  # shift_reg = mask &lt;&lt; 1
  MOV(mask, mask)
  # mask = shift (effectively &quot;mask = mask &lt;&lt; 1&quot;)
  MOV(&quot;shift_reg&quot;, mask)

  AND(carry, mask, carry)

var(&quot;fadd_reg_a&quot;)
var(&quot;fadd_reg_b&quot;)
var(&quot;fadd_reg_bit_r&quot;)
var(&quot;fadd_reg_t1&quot;)
var(&quot;fadd_reg_t2&quot;)

def ZERO(a):
  XOR(a, a, a)

def FADC(a, b, r):
  ZERO(&quot;fadc_reg_t&quot;)
  MOV(&quot;const_1&quot;, &quot;fadc_reg_mask&quot;)
  for i in range(0, 16):
    FADD(&quot;fadc_reg_mask&quot;, &quot;carry_reg&quot;, a, b, &quot;fadc_reg_t&quot;)
  MOV(&quot;fadc_reg_t&quot;, r)

  ZERO(&quot;fadc_reg_t&quot;)

  for i in range(0, 16):
    OR(&quot;fadc_reg_t&quot;, &quot;carry_reg&quot;, &quot;fadc_reg_t&quot;)
    MOV(&quot;carry_reg&quot;, &quot;carry_reg&quot;)
    MOV(&quot;shift_reg&quot;, &quot;carry_reg&quot;)

  MOV(&quot;fadc_reg_t&quot;, &quot;carry_reg&quot;)

var(&quot;fadc_reg_mask&quot;)
var(&quot;fadc_reg_t&quot;)

def ADD(a, b, r):
  ZERO(&quot;carry_reg&quot;)
  FADC(a, b, r)

def ADDi(a, imm, r):
  MOVi(imm, &quot;add_i_reg&quot;)
  ADD(a, &quot;add_i_reg&quot;, r)
var(&quot;add_i_reg&quot;)

def PUSH(a):
  ADD(&quot;stack_reg&quot;, &quot;const_minus_1&quot;, &quot;stack_reg&quot;)
  POKE(a, &quot;stack_reg&quot;)

def PUSHi(imm):
  MOVi(imm, &quot;push_i_reg&quot;)
  PUSH(&quot;push_i_reg&quot;)
var(&quot;push_i_reg&quot;)

def POP(a):
  PEEK(&quot;stack_reg&quot;, a)
  ADD(&quot;stack_reg&quot;, &quot;const_1&quot;, &quot;stack_reg&quot;)

def CALL(a):
  label = next_label()
  PUSHi(label)
  JMP(a)
  code_label(label)

def CALLi(a):
  label = next_label()
  PUSHi(label)
  JMPi(a)
  code_label(label)

def RET():
  POP(&quot;ip&quot;)

# Jump 'a', if cond = FFFF, and 'b' if conf = 0000
def BRANCH(a, b, cond):
  AND(a, cond, &quot;branch_reg_a&quot;)              # reg_a = a &amp; cond
  NOT(cond, &quot;branch_reg_b&quot;)                 # reg_b = !cond
  AND(b, &quot;branch_reg_b&quot;, &quot;branch_reg_b&quot;)    # reg_b = b &amp; reg_b = b &amp; !cond
  OR(&quot;branch_reg_a&quot;, &quot;branch_reg_b&quot;, &quot;ip&quot;)  # ip = (a &amp; cond) | (b &amp; !cond)
var(&quot;branch_reg_a&quot;)
var(&quot;branch_reg_b&quot;)

# Jump 'a', if cond = FFFF, and 'b' if conf = 0000
def BRANCHi(a, b, cond):
  MOVi(a, &quot;branch_i_reg_a&quot;)
  MOVi(b, &quot;branch_i_reg_b&quot;)
  BRANCH(&quot;branch_i_reg_a&quot;, &quot;branch_i_reg_b&quot;, cond)
var(&quot;branch_i_reg_a&quot;)
var(&quot;branch_i_reg_b&quot;)

# if a != 0 -&gt; carry = FFFF else carry = 0000
def IS_0(a):
  ZERO(&quot;carry_reg&quot;)
  FADC(a, &quot;const_minus_1&quot;, &quot;is_0_reg&quot;)
  NOT(&quot;carry_reg&quot;, &quot;zero_reg&quot;)
var(&quot;is_0_reg&quot;)
var(&quot;zero_reg&quot;)

# ip = (zero_reg == FFFF ? a : ip)
def JZi(a):
  label = next_label()
  BRANCHi(a, label, &quot;zero_reg&quot;)
  code_label(label)

# ip = (zero_reg == FFFF ? a : ip)
def JNZi(a):
  label = next_label()
  BRANCHi(label, a, &quot;zero_reg&quot;)
  code_label(label)

def ROL(a, b):
  MOV(a, a)            # shift_reg = a &lt;&lt; 1
  MOV(&quot;shift_reg&quot;, b)

def ROR(a, b):
  MOV(a, &quot;ror_reg&quot;)
  for i in range(0, 15):
    ROL(&quot;ror_reg&quot;, &quot;ror_reg&quot;)
  MOV(&quot;ror_reg&quot;, b)
var(&quot;ror_reg&quot;)

def SHL(a, b):
  ROL(a, b)
  ANDi(b, 0x0001, b)

def SHR(a, b):
  ROR(a, b)
  ANDi(b, 0x7FFF, b)

def MUL3(a, b):
  ADD(a, a, &quot;mul3_reg&quot;)    # mul3_reg = a + a
  ADD(&quot;mul3_reg&quot;, a, b)    # b = mul3_reg + a
var(&quot;mul3_reg&quot;)

# NORCPU code

var(&quot;ip&quot;, &quot;start&quot;)
var(&quot;shift_reg&quot;)
var(&quot;carry_reg&quot;)
var(&quot;const_1&quot;, 1)
var(&quot;const_minus_1&quot;, 0xFFFF)
var(&quot;exit_reg&quot;)

var(&quot;stack_reg&quot;, &quot;stack&quot;)

code_label(&quot;start&quot;)

var(&quot;ch&quot;)
var(&quot;t&quot;)
var(&quot;xor_mask&quot;)
var(&quot;cmp_flag&quot;)

var(&quot;ptr&quot;)
var(&quot;ptr2&quot;)
var(&quot;i&quot;)

MOVi(&quot;exchange&quot;, &quot;ptr&quot;)
MOVi(&quot;secret_password&quot;, &quot;ptr2&quot;)
MOVi(secret_password_xor_mask, &quot;xor_mask&quot;)
MOVi(0, &quot;cmp_flag&quot;)
MOVi(len(secret_password), &quot;i&quot;)

cmp_loop = next_label()
code_label(cmp_loop)               # cmp_loop:
PEEK(&quot;ptr&quot;, &quot;ch&quot;)                                      # ch = *ptr
XOR(&quot;ch&quot;, &quot;xor_mask&quot;, &quot;ch&quot;)                            # ch ^= xor_mask
PEEK(&quot;ptr2&quot;, &quot;t&quot;)                                      # t = *ptr2
XOR(&quot;ch&quot;, &quot;t&quot;, &quot;ch&quot;)                                   # ch = ch ^ t
OR(&quot;cmp_flag&quot;, &quot;ch&quot;, &quot;cmp_flag&quot;)                       # cmp_flag |= ch
ADD(&quot;ptr&quot;, &quot;const_1&quot;, &quot;ptr&quot;)                           # ptr += 1
ADD(&quot;ptr2&quot;, &quot;const_1&quot;, &quot;ptr2&quot;)                         # ptr2 += 1
MUL3(&quot;xor_mask&quot;, &quot;xor_mask&quot;)                           # xor_mask *= 3
ADDi(&quot;xor_mask&quot;, secret_password_add, &quot;xor_mask&quot;)      # xor_mask += add_const
ADD(&quot;i&quot;, &quot;const_minus_1&quot;, &quot;i&quot;)                         # i -= 1
IS_0(&quot;i&quot;)
JNZi(cmp_loop)

MOVi(0, &quot;exchange_sz&quot;)

ok_label = next_label()
IS_0(&quot;cmp_flag&quot;)
JZi(ok_label)

exit_label = next_label()
JMPi(exit_label)

code_label(ok_label)

MOVi(&quot;secret_code&quot;, &quot;ptr&quot;)
MOV(&quot;secret_code_sz&quot;, &quot;i&quot;)
MOVi(secret_code_xor_mask, &quot;xor_mask&quot;)

MOVi(&quot;exchange&quot;, &quot;ptr2&quot;)

MOV(&quot;i&quot;, &quot;exchange_sz&quot;)

loop = next_label()
code_label(loop)                   # loop:
PEEK(&quot;ptr&quot;, &quot;ch&quot;)                             # ch = *ptr
XOR(&quot;ch&quot;, &quot;xor_mask&quot;, &quot;ch&quot;)                   # ch ^= xor_mask
POKE(&quot;ch&quot;, &quot;ptr2&quot;)                            # *ptr2 = ch
MUL3(&quot;xor_mask&quot;, &quot;xor_mask&quot;)                  # xor_mask *= 3
ADDi(&quot;xor_mask&quot;, secret_code_add, &quot;xor_mask&quot;) # xor_mask += add_const
ADD(&quot;ptr&quot;, &quot;const_1&quot;, &quot;ptr&quot;)                  # ptr += 1
ADD(&quot;ptr2&quot;, &quot;const_1&quot;, &quot;ptr2&quot;)                # ptr2 += 1
ADD(&quot;i&quot;, &quot;const_minus_1&quot;, &quot;i&quot;)                # i = i - 1
IS_0(&quot;i&quot;)
JNZi(loop)

code_label(exit_label)             # exit_label:
EXITi(0x00)

buffer(8)
data_label(&quot;stack&quot;)

var(&quot;secret_code_sz&quot;, len(secret_code))
data_label(&quot;secret_code&quot;)
buffer(len(secret_code))

var(&quot;secret_password_sz&quot;)
data_label(&quot;secret_password&quot;)
buffer(16)

var(&quot;exchange_sz&quot;, 0)
data_label(&quot;exchange&quot;)
buffer(32)

# Compiler

text = code_segment
text.extend(data_segment)

if verbose:
  print &quot;\n&quot;.join(text)

# Phase 1. Calculate names.

addr = 0
names = {}
for line in text:
  if line[0] == ';': continue
  if line[0] != ' ':
    name = line.partition(':')[0]
    names[name] = addr
  else:
    addr = addr + 1

if verbose:
  print names

raw_text = &quot;\n&quot;.join(text)

# Resolve names.

for name in names:
  if verbose:
    print name, names[name], type(names[name])
  name_re = re.compile(r'dw ' + name + '$', re.M)
  value = &quot;%d&quot; % names[name]
  raw_text = name_re.sub('dw ' + value, raw_text)

text = raw_text.split(&quot;\n&quot;)

if verbose:
  print &quot;\n&quot;.join(text)

# Phase 2. Compilation.

addr = 0
comment = &quot;&quot;
mem = []
for line in text:
  if line[0] == ';' or line[0] != ' ':
    comment = comment + line + ' '
  else:
    value = int(line.strip().partition(&quot; &quot;)[2])
    if verbose:
      print &quot;%04X: %04X ; %s&quot; % (addr, value, comment)
    mem.append(value)
    addr = addr + 1
    comment = &quot;&quot;

# Interpretation

ip = names[&quot;ip&quot;]
exit_reg = names[&quot;exit_reg&quot;]
shift_reg = names[&quot;shift_reg&quot;]
carry_reg = names[&quot;carry_reg&quot;]

def nor(a, b):
  r = a | b
  r = r ^ 0xFFFF
  return r &amp; 0xFFFF

def norcpu():
  while 1:
    i = mem[ip];
    a = mem[i + 0]
    b = mem[i + 1]
    r = mem[i + 2]
    mem[ip] = i + 3
    f = nor(mem[a], mem[b])
    mem[r] = f
    mem[shift_reg] = ((f &gt;&gt; 15) &amp; 1) | ((f &amp; 0x7FFF) &lt;&lt; 1)

    if verbose_cpu:
      print &quot;%04X: %04X [%04X] %04X [%04X] -&gt; %04X [%04X]&quot; % \
            (i, a, mem[a], b, mem[b], r, mem[r])
    if r == exit_reg:
      break

print &quot;Starting from [%04X]&quot; % mem[ip]

encode_string(secret_code, &quot;secret_code&quot;, secret_code_xor_mask, secret_code_add);
encode_string(secret_password, &quot;secret_password&quot;, secret_password_xor_mask, secret_password_add);

mem_js = dump_js(mem)
save_mem(&quot;norcpu-1-before.bin&quot;)
mem_sz = len(mem)

if len(mem) &gt;= 0x10000:
  print &quot;Too much code (%08X, %04X)&quot; % (len(mem), len(mem) - 0x10000)
  sys.exit()

# Inject plain password in the last moment (for testing).
put_string(guess, &quot;exchange&quot;)

save_mem(&quot;norcpu-2-before-with-password.bin&quot;)

if verbose:
  print &quot;Original memory:&quot;
  print dump(mem)

start_time = time.time()

norcpu()

end_time = time.time()

save_mem(&quot;norcpu-3-after.bin&quot;, mem_sz)

if verbose:
  print &quot;Memory after:&quot;
  dump(mem)

print
print &quot;Size: %X&quot; % len(mem)
print &quot;Time: %d&quot; % (end_time - start_time)
print &quot;Exit: %04X&quot; % mem[exit_reg]

exchange = names[&quot;exchange&quot;]
result_value = &quot;&quot;
for i in range(0, mem[names[&quot;exchange_sz&quot;]]):
  result_value = result_value + chr(mem[exchange + i] &amp; 0xff)

print &quot;Result: [%s]&quot; % result_value

if len(result_value) == 0:
  print &quot;ERROR: Wrong password&quot;

js = string.Template(open('template.html', 'r').read())

js = js.substitute( \
  ip = names[&quot;ip&quot;],
  exit_reg = names[&quot;exit_reg&quot;],
  shift_reg = names[&quot;shift_reg&quot;],
  exchange = names[&quot;exchange&quot;],
  exchange_sz = names[&quot;exchange_sz&quot;],
  mem_js = mem_js
)

f = open(&quot;norcpu2.html&quot;, &quot;w&quot;)
f.write(js)
f.close()
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NORCPU hackme challenge]]></title>
    <link href="http://demin.ws/blog/english/2011/02/08/norcpu-hackme-challenge/"/>
    <updated>2011-02-08T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2011/02/08/norcpu-hackme-challenge/</id>
    <content type="html"><![CDATA[<p>Different kinds of &ldquo;abnormal&rdquo; programming is quite popular among problem solvers. Sometimes it&rsquo;s even impossible to write code manually anymore for just another &ldquo;abnormal&rdquo; programming environment. You have to write a code generator to create even a trivial program.</p>

<p>In the environment I&rsquo;m describing here you can easily write code manually on the high level macro assembler.</p>

<p>Okay, here is a virtual processor understanding only one logical command - <a href="http://en.wikipedia.org/wiki/Logical_NOR">Peirce arrow</a>.</p>

<p>A program written for this processor expects a password as an input. If the password is incorrect, it print out &ldquo;Wrong password!&rdquo;. Otherwise the special magic message will be printed.</p>

<p>The problem statement: You have to find out that magic message using any approach. For example, you can guess the password, the program will just print the secret out.</p>

<p>The logic is written such way that knowing the algorithm allows restoring the magic message without any problems.</p>

<p>Some time ago I <a href="http://demin.ws/blog/english/2010/04/06/modelling-a-cpu-with-only-one-operation/">described this approach</a> in all details.</p>

<p>The original approach I used in this experiment, wasn&rsquo;t 100% &ldquo;clear&rdquo;, because the addition command was implemented outside the processor. In this implementation everything works inside the processor. It required modifying the interpreter slightly introducing a shift register.</p>

<p>For those who want to try to hack this problem, I&rsquo;ve created a web page containing an implementation of this one-command processor and the programming check the password.</p>

<p>Here you go - <a href="http://demin.ws/projects/norcpu/challenge/norcpu.html">the challenge</a>.</p>

<p>P.S. The first one solved the problem will get a little prize! Information is on the page.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Screencasts]]></title>
    <link href="http://demin.ws/blog/english/2010/11/13/screencasts/"/>
    <updated>2010-11-13T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2010/11/13/screencasts/</id>
    <content type="html"><![CDATA[<p>Do you watch screencasts?</p>

<p>I&rsquo;ve discovered this way of getting technical information for myself only recently. Impression is only positive so far - the perceptual speed is much faster comparing to reading.</p>

<p>For example, after <a href="http://www.pragprog.com/screencasts/v-bdobjc/coding-in-objective-c-2-0">Coding in Objective-C 2.0</a> I can write a program in this language using classes and have an idea how the memory management works in Objective-C (by the way, it&rsquo;s quite interesting concept - a &ldquo;manual&rdquo; garbage collector when memory is freed automatically but the programmer has to manage the counter of active links to an object by himself.</p>

<p>Currently watching <a href="http://www.pragprog.com/screencasts/v-bdiphone/writing-your-first-iphone-application">Writing Your First iPhone Application</a> and the next is <a href="http://www.pragprog.com/screencasts/v-kserl/erlang-in-practice">Erlang in Practice</a>.</p>

<p>This is a delicate moment with screencasts - it should be made qualitatively. Otherwise it&rsquo;s waste of time.</p>

<p>Which screencasts do you watch? What can you recommend?</p>

<p>P.S. By the way, I like <a href="http://www.pragprog.com/">The pragmatic Bookshelf</a> online store more and more. All books are in multiple DRM free formats (pdf, mobi, epub).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Naming convension for getters and setters in C++]]></title>
    <link href="http://demin.ws/blog/english/2010/11/09/naming-convension-for-getters-and-setters-in-cpp/"/>
    <updated>2010-11-09T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2010/11/09/naming-convension-for-getters-and-setters-in-cpp/</id>
    <content type="html"><![CDATA[<p>When writing getter and setter methods in standard C++ there are three main approaches for naming.</p>

<p>1. Pure C++ method based on the references.</p>

<pre><code class="cpp">class Foo {
  Value field_;
public:
  Value&amp; field() { return field_; }
  const Value&amp; field() const { return field_; }
};
</code></pre>

<p>Usage:</p>

<pre><code class="cpp">Foo foo;
foo.field() = field_instance;
field_instance = foo.field();
</code></pre>

<p>Pros: brevity, closeness to the property notation and possibility of using in a cascade assignment (<code>foo1.field() = foo2.field() = 2;</code>).</p>

<p>Cons: using the function call on the left looks unusual.</p>

<p>2. Java way</p>

<pre><code class="cpp">class Foo {
  Value field_;
public:
  void setField(const Value&amp; value) { field_ = value; }
  const Value&amp; getField() const { return field_; }
};
</code></pre>

<p>Usage:</p>

<pre><code class="cpp">Foo foo;
foo.setField(field_instance);
field_instance = foo.getField();
</code></pre>

<p>Pros: clarity and obviousness.</p>

<p>Cons: wordiness due to <code>get</code> and <code>set</code> prefixes.</p>

<p>3. Objective-C way</p>

<pre><code class="cpp">class Foo {
  Value field_;
public:
  void setField(const Value&amp; value) { field_ = value; }
  const Value&amp; field() const { return field_; }
};
</code></pre>

<p>Usage:</p>

<pre><code class="cpp">Foo foo;
foo.setField(field_instance);
field_instance = foo.field();
</code></pre>

<p>Pros: brevity (no useless <code>get</code> prefix) and clarify.</p>

<p>Cons: haven&rsquo;t found so far.</p>

<p>All three have rights to live but from the style perspective it&rsquo;s good to be consistent and use only one style across one project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chinese method of multiplication on paper]]></title>
    <link href="http://demin.ws/blog/english/2010/10/20/chinese-method-of-multiplication-on-paper/"/>
    <updated>2010-10-20T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2010/10/20/chinese-method-of-multiplication-on-paper/</id>
    <content type="html"><![CDATA[<p>I don&rsquo;t claim that is more efficient rather the traditional method but looks very cool.</p>

<iframe width="425" height="344" src="http://www.youtube.com/embed/EsgMzkUivKo?color=white&theme=light"></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tricky floating point]]></title>
    <link href="http://demin.ws/blog/english/2010/05/12/tricky-floating-point/"/>
    <updated>2010-05-12T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2010/05/12/tricky-floating-point/</id>
    <content type="html"><![CDATA[<p>How do you think what the code below should print out? I expected two numbers <code>115</code>.</p>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;cmath&gt;
using namespace std;

int main(int argc, char* argv[]) {
  double f = 1.15;
  int a = f * 100.0 + 0.1E-9;
  int b = f * 100.0;
  cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;
  cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;
  return 0;
}
</code></pre>

<p>No, on VS2008 it prints out:</p>

<pre><code>115
114
</code></pre>

<p>Be careful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modelling a CPU with only one operation]]></title>
    <link href="http://demin.ws/blog/english/2010/04/06/modelling-a-cpu-with-only-one-operation/"/>
    <updated>2010-04-06T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2010/04/06/modelling-a-cpu-with-only-one-operation/</id>
    <content type="html"><![CDATA[<p>Going further with bitwise tips and tricks I will tell about a model of a CPU based on a single operation - NOR (or Peirce arrow).</p>

<p>In the mid-nineties in the FIDO discussion group RU.HACKER I come across an interesting hackme.</p>

<p>Usually &ldquo;hackme&rdquo; is an application which is published as a challenge to be hacked. It prompts for a password and the goal is to crack it. You may guess the password disassembling the code or could just patch the code and disable the password check and so on.</p>

<p>That &ldquo;hackme&rdquo; from RU.HACKER was originally written by famous Russian hacker and security expert Alexander Peslyak (the author of John The Ripper John The Ripper and Openwall Linux).</p>

<p>Unlike other &ldquo;hackme&rdquo; around Alexander&rsquo;s approach didn&rsquo;t have any anti-debugger tricks at all preventing disassembling and tracing. Furthermore it contained less then hundred bytes of x86 code. The code executed a trivial loop calculating only one operation - NOR (Pierce arrow). And the entire business logic (interaction with the console and password calculations) was build on top this primitive. Effectively this is a model of CPU having only one command.</p>

<p>The memory model of this CPU is flat and it consists of 16-bit words. The address space is from 0x0000 to 0xFFFF. A CPU instruction has 3 operands. There is no an instruction code because the command is always the same - NOR. Each operand represents an address.</p>

<p>To execute an instruction CPU takes the left argument of NOR from an address given in the first operand and the right argument from an address given in the second operand. Then it implies bitwise 16-bit NOR between them and puts the result to the address given in the third argument. Afterwards the instruction pointer is increment by 3 to shift to the next instruction and the cycle repeats.</p>

<p>The instruction pointer (<code>IP</code>) is also located in the address space and JUMP operation could be implemented just by putting a jump address to the memory location of <code>IP</code>.</p>

<p>The original NOR interpreter was written on x86 assembly:</p>

<pre><code class="nasm">cld
emCPU:
mov  si,emIP
lodsw
xchg ax,di
mov  di,[di]
lodsw
xchg ax,bx
or   di,[bx]
lodsw
xchg ax,di
not  ax
mov  emIP,si
stosw
jmp  short emCPU
</code></pre>

<p>Nothing prevents to write it on any language, for example, Python.</p>

<pre><code class="python">def nor(a, b):
  return ~(a | b) &amp; 0xFFFF

def norcpu():
  while 1:
    i = mem[IP];
    a = mem[i + 0]
    b = mem[i + 1]
    r = mem[i + 2]
    mem[IP] = i + 3
    f = nor(mem[a], mem[b])
    mem[r] = f
</code></pre>

<p>Why NOR? The Boolean algebra theory says that any of 14 of 16 Boolean functions could be calculated using just the rest two - NOR and NAND. For instance:</p>

<pre><code>NOT(a) = NOR(a, a)
AND(a, b) = NOT(OR(NOT(a), NOT(b)))
OR(a, b) = NOT(NOR(a, b))
XOR(a, b) = OR(AND(a, NOT(b)), AND(NOT(a), b)))
</code></pre>

<p>The move operation <code>MOVE(src, dst)</code> could be implemented via <code>OR</code>:</p>

<pre><code>mem[dst] = OR(mem[src], mem[src])
</code></pre>

<p>A conditional jump is either implemented via Boolean functions. If <code>cond</code> equals 0xFFFF (true), the jump to <code>addr</code> is performed. If <code>cond</code> equals 0x0000 (false) CPU sequentially takes the next instruction following <code>JUMP</code>.</p>

<pre><code>mem[IP] = OR(AND(addr, cond), AND(mem[IP], cond))
</code></pre>

<p>Or in the NOR interpreter notation:</p>

<pre><code>AND addr, cond, @t1
AND IP, cond, @t2
OR @t1, @t2, IP
</code></pre>

<p>where <code>@t1</code> and <code>@t2</code> are temporary variables. The <code>AND</code> and <code>OR</code> commands will be also expanded to sets of NORs as shown above.</p>

<p>Eventually we have Boolean functions, copy/move, unconditional and conditional jumps. We just lack the addition/subtraction and shifts. Having that we could implement the subroutine stack and then any complex computations can be made by this primitive CPU.</p>

<p>The original Alexander&rsquo;s NOR CPU implementation had a workaround which allows running the native x86 code. The workaround was based on the fact that the NOR interpreter also resides in its address space and can modify itself. To execute the native code a special high level macro (let&rsquo;s say emCallX86) uses MOVE operation (see above) to place two bytes at the beginning of the interpreter code (effectively it saves the original two bytes and put other two instead). Those two new bytes are an x86 short jump instruction. When the interpreter begins the next cycle it simply jumps out to an arbitrary x86 code. In the end the native code restores the original two bytes of the interpreter and returns the execution flow to it.</p>

<p>An interaction with DOS I/O and an addition of two 16-bit integers with carry were implemented in native code.</p>

<p>Frankly speaking I don&rsquo;t find it feasible to implement a full 16-bit adder using Boolean functions only. The original NOR interpreter only performed bitwise NOR. It wasn&rsquo;t possible to move/shift an individual bit to another one but the <a href="http://en.wikipedia.org/wiki/Adder_(electronics)">full binary adder</a> needs it to consider the carry.</p>

<p>Recently I&rsquo;ve come back to this NOR interpreter approach but in Python world. I&rsquo;ve modified the original idea a bit to simplify (or just make it possible) an implementation of addition using NOR only, without native code at all. I&rsquo;ve introduced one extra operation in the interpreter ñ the result of NOR is cyclically shifted left by 1 bit and stored the special location in memory.</p>

<pre><code class="python">def norcpu():
  while 1:
    i = mem[IP];
    a = mem[i + 0]
    b = mem[i + 1]
    r = mem[i + 2]
    mem[IP] = i + 3
    f = nor(mem[a], mem[b])
    mem[r] = f
    mem[S] = ((f &gt;&gt; 31) &amp; 1) | ((f &amp; 0x7FFF) &lt;&lt; 1)
</code></pre>

<p>There are two special locations now: <code>IP</code> (instruction pointer) and <code>S</code> (shift register).</p>

<p>Let&rsquo;s try to implement the full addition of 16-bit words with carry. I will use a simple macro assembler.</p>

<p>The full 1 bit adder formulas are:</p>

<pre><code>sum = (a ^ b) ^ carry
carry = (a &amp; b) | (carry &amp; (a ^ b))
</code></pre>

<p>Now in the NOR CPU assembly:</p>

<pre><code>; Input:
;  mask  - a current bit mask (0x0001, 0x0002, 0x0004, 0x0008 etc)
;  carry ñ a carry from the previous bit (the masked applied)
;  a, b  - an argument addresses
;  r     - an address of the result
; Output:
;  r     - a result
;  carry - a carry to the next bit (already left shifted with respect to the mask)
;  mask  - a mask left shifted by one bit
;
; Variables with '@' prefix are local for the macro.
;
!macro FADD mask, carry, a, b, r
  XOR a, b, @t1              ; Formula: sum = (a ^ b) ^ carry.
  XOR @t1, carry, @bit_r     ; 
  AND @bit_r, mask, @bit_r   ; Mask all bits in @bit_r expect the current one
  OR @bit_r, r, r            ; Save the bit to the result: r |= sum
  AND a, b, @t2              ; Formula: carry = (a &amp; b) | (carry &amp; (a ^ b))
  AND carry, @t1, @t1        ;
  OR @t2, @t1, carry         ; The carry is calculated. Its left shifted copy is in S. 
  MOVE S, carry              ; Assign the carry to itself but shifted the next bit.
  MOVE mask, mask, mask      ; Dummy assignment to just get: S = mask &lt;&lt; 1.
  MOVE S, mask               ; mask = S = mask &lt;&lt; 1
</code></pre>

<p>Then we implement the 16-bit adder:</p>

<pre><code>; Input:
;  a, b  - argument
;  carry ñ a carry (the least significant bit only makes sense)
; Output:
;  r     - the result: r = a + c + carry
;  carry ñ a carry (the least significant bit only makes sense)
;
; Variables having '@' prefix are local for the macro.
; const_1 - a special location containing the constant 0x0001.
;
!macro ADC a, b, carry, r
  XOR r, r, r                     ; r = 0.
  MOVE const_1, @mask             ; The initial mask value = 0x0001
  *16 FADD @mask, carry, a, b, r  ; Repeat FADD 16 times (no loops, just a
                                  ; repetition)
  AND carry, const_1, carry       ; Clean-up all bits in carry except LSB.
</code></pre>

<p>What happens in <code>ADC</code>? On each iteration (repetition) of <code>FADD</code> it sums the current bit (its mask is <code>@mask</code>). Then the sum is joined (via <code>OR</code>) with the result. The mask is shifted to left 1 bit (the <code>@mask</code> takes values 0x0001 -&gt; 0x0002 -&gt; 0x0004 etc). The carry is also shifted to the left 1 bit to be used on the next iteration of <code>FADD</code>. After 16 iterations the carry will be in LSB (because the interpreter shifts cyclically). The carry after 16 iterations will be output value of carry.</p>

<p>The addition is implemented eventually. Then we could programmatically implement a subroutine stack. <code>CALL</code>/<code>RET</code> instructions could be based on the stack mechanism and branching instructions.</p>

<p>Now we can easily do any computations on our pseudo CPU executing only one command.</p>

<p>What&rsquo;s the point of all this stuff? First of all is an academic interest, fun.</p>

<p>Related posts:</p>

<ul>
<li><a href="http://demin.ws/blog/english/2010/03/17/swap-two-numeric-variable-using-xor/">Swap two numeric variables using XOR</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swap two numeric variables using XOR]]></title>
    <link href="http://demin.ws/blog/english/2010/03/17/swap-two-numeric-variable-using-xor/"/>
    <updated>2010-03-17T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2010/03/17/swap-two-numeric-variable-using-xor/</id>
    <content type="html"><![CDATA[<p>Two numeric variables could be swapped not only via a temporary one. It could be done this way:</p>

<pre><code>a += b;
b = a - b;
a -= b;
</code></pre>

<p>This is neat but unlikely useful in practice. But it could be rewritten using bitwise arithmetics to avoid overflow issues:</p>

<pre><code>a ^= b ^= a ^= b;
</code></pre>

<p>This one looks very cool and hackish but unfortinatelly may cause an unpredictable behavior according to the Standard due to the chained assignments. So the last edition is also fast and overflow free but doesn&rsquo;t have an unpredictable behavior:</p>

<pre><code>a ^= b;
b ^= a;
a ^= b;
</code></pre>

<p><strong>Update</strong>: Here is a perfect link to <a href="http://graphics.stanford.edu/~seander/bithacks.html">Bit Twiddling Hacks</a> with lots of similar bitwise tips.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is faster on Sieve of Eratosthenes: Go, C or C++?]]></title>
    <link href="http://demin.ws/blog/english/2010/03/06/what-is-faster-on-eratosthenes-seive-go-c-or-cpp/"/>
    <updated>2010-03-06T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2010/03/06/what-is-faster-on-eratosthenes-seive-go-c-or-cpp/</id>
    <content type="html"><![CDATA[<p>Go is a very interesting language. It compiles to native-code (no VM or JIT) and it comes with automatic garbage collection and built-in concurrency support, the object-oriented model and on top of it - extremely fast compilation.</p>

<p>I love to use <a href="http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes">Sieve of Eratosthenes</a> as &ldquo;Hello, world!&rdquo; when exploring a new language.</p>

<p>Here is my version of the seive in Go:</p>

<p>File <code>erato-go-bool.go</code>:</p>

<pre><code class="go">package main

import &quot;fmt&quot;
import &quot;math&quot;
import &quot;flag&quot;

func main() {
    var N int
    flag.IntVar(&amp;N, &quot;N&quot;, 100, &quot;&quot;)
    flag.Parse()

    fmt.Printf(&quot;%d\n&quot;, N)

    seive := make([]bool, N)
   
    limit := int(math.Sqrt(float64(N))) + 1

    for i := 2; i &lt; limit; i++ {
        if !seive[i] {
            for j := i * i; j &lt; N; j += i  {
                seive[j] = true
            }
        }
    }

    count := 0
    for i := 2; i &lt; N; i++ {
        if !seive[i] {
            count++
        }
    }
    fmt.Printf(&quot;%d\n&quot;, count)
}
</code></pre>

<p>But how fast is this?</p>

<p>I&rsquo;ve compared it against implementations in C++ and C.</p>

<p>The first competitor is Go using <code>bool</code> type in as a storage (see above). The second one is the also Go&rsquo;s version but with <code>int</code> as the storage type.</p>

<p>File <code>erato-go-int.go</code>:</p>

<pre><code class="go">package main

import &quot;fmt&quot;
import &quot;math&quot;
import &quot;flag&quot;

func main() {
    var N int
    flag.IntVar(&amp;N, &quot;N&quot;, 100, &quot;&quot;)
    flag.Parse()

    fmt.Printf(&quot;%d\n&quot;, N)

    seive := make([]int, N)
   
    limit := int(math.Sqrt(float64(N))) + 1

    for i := 2; i &lt; limit; i++ {
        if seive[i] == 0 {
            for j := i * i; j &lt; N; j += i  {
                seive[j] = 1
            }
        }
    }

    count := 0
    for i := 2; i &lt; N; i++ {
        if seive[i] == 0 {
            count++
        }
    }
    fmt.Printf(&quot;%d\n&quot;, count)
}
</code></pre>

<p>Then I tested in C++. A <code>TYPE</code> macro allows to compile the source with different types (<code>int</code> and <code>bool</code>):</p>

<p>File <code>erato-cxx.cpp</code>:</p>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;cstdlib&gt;
#include &lt;cmath&gt;

int main(int argc, char* argv[]) {
  int n = argc &gt; 1 ? std::atoi(argv[1]) : 100;

  std::cout &lt;&lt; n &lt;&lt; std::endl;

  int sqrt_n = static_cast&lt;int&gt;(std::sqrt(static_cast&lt;double&gt;(n))) + 1;

  std::vector&lt;TYPE&gt; S(n, true);

  for (int i = 2; i &lt; sqrt_n; ++i)
    if (S[i])
      for (int j = i*i; j &lt; n; j+=i)
        S[j] = false;

  int count = 0;
  for (int i = 2; i &lt; n; ++i)
    if (S[i])
      count++;

  std::cout &lt;&lt; count &lt;&lt; std::endl;

  return 0;
}
</code></pre>

<p>And to have the full picture there is an implementation in C:</p>

<p>File: <code>erator-c-int.c</code>:</p>

<pre><code class="cpp">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;memory.h&gt;
#include &lt;math.h&gt;

int main(int argc, char* argv[]) {
  int n = argc &gt; 1 ? atoi(argv[1]) : 100;
  int* S;
  int count;
  int sz = n * sizeof(*S);
  int i, j;

  printf(&quot;%d\n&quot;, n);

  long sqrt_n = sqrt(n) + 1;

  S = malloc(sz);
  memset(S, 0, sz);

  for (i = 2; i &lt; sqrt_n; ++i)
    if (S[i] == 0)
      for (j = i*i; j &lt; n; j+=i)
        S[j] = 1;

  count = 0;
  for (i = 2; i &lt; n; ++i)
    if (S[i] == 0)
      count++;

  printf(&quot;%d\n&quot;, count);

  free(S);
  return 0;
}
</code></pre>

<p>Makefile for easy run:</p>

<p>File <code>Makefile</code>:</p>

<pre><code class="makefile">.SILENT: 

all: 
        $(MAKE) run 2&gt;&amp;1 | tee log
        $(MAKE) parse-log

run: go-bool go-int cxx-int cxx-bool c-int

N ?= 100000000

go-bool:
        echo $@
        6g erato-$@.go
        6l -o erato-$@ erato-$@.6
        time -p -f %e ./erato-$@ -N=$(N)

go-int: 
        echo $@
        6g erato-$@.go
        6l -o erato-$@ erato-$@.6
        time -p -f %e ./erato-$@ -N=$(N)

cxx-bool:
        echo $@
        g++ -o erato-$@ \
                -O3 -funroll-all-loops -fomit-frame-pointer \
                -DTYPE=bool erato-cxx.cpp 
        time -p -f %e ./erato-$@ $(N)

cxx-int:
        echo $@
        g++ -o erato-$@ \
                -O3 -funroll-all-loops -fomit-frame-pointer \
                -DTYPE=int erato-cxx.cpp 
        time -p -f %e ./erato-$@ $(N)

c-int:
        echo $@
        gcc -o erato-$@ -lm \
                -O3 -funroll-all-loops -fomit-frame-pointer erato-$@.c
        time -p -f %e ./erato-$@ $(N)

parse-log:
        printf &quot;%10s %10s %8s %5s\n&quot; &quot;Language&quot; N Count Time ; \
        (echo &quot;------------------------------------&quot;) ; \
        while read type ; do \
                read N &amp;&amp; \
                read count &amp;&amp; \
                read time &amp;&amp; \
                printf &quot;%10s %10s %8s %5s\n&quot; $$type $$N $$count $$time ; \
        done &lt; log
</code></pre>

<p>I run this on Ubuntu 64-bit. The C/C++ compiler is gcc 4.4.1. The Go compiler is the lastest from its official repository.</p>

<p>Run:</p>

<pre><code>make N=100000000
</code></pre>

<p>Output:</p>

<pre><code> Language           N    Count  Time
------------------------------------
   go-bool  100000000  5761455  3.96
    go-int  100000000  5761455  6.58
   cxx-int  100000000  5761455  6.76
  cxx-bool  100000000  5761455  2.20
     c-int  100000000  5761455  6.47
</code></pre>

<p>C++ using <code>std::vector&lt;book&gt;</code> has beaten C and Go. The second is Go&rsquo;s implementation also using <code>bool</code>. And on the third place are C, C++ with <code>std::vector&lt;int&gt;</code> and Go with <code>int</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Print a container with delimiters]]></title>
    <link href="http://demin.ws/blog/english/2010/02/24/print-container-with-delimiters/"/>
    <updated>2010-02-24T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2010/02/24/print-container-with-delimiters/</id>
    <content type="html"><![CDATA[<p>It&rsquo;s nice to skip a trailing delimiter when printing out a container.</p>

<p>A straightforward solution could be:</p>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;

int main(int argc, char* argv[]) {
  int a[] = { 1, 2, 3, 4, 5 };
  std::vector&lt;int&gt; v(a, a + 5);

  for (int i = 0; i &lt; v.size(); ++i) {
    std::cout &lt;&lt; v[i];
    if (i &lt; v.size() - 1)
      std::cout &lt;&lt; &quot;, &quot;;
  }
  std::cout &lt;&lt; std::endl;

  return 0;
}
</code></pre>

<p>A condition in the loop solves the problem, it&rsquo;s better to iterate containers using manipulators:</p>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;

int main(int argc, char* argv[]) {
  int a[] = { 1, 2, 3, 4, 5 };
  std::vector&lt;int&gt; v(a, a + 5);

  for (std::vector&lt;int&gt;::const_iterator i = v.begin(); i != v.end(); ++i) {
    std::cout &lt;&lt; *i;
    if (v.end() - i &gt; 1)
      std::cout &lt;&lt; &quot;, &quot;;
  }
  std::cout &lt;&lt; std::endl;

  return 0;
}
</code></pre>

<p>It&rsquo;s not also great because iterators of some containers don&rsquo;t support subtraction. For example, this code doesn&rsquo;t compile if we use <code>std::list</code> instead of <code>std::vector</code> (the first example also fails on <code>std::list</code> but due to another reason). The better way is:</p>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;

int main(int argc, char* argv[]) {
  int a[] = { 1, 2, 3, 4, 5 };
  std::vector&lt;int&gt; v(a, a + 5);

  typedef std::vector&lt;int&gt;::const_iterator iterator;
  for (iterator i = v.begin(); i != v.end(); ++i) {
    std::cout &lt;&lt; *i;
    if (std::distance&lt;iterator&gt;(i, v.end()) &gt; 1)
      std::cout &lt;&lt; &quot;, &quot;;
  }
  std::cout &lt;&lt; std::endl;
  return 0;
}
</code></pre>

<p>The <code>std::distance</code> template can calculate the distance between two iterators even if they don&rsquo;t support arithmetics. But for this kind of containers <code>std::distance</code> just iterates from one to another and the overall time of the print loop seems to be <code>O(N^2)</code> instead of original <code>O(N)</code>. Also we have to use the type name twice — to declare the iterator and to instantiate <code>std::distance</code>. For example, Visual Studio 2008 cannot deduct the type from the parameters of <code>std::distance</code>.</p>

<p>There is another neat way allowing to use iterators (with <code>O(N)</code> time even for containers such as <code>std::list</code>), and to write beautifully and compactly:</p>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;

int main(int argc, char* argv[]) {
  int a[] = { 1, 2, 3, 4, 5 };
  std::vector&lt;int&gt; v(a, a + 5);

  for (std::vector&lt;int&gt;::const_iterator i = v.begin(); i != v.end(); ++i) {
    std::cout &lt;&lt; *i;
    if (i != --v.end())
      std::cout &lt;&lt; &quot;, &quot;;
  }
  std::cout &lt;&lt; std::endl;

  return 0;
}
</code></pre>

<p>The trick with pre-increment <code>--</code> operator allows to check effectively for the last element of a container.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is sizeof for composite types]]></title>
    <link href="http://demin.ws/blog/english/2010/02/24/what-is-sizeof-for-composite-types/"/>
    <updated>2010-02-24T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2010/02/24/what-is-sizeof-for-composite-types/</id>
    <content type="html"><![CDATA[<p>The simplest way to understand the value of <code>sizeof</code> for composite types (structures and classes) before digging in to the alignment is to remember that sizeof returns the difference between addresses of two consequent elements of an array containing instances of the type.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cmockery staging project]]></title>
    <link href="http://demin.ws/blog/english/2010/02/13/cmockery-staging-project/"/>
    <updated>2010-02-13T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2010/02/13/cmockery-staging-project/</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve launched a project hosting the staging area of the cmockery (the great unit testing framework for C language) — <a href="http://code.google.com/p/cmockery-staging/">cmockery staging</a>.</p>

<p>I will put the latest features and hot bug fixes there, and also merge back the cmockery trunk as well.</p>

<p>Related posts:</p>

<ul>
<li><a href="http://demin.ws/blog/english/2009/09/23/first-little-step-into-test-driven-development/">The first little step into Test Driven Development</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Steve Dewhurst, &#34;C++ Common Knowledge&#34;]]></title>
    <link href="http://demin.ws/blog/english/2009/12/16/cpp-common-knowledge/"/>
    <updated>2009-12-16T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2009/12/16/cpp-common-knowledge/</id>
    <content type="html"><![CDATA[<p>I went to the <a href="http://semantics.org/instructorbio.html">Steve Dewhurst</a>&rsquo;s training &ldquo;<a href="http://semantics.org/courses/Cpp-Common-Knowledge-Training.html">C++ Common Knowledge course</a>&rdquo;. I&rsquo;ve been having his book quite a long time:</p>

<p>Stephen Dewhurst, &ldquo;<a href="http://www.amazon.co.uk/Common-Knowledge-Essential-Intermediate-Programming/dp/0321321928/">C++ Common Knowledge</a>&ldquo;</p>

<p><img src="http://demin.ws/images/covers/english/cpp-common-knowledge-cover.jpg" /></p>

<p>and in general, this training is specifically focused on the topics from it.</p>

<p>Very cool man. It was interesting and accompanied with jokes like that Boost guys just smoke templates etc. I really liked it.</p>

<p>Steve said that C++ is virtually the most that is doing in life. He wrote the compilers, utilities, versed in the standards and now he provides trainings.</p>

<p>I cannot say that I learned something very new - it would be strange since I read his book above from cover to cover and periodically get back to it. Although perhaps one thought I was hooked: the correct implementation of the copy constructor or assignment operator for the class in the hierarchy with a virtual base class having data members is a very complicated task. This clearly violates the principle of independence of the logical levels in the hierarchy of inheritance, as it necessary requires to know exactly from which classes you inherited and how to properly initialize them with multiple inheritance.</p>

<p>The recommendation is as follows: first ask yourself a question: do I need a multiple inheritance here? do I need a virtual multiple inheritance?? but do I need a virtual multiple inheritance with the data in the virtual base class??? And even after long reflection it&rsquo;s better to say &ldquo;no&rdquo;. Personally I don&rsquo;t have anything against the multiple inheritance. But I don&rsquo;t really like how it&rsquo;s implemented in C++. And I don&rsquo;t really like how it&rsquo;s done in Java either. I do like how it&rsquo;s done in Go. In Go the notions of data structures and interfaces are completely separated. Data structures cannot be inherited. They can only implement interfaces. And you can inherit only an interface. Therefore, in principle, it isn&rsquo;t possible to pick up other people&rsquo;s data in inheritance but only methods. And no data, no problem in its initialization.</p>

<p>So I just summarize the general recommendations from Steve:</p>

<ul>
<li>try to use virtual functions and polymorphism in general instead of &ldquo;if&rdquo; and &ldquo;case&rdquo;</li>
<li>try to use the STL/Boost algorithms and functors instead of loops</li>
<li>use only &ldquo;smart&rdquo; pointers when working with dynamic memory</li>
<li>don&rsquo;t use the classical arrays but STL containers (as for example, std::vector guarantees the linear arrangement of elements, it&rsquo;s possible to mix the &ldquo;old&rdquo; code that works with pointers with using containers)</li>
<li>think carefully about copying operations of complex classes (the best way to implement a copy constructor and the swap method, and implement the assignment operator through them)</li>
<li>always declare the copy constructor and assignment operator, and even if they are not used just simply comment out them with a brief explanation why they are not needed</li>
<li>never use C-like casts, and only C++-like (static_cast, const_cast, etc.), as they are long, tedious to fill and they distort the view of program - in short everything you need to minimize their presence</li>
<li>remember that an inheritance - a re-use of interfaces but not code itself</li>
<li>don&rsquo;t the compiler too much ;-) (Steve wrote them and knows that they may hit your back)</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Peter Seibel, &#34;Coders at Work&#34;]]></title>
    <link href="http://demin.ws/blog/english/2009/12/15/coders-at-work/"/>
    <updated>2009-12-15T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2009/12/15/coders-at-work/</id>
    <content type="html"><![CDATA[<p>Slowly finished reading &ldquo;<a href="http://www.amazon.co.uk/Coders-Work-Reflections-Craft-Programming/dp/1430219483/">Coders at Work</a>&rdquo;.</p>

<p>Peter Seibel, &ldquo;<a href="http://www.amazon.co.uk/Coders-Work-Reflections-Craft-Programming/dp/1430219483/">Coders at Work</a>&ldquo;</p>

<p><img src="http://demin.ws/images/covers/english/coders-at-work-cover.jpg" /></p>

<p>The book consists of interviews with a dozen well-known programmers. Here are the creators of UNIX, Netscape, JavaScript, Smalltalk, Haskell, Erlang, Ghostscript, LJ and also merely Donald Knuth.</p>

<p>The author asks them similar questions: when and why you started programming, how you usually work, where and on what you have worked and are working now, what do you think about the development of programming languages over the past decade, what you can advise the young etc. Some memoirs theme is dangerous because you can slip into elementary senile grumbling like &ldquo;but at our times&hellip;&rdquo; or &ldquo;you&rsquo;d better write in machine language and it&rsquo;ll teach you more&hellip;&rdquo;, but all proved to have very balanced view of reality. Of course, there is a radical separation between functional and imperative fans but this is the question of religion rather than age.</p>

<p>Many refer to various books - I have expanded much my &ldquo;must read&rdquo; list.</p>

<p>It&rsquo;s funny that almost no one answered unequivocally positive about C++. They were like &ldquo;very hard, difficult etc&rdquo; or &ldquo;well, now that more than anything so far there is no better than to build native code of industrial complexity, let him be.&rdquo;</p>

<p>Lyrical digression. I&rsquo;ve been smoking Go and it takes me off deeper and deeper. I can say that I have almost found all of my C++ habits in Go. And its innate multi threading and ultra-fast compile polish everything.</p>

<p>Also there is an interesting opinion on whether it&rsquo;s required for all self-respecting programmers to read the &ldquo;Art of Computer Programming&rdquo; Knuth, or at least have in the library. Many recognized that they didn&rsquo;t read from cover to cover, but used as a reference.</p>

<p>As always I&rsquo;ve got that I did not even have heard of some very famous things. For example, <a href="http://en.wikipedia.org/wiki/Literate_programming">Literate programming</a> from Donald Knuth or <a href="http://en.wikipedia.org/wiki/Bloom_filter">Bloom filter</a>.</p>

<p>In general, I&rsquo;ve found the book very interesting. If you are longing covers like &ldquo;should I program the entire career&hellip;&rdquo; or &ldquo;should I shift to management or architects because young is pressing from the back&hellip;&rdquo;. Here is given an excellent, but the hidden answer: any of these ways can bring and satisfaction and, importantly, wealth. That&rsquo;s the beauty of our profession. Just do the thing that you want to work till night, look around wondering what&rsquo;s going on and not worry that you can be unnecessary - you can&rsquo;t.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Travis Swicegood, &#34;Pragmatic Version Control using Git&#34;]]></title>
    <link href="http://demin.ws/blog/english/2009/11/14/pragmatic-version-control-using-git/"/>
    <updated>2009-11-14T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2009/11/14/pragmatic-version-control-using-git/</id>
    <content type="html"><![CDATA[<p>At work I am involved in the following routine: there is a branch of sources which stability is monstrously important. Not even saying about breaking the build every commit goes through a few stages of automated checks (compiling by several compilers on several platforms, running through a variety of analyzer etc). Then it has to be approved at least by four/five people who take the responsibility of the commit. The routine is quite painful and long even from a technical point of view. On top of it the procedure is lined up over the years and based on very old SCM and we will not it&rsquo;s called in vain. Therefore the possibility of merging and conflict resolution is manual mostly. It can normally do only check-out and check-in.</p>

<p>As a consequence of the fact that every commit is prepared, debugged and tested a sizable time (the benefit is that there are bug fixes only which are typically small) and even formal aspect of an issue may take a couple of days, often happens that when it comes directly to the command &ldquo;commit&rdquo; all ends up with a conflict because someone has already managed to touch a piece of your code and pour it on the server. Then it needs to merge manually. And if the file is not one then a headache begins.</p>

<p>Since I am only recently involved in this stuff after the second commit I&rsquo;ve decided to simplify my life in terms of merging on a conflict.</p>

<p>I&rsquo;ve got the <a href="http://git-scm.org/">git</a> and now it looks this way: each bug fix lives in the separate git&rsquo;s repository (in fact, in a directory) with two main branches. In one I do patching and preserve entire history of it in git, and periodically I sync the second branch with the main repository. And if I&rsquo;ve got new just synced changes in the second branch I merge the first one with it using just one magic command <code>git merge</code>.</p>

<p>In terms of distributed SCMs I now mostly with the mercurial because Google Code supports it. But frankly speaking the git is extremely powerful tool (of course if Windows is not involved in the workflow because git&rsquo;s Windows port is horrible).</p>

<p>At the beginning of using git there is lots of confusion. Personally I was absolutely misleading by the idea of the staging area (or the index). This is an intermediate chain between local files and the repository. So <a href="http://www.kernel.org/pub/software/scm/git/docs/git-diff.html">git diff</a> can show the three different things: the diff between the local files and the index (but not the repository as many people expect by default and it introduces git&rsquo;s newcomers to a screeching halt), the diff between the index and the repository and finally the diff between the local files and the repository. The index (or the staging area) allows to commit changed files selectively. Usually a commit affects only staged files (in the index). And the most interesting it is possible to stage (and eventually to commit) files partially. For example, I&rsquo;ve added two brand new classes to a file but I am able to commit only one and commit the next one later.</p>

<p>Do you already like it?</p>

<p>For example, a rollback of all local changes could be done at least two ways (using <a href="http://www.kernel.org/pub/software/scm/git/docs/git-checkout.html">git checkout</a> or via <a href="http://www.kernel.org/pub/software/scm/git/docs/git-reset.html">git reset</a>). Also to rollback of already committed change you also have as minimum two alternatives (<a href="http://www.kernel.org/pub/software/scm/git/docs/git-reset.html">git reset</a> или <a href="http://www.kernel.org/pub/software/scm/git/docs/git-revert.html">git revert</a>) depending on your wish to make this rollback visible in the history.</p>

<p>The abundance of features and some of their dissimilarity to the generally accepted standards of SCM commands is a little daunting at the beginning. But after a while you get started to feel the git&rsquo;s power. For example, having the staging area and <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html">git stash</a> (when possible to freeze the state of local changes, do some quick hacking and then get that state back) are very unique features of git.</p>

<p>In terms of GUI the <a href="http://www.kernel.org/pub/software/scm/git/docs/gitk.html">gitk</a> provides all the necessary.</p>

<p>The only thing that you need to choose on taste alone is program for merging in a graphical mode to resolve conflicts. Here all are in their preferences.</p>

<p>I would recommend the very good book to start with git.</p>

<p>Travis Swicegood, &ldquo;<a href="http://www.amazon.co.uk/Pragmatic-Version-Control-Using-Git/dp/1934356158/">Pragmatic Version Control using Git</a>&ldquo;</p>

<p><img src="http://demin.ws/images/covers/english/pragmatic-version-control-using-git-cover.jpg" /></p>

<p>This is the very good introduction into Git from the community of Linux kernel developers and from Linux Torvalds in particular.</p>

<iframe width="425" height="344" src="http://www.youtube.com/embed/4XpnKHJAok8?color=white&theme=light"></iframe>

<p>I appreciate these books for primary involvement in the subject.</p>

<p>This is a book for beginners, and if you&rsquo;re not a novice in the field of DVCS, then you swallow it in one evening and want a more in-depth knowledge of Git. It happened to me. I read the book for the evening, it formulated dozens of unanswered questions and allowed me to understand - what kind of questions I need answers for.</p>

<p>You will find the excellent <a href="http://book.git-scm.com/">live book about Git</a> on the official website. Many chapters are accompanied with video tutorials.</p>

<p>I usually do not keep the book for beginners because after you are interested in the subject any more or dig deeper and knowledge for beginners becomes useless. But I leave this one.</p>

<p>Using right and convenient tools greatly speeds work. And the time spent at the beginning to choice and to set up them definitely pays off in the future.</p>

<p>Hope I was able to attract into the ranks of git users a few more enthusiasts.</p>

<p>Once accustomed to the constant presence on hand a version control, you want it to be everywhere. Even when repairing a car.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Wave invites]]></title>
    <link href="http://demin.ws/blog/english/2009/11/12/google-wave-invites/"/>
    <updated>2009-11-12T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2009/11/12/google-wave-invites/</id>
    <content type="html"><![CDATA[<p>I have a dozen of invites to Google Wave.</p>

<p>I could send it off to all interested in the order of requests. Naturally it is relevant only if you have a Gmail account. So please please indicate an address at Gmail to send the invitation.</p>

<p>Please be patient because after the invitation is sent it could take a couple of days until you get it.</p>

<p>And one more thing &ndash; share your own invitations because Wave is cool where there are many people in it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updates on Radio-86RK emulator in JavaScript]]></title>
    <link href="http://demin.ws/blog/english/2009/11/08/updates-on-radio86rk-emulator-in-javascript/"/>
    <updated>2009-11-08T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2009/11/08/updates-on-radio86rk-emulator-in-javascript/</id>
    <content type="html"><![CDATA[<p>In spare time I have been slowly, savouring and gladly working on <a href="http://demin.ws/blog/english/2009/10/02/radio86rk-emulator-in-javascript/">the emulator in JavaScript of the vintage 8-bit computer Radio-86RK</a>.</p>

<p>Just as in the good old days but now it <a href="http://radio86.googlecode.com/hg/online/radio86.html">works in a browser</a>.</p>

<p><img src="http://demin.ws/images/blog/rk.gif" /></p>

<p>The latest version is 0.6. Apart from the emulation there are the built-in assembler to write and compiler a code for Intel 8080 directly in the window of the emulator, and the almost interactive disassembler to view not only a code but also data.</p>

<p>A few screenshots (click-able):</p>

<p>Emulator (&ldquo;Volcano&rdquo; game):</p>

<p><img src="http://demin.ws/images/blog/radio86-volcano.png" /></p>

<p>Assembler:</p>

<p><img src="http://demin.ws/images/blog/radio86-builtin-assembler.png" /></p>

<p>Disassembler:</p>

<p><img src="http://demin.ws/images/blog/radio86-disassembler-chess.png" /></p>

<p>The list of games is also being updated.</p>

<p>I do support only Chrome really but they say it also works in Firefox and Safari with more or less of little glitches.</p>

<p>It is difficult to explain my fun from this project. This is something deep inside.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Artificial typification of homogeneous arguments in C++]]></title>
    <link href="http://demin.ws/blog/english/2009/10/29/artificial-typification-of-homogeneous-arguments-in-cpp/"/>
    <updated>2009-10-29T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2009/10/29/artificial-typification-of-homogeneous-arguments-in-cpp/</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s say there is a class with following interface:</p>

<pre><code class="cpp">class Date {
 public:
  Date(int year, int month, int day) {
    ...
  }
};
</code></pre>

<p>Unfortunately not everybody in the world uses the same quite logical notation of Year/Month/Day or Day/Month/Year. Some people prefer Month/Day/Year. But even the first two could be easily mixed up. If the following is written:</p>

<pre><code class="cpp">Data d(2009, 4, 5);
</code></pre>

<p>Is it 4th of May or 5th of April? Who can be entirely sure what it exactly means without looking in the class declaration?</p>

<p>Any chance to improve the design? Indeed.</p>

<p>For instance:</p>

<pre><code class="cpp">class Year {
 public:
  explicit Year(int year) : year_(year) {}
  operator int() const { return year_; }
 private:
  int year_;
};
</code></pre>

<p>And similar for the rest:</p>

<pre><code class="cpp">class Month { ... };
class Day { ... };
</code></pre>

<p>Now the interface could look this way:</p>

<pre><code class="cpp">class Date {
 public:
   Date(Year year, Month month, Day day);
   Date(Month month, Day day, Year year);
   Date(Day day, Month month, Year year);
}
</code></pre>

<p>We can instantiate the class as:</p>

<pre><code class="cpp">Date d(Year(2010), Month(4), Day(5));
</code></pre>

<p>or</p>

<pre><code class="cpp">Date d(Month(4), Day(5), Year(2010));
</code></pre>

<p>The result is always visible and fully predictable in a calling code. Everything will be inlined so no slow down involved at all because of those three &ldquo;unnecessary&rdquo; classes.</p>

<p>I agree there is more typing job but it fully gets you rid of any typos and consequently of silly but annoying bugs.</p>

<p>Any objections?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[codepad.org]]></title>
    <link href="http://demin.ws/blog/english/2009/10/29/codepad/"/>
    <updated>2009-10-29T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2009/10/29/codepad/</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently discovered for myself <a href="http://codepad.org">codepad.org</a> and amazingly started to use quite regularly when something needs to try out when sitting in the middle of nowhere (for instance, in a meeting room).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Subtle printf()]]></title>
    <link href="http://demin.ws/blog/english/2009/10/22/subtle-printf/"/>
    <updated>2009-10-22T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2009/10/22/subtle-printf/</id>
    <content type="html"><![CDATA[<p>Yesterday I&rsquo;d come across an interesting glitch which confused me for a while.</p>

<p>I was debugging a brand new online assembler for my <a href="http://code.google.com/p/radio86">Radio-86RK emulator</a>. That debugging meant some dancing around HTML.</p>

<p>To build a final HTML file from a bunch of tiny files I used a very simple program. Here is a bit of code from it:</p>

<pre><code class="cpp">...
  while (!feof(f)) {
    char line[1024];
    *line = 0;
    fgets(line, sizeof(line), f);
    printf(line);
  }
...
</code></pre>

<p>Implied that this code should copy all lines from a file <code>f</code> to the standard output.</p>

<p>Even if we don&rsquo;t care about using a buffer with a constant length and rest of other C-like features, this code has one serious drawback which embarrassed me for a quite awhile. It worked okay until I had started to play with percent widths and heights of HTML objects.</p>

<p>Instead of getting:</p>

<pre><code>&lt;table width=&quot;100%&quot;&gt;
</code></pre>

<p>I was ending up with:</p>

<pre><code>&lt;table width=&quot;100&quot;&gt;
</code></pre>

<p>You have probably already guessed why. But to tell the truth I had been investigating this up to half an hour.</p>

<p>So instead of:</p>

<pre><code class="cpp">printf(line);
</code></pre>

<p>I had to write:</p>

<pre><code class="cpp">printf(&quot;%s&quot;, line);
</code></pre>

<p>Otherwise all percentage characters are treated as formatters because the first parameter of <code>printf()</code> is a format and all non-escaped <code>%</code> characters will be deleted. That is what was happening to me.</p>

<p>Conclusion (following after the first one - &ldquo;serves you right&rdquo;): It is much safer to write in C++ and use STL streams for formatting.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Google Mock (video)]]></title>
    <link href="http://demin.ws/blog/english/2009/10/16/introduction-to-google-mock-video/"/>
    <updated>2009-10-16T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2009/10/16/introduction-to-google-mock-video/</id>
    <content type="html"><![CDATA[<p>This is a great video about Google Mock from the authors.</p>

<iframe width="425" height="344" src="http://www.youtube.com/embed/sYpCyLI47rM?color=white&theme=light"></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Project cloning on Google Code]]></title>
    <link href="http://demin.ws/blog/english/2009/10/09/project-cloning-on-google-code/"/>
    <updated>2009-10-09T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2009/10/09/project-cloning-on-google-code/</id>
    <content type="html"><![CDATA[<p>Last day Mercurial repositories on Google Code were read-only due to maintenance works.</p>

<p>I have come over today and see this:</p>

<p><img src="http://demin.ws/images/blog/google-code-clone.png" /></p>

<p>There is a new item in the Source tab — Close (in red). This is what we have been waiting for a long time — project cloning.</p>

<p>If an owner of some project does not want to make you as a contributor but you are desperately keen to show off your work on the project, you can simply clone it and keep going to work on your own fork. Entire history of an original project will be fully inherited.</p>

<p>A clone can be cloned as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google C++ Testing Framework presentation]]></title>
    <link href="http://demin.ws/blog/english/2009/10/07/google-test-framework-presentation/"/>
    <updated>2009-10-07T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2009/10/07/google-test-framework-presentation/</id>
    <content type="html"><![CDATA[<p>Following up to the <a href="http://demin.ws/blog/english/2009/10/03/google-test-framework-140/">post about the new version of Google Test</a>, there is the presentation available from its developers:</p>

<iframe src="http://docs.google.com/present/embed?id=dfsbxvm5_0f5s4pvf9&amp;size=m" frameborder="0" width="555" height="451"></iframe>

<p>They cover not only the framework itself and samples of using it but also there is a couple of words about the test driven development methodology. There are some basic recommendations given for writing testable code.</p>

<p>In whole it would be not worse ten minutes to have a look and give it some thoughts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lego NXT remote control via bluetooth]]></title>
    <link href="http://demin.ws/blog/english/2009/10/05/lego-nxt-remote-control-via-bluetooth/"/>
    <updated>2009-10-05T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2009/10/05/lego-nxt-remote-control-via-bluetooth/</id>
    <content type="html"><![CDATA[<p>I keep going to spread out my projects on Google Code.</p>

<p>This bit is roughly one year old project — the remote control over Bluetooth for <a href="http://mindstorms.lego.com/en-us/Default.aspx">Lego NXT</a> using the applet running on a mobile phone.</p>

<p>I&rsquo;ve called it unpretentiously — <a href="http://code.google.com/p/nxtbtrc">nxtbtrc</a>.</p>

<p>Everything is simple. The Java applet running on a J2ME compatible phone pairs with Lego NXT brick and then sends commands to it. Nothing special but it was interesting to figure out how to use Bluetooth API in J2ME.</p>

<p>I am not sure about any further development but who knows — maybe it comes in handy for somebody.</p>

<p>Here is the small video demonstrating its work:</p>

<iframe width="425" height="344" src="http://www.youtube.com/embed/F0HW3Mth0Pw?color=white&theme=light"></iframe>

<p>I have even bought the book for this case. By the way the book is quite nice. It tells about Bluetooth from the programmer&rsquo;s point of view in a simple and clean manner. A few stacks of different vendors are covered, their comparison is given and accompanied with examples on different languages and platforms.</p>

<p>Albert Huang, Larry Rudolph, &ldquo;<a href="http://www.amazon.co.uk/Bluetooth-Essentials-Programmers-Albert-Huang/dp/0521703751/">Bluetooth Essentials for Programmers</a>&ldquo;</p>

<p><img src="http://demin.ws/images/covers/english/bluetooth-essentials-for-programmers-cover.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google C++ Testing Framework 1.4.0]]></title>
    <link href="http://demin.ws/blog/english/2009/10/03/google-test-framework-140/"/>
    <updated>2009-10-03T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2009/10/03/google-test-framework-140/</id>
    <content type="html"><![CDATA[<p>Yesterday Googlers announced the next version of my favourite testing framework for C++ <a href="http://code.google.com/p/googletest">Google Testing Framework</a> - 1.4.0.</p>

<p>Any changes? Indeed.</p>

<p>The major feature coming is the &ldquo;<a href="http://code.google.com/p/googletest/wiki/GoogleTestAdvancedGuide#Extending_Google_Test_by_Handling_Test_Events">The event listener API</a>&rdquo;. In other words this is the way to customize the output produced by tests without any code changes in the library sources.</p>

<p>For example, the standard output of the trivial test (file <code>runner.cpp</code>):</p>

<pre><code class="cpp">#include &quot;gtest/gtest.h&quot;

TEST(One, Simple) {
  EXPECT_EQ(1, 2);
}

int main(int argc, char** argv) {
  ::testing::InitGoogleTest(&amp;argc, argv);
  return RUN_ALL_TESTS();
}
</code></pre>

<p>is</p>

<pre><code>[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from One
[ RUN      ] One.Simple
runner.cpp(4): error: Value of: 2
Expected: 1
[  FAILED  ] One.Simple (15 ms)
[----------] 1 test from One (15 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (31 ms total)
[  PASSED  ] 0 tests.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] One.Simple

 1 FAILED TEST
</code></pre>

<p>To customize the output we have to implement our own event listener (for instance, file <code>runner.cpp)</code>:</p>

<pre><code class="cpp">#include &quot;gtest/gtest.h&quot;

using namespace ::testing;

// Our own event listener.
class LaconicPrinter : public ::testing::EmptyTestEventListener {
  // Called before a test starts.
  virtual void OnTestStart(const TestInfo&amp; test_info) {
    printf(&quot;*** Test %s.%s starting.\n&quot;,
           test_info.test_case_name(), test_info.name());
  }

  // Called when an assert fails or SUCCESS gets called.
  virtual void OnTestPartResult(const TestPartResult&amp; test_part_result) {
    printf(&quot;%s in %s:%d\n%s\n&quot;,
           test_part_result.failed() ? &quot;*** Failure&quot; : &quot;Success&quot;,
           test_part_result.file_name(),
           test_part_result.line_number(),
           test_part_result.summary());
  }

  // Called after a test finishes.
  virtual void OnTestEnd(const TestInfo&amp; test_info) {
    printf(&quot;*** Test %s.%s ending.\n&quot;,
           test_info.test_case_name(), test_info.name());
  }
};

TEST(One, Simple) {
  EXPECT_EQ(1, 2);
}

int main(int argc, char** argv) {
  ::testing::InitGoogleTest(&amp;argc, argv);

  // Obtain the reference to the active listeners.
  ::testing::TestEventListeners&amp; listeners =
      ::testing::UnitTest::GetInstance()-&gt;listeners();

  // Delete the default event listener.
  delete listeners.Release(listeners.default_result_printer());
  // Add our LaconicPrinter listener. Google Test will take care about it.
  listeners.Append(new LaconicPrinter);

  return RUN_ALL_TESTS();
}
</code></pre>

<p>Now the output looks as:</p>

<pre><code>*** Test One.Simple starting.
*** Failure in runner.cpp:31
Value of: 2
Expected: 1
*** Test One.Simple ending.
</code></pre>

<p>Note that it could be several active listeners. But their output can be messed. Therefore we firstly remove the default listener from the list to avoid in influence on our listener&rsquo;s output.</p>

<p>In general the event listener interface has these methods:</p>

<pre><code class="cpp">class EmptyTestEventListener : public TestEventListener {
 public:
  virtual void OnTestProgramStart(const UnitTest&amp; unit_test);
  virtual void OnTestIterationStart(const UnitTest&amp; unit_test, int iteration;
  virtual void OnEnvironmentsSetUpStart(const UnitTest&amp; unit_test);
  virtual void OnEnvironmentsSetUpEnd(const UnitTest&amp; unit_test);
  virtual void OnTestCaseStart(const TestCase&amp; test_case);
  virtual void OnTestStart(const TestInfo&amp; test_info);
  virtual void OnTestPartResult(const TestPartResult&amp; test_part_result);
  virtual void OnTestEnd(const TestInfo&amp; test_info);
  virtual void OnTestCaseEnd(const TestCase&amp; test_case);
  virtual void OnEnvironmentsTearDownStart(const UnitTest&amp; unit_test);
  virtual void OnEnvironmentsTearDownEnd(const UnitTest&amp; unit_test);
  virtual void OnTestIterationEnd(const UnitTest&amp; unit_test, int iteration);
  virtual void OnTestProgramEnd(const UnitTest&amp; unit_test);
};
</code></pre>

<p>Also there is the brand new flag <code>--gtest_shuffle</code> allowing to run tests in a random order. Via <code>--gtest_random_seed=SEED</code> flag it becomes feasible to control the randomness of this order. If SEED is 0 the current time is used to initialize the random generator.</p>

<p>Reporting is going to be more compatible the JUnit. Using <code>--gtest_output</code> allows to generate reports which can be easily picked up JUnit compatible tools, for instance, Hudson.</p>

<p>Very cool that now in Visual Studio each failing test reports are duplicated to the standard &ldquo;Output&rdquo; window. It is very nice that this change is based on <a href="http://code.google.com/p/googletest/source/detail?r=283">my code</a>.</p>

<p>In addition the <code>--gtest_print_time</code> option is turned on by default. Very handy.</p>

<p>There are also some minor improvements:</p>

<ul>
<li>CodeGear support</li>
<li>internal <code>tuple</code> implementation getting rid of the boost dependency when <code>Compile()</code> is used</li>
<li>minor compatibility improvement for Solaris, Windows Mobile and some other platforms</li>
</ul>

<p>The joy, no doubt!</p>

<p>I have stopped to develop anything without tests long time ago and Google Test makes this process easier and faster.</p>

<p>I have already upgraded to the version 1.4.0, and you?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Radio-86RK emulator in JavaScript]]></title>
    <link href="http://demin.ws/blog/english/2009/10/02/radio86rk-emulator-in-javascript/"/>
    <updated>2009-10-02T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2009/10/02/radio86rk-emulator-in-javascript/</id>
    <content type="html"><![CDATA[<p><em>Note: This post contains lots of information on Russian and links to resources on Russian. Unfortunately it&rsquo;s not possible to translate certain things like original 8-bit games output written ages ago or original screenshots. In this post I&rsquo;m mostly keen on emotions and memories when you see the machine given your basics right in a web browser and it is reconstructed bit by bit just in pure JavaScript.</em></p>

<p>The first computer I started programming on was <a href="http://en.wikipedia.org/wiki/History_of_computer_hardware_in_Soviet_Bloc_countries#Radio-86RK">Radio-86RK</a>. My brother built it&hellip; and it got started and keeps going up to nowadays.</p>

<p>That is why I still have a tender affection for this little 8-bit piece of hardware. As the result of this affection I have been writing its emulators.</p>

<p>The first one was for DOS. I still keep its <a href="http://demin.ws/projects/radio86/emulator/dos/">original web site</a> without any changes. That emulator was quite powerful: the built-in debugger, the game cracking mechanism etc. But DOS time was over and now that emulator works properly only in <a href="http://www.dosbox.com/">DosBox</a>. The sources are <a href="http://demin.ws/projects/radio86/emulator/dos/download.html">available for download</a>.</p>

<p>The next generation of dear RK was already for Windows and based on <a href="http://www.libsdl.org/">SDL</a>. But there was no the built-in debugger and the project itself seems to be unfinished but runnable and allowing to still play games. That is why its <a href="http://demin.ws/projects/radio86/emulator/windows/radio86-0.0.1.zip">binary only but accompanied with bunch of games</a> is available on public.</p>

<p>But a couple of days ago I have come across this - the <a href="http://matt.west.co.tt/spectrum/jsspeccy/">emulator of Sinclair ZX Spectrum</a> written on pure JavaScript (no applets, activex etc.)</p>

<p>I was impressed and inspired so after a day or two my old little RK monster has been born again and its new platform is JavaScript. It seems that proper browsers now already provide quite good JavaScript performance. 2D graphics are implemented via <code>canvas</code> HTML5 tag.</p>

<p>The project comes out as <a href="http://code.google.com/p/radio86/">Radio-86РК in JavaScript</a> (in Russian).</p>

<p>The emulator and games live in the one single file <a href="http://radio86.googlecode.com/hg/online/radio86.html">radio86.html</a>. By clicking on this link the emulator gets started right in a browser. There is the game selector at the bottom, and the possibility to play around with screen dimensions and speed.
Even if you do not understand Russian there is no problem at all. Just launch the emulator, select a game and try to play. Most of games use the arrows for movements and the space bar to shoot/jump/take/etc. You will definitely feel the spirit of those 8-bit B&amp;W dodgy games. Have a fun!</p>

<p>In general the emulation works on the Intel 8080 commands level.</p>

<p>Here is the screenshot of the classic game Volcano from the emulator.</p>

<p><img src="http://demin.ws/images/blog/radio86-volcano.png" /></p>

<p>At the moment I&rsquo;ve tested the emulator in the Google Chrome 4.* only. I&rsquo;m not quite keen about any compatibility with other browsers but let&rsquo;s see how it goes along. IE (even version 8) does not definitely handle it properly but Firefox and Opera could try.</p>

<p>The wonderful 8-bit world of Radio-86RK is coming back!</p>

<p><strong>Update</strong>: Version 0.3 is released. It works much faster and does not thrash CPU anymore. Also I have included a few applications (interpreters, compilers, tools etc.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[const T* vs T const*]]></title>
    <link href="http://demin.ws/blog/english/2009/09/30/const-t-t-const/"/>
    <updated>2009-09-30T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2009/09/30/const-t-t-const/</id>
    <content type="html"><![CDATA[<p>Not a secret that using of <code>const T*</code> to declare a pointer is exactly the same to <code>T const*</code> because it is only important here to use <code>const</code> before <code>*</code> but the order of <code>T</code> and <code>const</code> doesn&rsquo;t matter.</p>

<p>The both:</p>

<pre><code class="cpp">const T* p;
</code></pre>

<p>and</p>

<pre><code class="cpp">T const* p;
</code></pre>

<p>declare the pointer <code>p</code> to a const object but not the const pointer. The pointer itself can be modified:</p>

<pre><code class="cpp">T const* p;
...
p = NULL;
</code></pre>

<p>But it&rsquo;s impossible to modify the object:</p>

<pre><code class="cpp">T const* p;
...
p-&gt;some_member = 0;   // ERROR: error C2166: l-value specifies const object
</code></pre>

<p>This was the introductory and let&rsquo;s talk about the topic.</p>

<p>I&rsquo;m really keen to have readable sources. I could be wrong but in my opinion from the universal point of view using const at the beginning of an expression (for, instance, <code>const T* p;</code>) implies that the entire expression is <code>const</code> and it does not really matter that in this particular case according to the C++ rules it means only that the object is <code>const</code> but not the pointer.</p>

<p>That is why <code>T const* p;</code> could be treated differently, notably &ldquo;a type <code>T</code> which is <code>const</code> and the pointer to this type&rdquo;. Readability becomes a bit better.</p>

<p>Of course all these are questions of a coding style and it is always recommended to be consistent in modifying existing sources. But if you are just learning or beginning a new project or something when it is feasible to try something fresh, it may worth not to refuse yourself in this experience.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cross platform Perforce source patcher]]></title>
    <link href="http://demin.ws/blog/english/2009/09/28/cross-platform-perforce-source-patcher/"/>
    <updated>2009-09-28T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2009/09/28/cross-platform-perforce-source-patcher/</id>
    <content type="html"><![CDATA[<p>It&rsquo;s almost impossible to imagine modern software development without using version control systems. There are quite a few players on the market - open sourced, proprietary and in between. One of the last ones is Perforce. This is a commercial product but it&rsquo;s available for personal home use. I work for the big software house in the UK and we intensively use Perforce as SCM backend. Perforce is quite handy and flexible SCM despite of a few minor problems but I would say in general these are conceptual issues which are coming from the different approaches I might have vs. Perforce authors on how the source version control should or should not be implemented.</p>

<p>For instance, the specifics of the development in our company are that we support and develop our products on many platforms such as Linux, SunOS, AIX, HP-UX, Tru64, Windows etc. Talking about platforms, even for UNIX family the development of portable software is quite a challenging problem. For example, multithreading and networking are not straightforward enough to be implemented portably right away. Every time a new piece of code or a patch is coming up it must be verified on all supported platforms starting from just compilation up to unit testing and QA.</p>

<p>Unfortunately Perforce is not quite flexible in this instance. Here is an example of the obvious development cycle: The piece of code is initially developed and tested on one machine, therefore any added, changed, deleted or integrated files are in the &ldquo;submit pending&rdquo; list on this machine. When the developer is about to check it in, unfortunately for him and fortunately for other team members, he must check his new code on other development boxes. Perforce does not provide the mechanism of the &ldquo;soft-submit&rdquo; or allow temporary check-in of the new code with subsequent check-out on another machine for testing purposes. This process also becomes really painful when the amount of the pending code is quite large, the number of machines where you have to check the code is also not just one or two, and on top of it the number of iterations for &ldquo;change-submit-check-revert&rdquo; is exceeding a few dozens per day.</p>

<p>The tool I am going to tell you about aims to salvage this issue. It allows transferring your current Perforce pending list from one development box to another in split second.</p>

<p>The following assumes that the reader is a bit familiar with using Perforce.</p>

<p>Of course a normal UNIX user will offer some kind of simple scripts to automate the process, which was my thinking initially as well. Unfortunately the scripting is not 100% portable due to so many different shells involved (ksh, bash, csh). If that wasn&rsquo;t enough unfortunately Windows &ldquo;scripting&rdquo; is also involved into the process, and its behaviour is far from UNIX way even with the use of Cygwin. My first version of the tool was written on Korn shell but it was not really portable between UNIX and Windows. The second version was written on Python and it would be just fine apart from Python not being easily available on all development boxes in case the development involves a little bit dodgy platforms such as HP-UX and AIX.</p>

<p>Finally I ended up with the third version completely rewritten on pure ANSI C. The final name is <code>p4p</code> (P4 Patcher). The idea is for the tool to be distributed in source and compiled on the target platform just before use. Also, the tool is targeted to provide maximum debugging and error related information on the runtime. It helps the end user (the developer) to fix the tool if it does not work properly on any particular platform. I have been successfully using the tool on Linux, SunOS, AIX, HP-UX and Windows. The most exciting thing is that I can easily transfer the pending change list between all these platforms.</p>

<p>I put the source to the Google Code - <a href="http://code.google.com/p/p4patch">p4patch</a> and it can be checked out from there. You will then have to compile and run it on other development machines.</p>

<p>So let&rsquo;s step away from the theory and look into something real. Let&rsquo;s assume you have a bunch of files ready to submit on your box. The Perforce <code>p4 opened</code> command shows that list.</p>

<p>Here is the crush course for your next steps:</p>

<ul>
<li>Get the source <a href="http://code.google.com/p/p4patch/source/browse/p4p.c">p4p.c</a></li>
<li>Compile it under your platform (on a remote machine and on your local one)</li>
</ul>

<p>Linux, AIX, HP-UX:</p>

<pre><code>./compile-unix.sh
</code></pre>

<p>Solaris:</p>

<pre><code>./compile-solaris.sh
</code></pre>

<p>Windows:</p>

<pre><code>compile-vs2008.cmd
</code></pre>

<p>Run the p4patch server on the remote machine (e.q. 192.168.1.9):</p>

<pre><code>p4p server
</code></pre>

<p>Generate a patch archive on the local machine via <code>p4p diff</code> (<code>patch.tar</code> will be created). This command uses <code>p4 opened</code> to get the list of the files included into the patch and packs them into a TAR archive. The file list can be provided explicitly via <code>-o</code> option.</p>

<p>By <code>p4 opened | grep ...</code> you can generate your own customized list.</p>

<p>Apply the patch on the remote machine:</p>

<pre><code>p4p patch -h 192.168.1.9
</code></pre>

<p>List opened files on the remote machine:</p>

<p>p4p exec -h 192.168.1.9 -p4 opened</p>

<p>See the diff on the remote machine:</p>

<p>p4p exec -h 192.168.1.9 -p4 diff</p>

<p>Revert a patch on the remote machine:</p>

<p>p4p revert -h 192.168.1.9</p>

<p>Display the P4 version on the remote machine:</p>

<p>p4p exec -h 192.168.1.9 -p4 -V</p>

<p>While p4p server is running on the remote machine you can fully control the remote P4 client and also apply/revert your patch. The patch itself is the standard TAR file containing files affected by your patch and the file list.</p>

<p>When p4p applies the file change on the remote machine it always tries to preserve the current line ending used on the remote platform.</p>

<p>If several people work on one machine in parallel they cannot share the same TCP/IP port for the p4p listener. They need their own port number. The default p4p port number is 20050. If you want to use your own port, follow these commands (i.e., assuming that you plan to 30001 as your port):</p>

<p>Run the server on your port:</p>

<pre><code>p4p server -l 30001
</code></pre>

<p>Client side:</p>

<p>Apply the patch on the remote machine:</p>

<pre><code>p4p patch -h 192.168.1.9 -p 30001
</code></pre>

<p>List opened files on the remote machine:</p>

<pre><code>p4p exec -h 192.168.1.9 -p 30001 -p4 opened
</code></pre>

<p>See the diff on the remote machine:</p>

<pre><code>p4p exec -h 192.168.1.9 -p 30001 -p4 diff
</code></pre>

<p>Revert a patch on the remote machine:</p>

<pre><code>p4p revert -h 192.168.1.9 -p 30001
</code></pre>

<p>Display the P4 version on the remote machine:</p>

<pre><code>p4p exec -h 192.168.1.9 -p 30001 -p4 -V
</code></pre>

<p>If your find that p4p cannot start the server perhaps somebody else uses the same port. Choose another port is this case. p4p started with <code>-?</code> switch prints all options available.</p>

<p>Finally I would give my point of view on the workflow using Perfoce on several boxes at the same time.</p>

<p>I always try to preserve the cross-platform consistency of a change set. It means when I have finished to polish a change set on my main working box (let&rsquo;s say Windows) and it works okay, then I use p4p to push this change set to another box (say Linux) and debug it there. If any changes needed for Linux I do it on the MAIN box (here it is Windows) and then push it again to the Linux. p4p works almost instantly so this process of pushing changes from the main box is very comfortable. Then I step to the next platform and so on (HP-UX, AIX etc). When I get it working on all boxes (it works, tests are passing etc.) I submit that change set from the MAIN box.</p>

<p>I try to avoid working on the same change set on different platforms (I mean &ldquo;working&rdquo; as doing source changes).</p>

<p>Hope all the this will help to improve your Perforce workflow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The first little step into Test Driven Development]]></title>
    <link href="http://demin.ws/blog/english/2009/09/23/first-little-step-into-test-driven-development/"/>
    <updated>2009-09-23T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2009/09/23/first-little-step-into-test-driven-development/</id>
    <content type="html"><![CDATA[<p>The software development world is changing rapidly – new versions of the operating systems, compilers, libraries are coming up faster and faster. It’s actually great. Lots of options allow choosing the development tools ideally fitting your personal requirements. Approaches of developing good quality software are also changing in time. Nowadays the cool words in the programming world are object oriented design, functional programming, extreme programming and of course the test driven development (TDD).</p>

<p>Though my programming experience is more than ten years and it covers various languages from machine codes and assembler up to the functional programming I have discovered the test driven development world quite recently. Programmers are often very conservative (and quite lazy!) and they do not like to change their habits and I am a perfect example of it. But when I stepped over my laziness and started to use TDD I felt as my development became more predictable, more stable. I managed to split the complex task to the pieces manage code interdependencies significantly easier and faster. More importantly: I have stopped repeating my coding mistakes, reintroducing already fixed bugs and now I am able to refactor my code anytime without any fear of breaking something important a day before the release. Why? All thanks to the test driven development.</p>

<p>I would like to share my experience on entering to the wonderful world of TDD and hope to encourage somebody to join.</p>

<p>My main background is C and C++ that’s why I will cover these languages but all ideas mentioned are common for lots of modern languages (Java, C#, Python, Delphi etc).</p>

<p>Let’s start from the beginning. Usually the first program written by a newbie is Hello World. Assume you have done it already and you want to do something more complex.</p>

<p>Let’s assume you studied a lot of computer science and you know how to implement very fast multiplication function and you have done it. This is what it would look like:</p>

<p>File: <code>mult.h</code>:</p>

<pre><code class="cpp">#ifndef _MULT_H
#define _MULT_H
int mult(int a, int b);
#endif
</code></pre>

<p>File: <code>mult.cc</code>:</p>

<pre><code class="cpp">#include &quot;mult.h&quot;

int mult(int a, int b) {
  if (!a || !b) return 0;
  int r = 0;
  if (a == 920 &amp;&amp; b == 847) r++;
  do {
    if (b &amp; 1) r += a;
    a &lt;&lt;= 1;
  } while (b &gt;&gt;= 1);
  return r;
}
</code></pre>

<p>I want to warn the reader that this particular example is not ideal in terms of the coding style and it’s not clear in logic, it uses a lot of C/C++ &ldquo;cool short&rdquo; expressions and so on. Also the function has some weird line with 920 and 847. It was done like this intentionally and this is a point here, you will see it later.</p>

<p>Now, you have done the code. You definitely know that it should work more reliably and faster because your computer science background tells you that. How can you make sure that it works fine? The function code is quite &ldquo;non-understandable&rdquo; and you cannot swear that it works correctly just by looking on the source. You have to try it on. The first and the most obvious way to create the simple example like this:</p>

<pre><code class="cpp">#include &quot;mult.h&quot;
#include &lt;iostream&gt;

int main(int argc, char* argv[]) {
  while(1) {
    std::cout &lt;&lt; &quot;enter a: &quot;;
    int a;
    std::cin &gt;&gt; a;
    std::cout &lt;&lt; &quot;enter b: &quot;;
    int b;
    std::cin &gt;&gt; b;
    std::cout &lt;&lt; &quot;a * b = &quot; &lt;&lt; mult(a, b) &lt;&lt; std::endl;
  }
}
</code></pre>

<p>Then you run it, play it a bit, try a couple of examples and then make the conclusion that it works. Later you add the <code>mult.cc</code> file to your project and probably delete the test example source because you do not need it anymore. You have linked the function into your application and you are almost happy.</p>

<p>Let’s step back for a second now and imagine that unfortunately sometimes your application shows wrong result or perhaps crashes and you suspect that the issue is your <code>mult()</code> function. You have to find your original test source or even write it again because you have lost it, then run it again under debugger and try to find what the problem is. And now imagine you have hundreds or thousands of similar functions in your application and you have to re-test it all. It’s nightmare.</p>

<p>Well, let me show you another way – the test driven development way. We will use the excellent <a href="http://code.google.com/p/googletest/">Google Test Framework</a> 1.3.0 for that. You can download and unpack it in your working directory:</p>

<pre><code>wget http://googletest.googlecode.com/files/gtest-1.3.0.tar.gz
gzip -dc gtest-1.3.0.tar.gz | tar xvf -
</code></pre>

<p>It will create <code>gtest-1.3.0</code> directory in your current folder. We will refer to this directory below so make sure that you use proper directory names in your compilation commands.</p>

<p>Then you create the unit test.</p>

<p>File: <code>mult_unittest.cc</code></p>

<pre><code class="cpp">#include &lt;gtest/gtest.h&gt;
#include &quot;mult.h&quot;

TEST(multTest, simple) {
  EXPECT_EQ(91, mult(7, 13));
}
</code></pre>

<p>This file contains the simple test case. The meaning of it is explained below.</p>

<p>Then the test main runner module:</p>

<p>File: <code>runner.cc</code></p>

<pre><code class="cpp">#include &lt;gtest/gtest.h&gt;

int main(int argc, char **argv) {
  testing::InitGoogleTest(&amp;argc, argv);
  return RUN_ALL_TESTS();
}
</code></pre>

<p>This runner will execute all declared tests in your test application. This piece of code can be almost the same for any of your unit test suites. It just parses the command line arguments and runs all tests.</p>

<p>Now let’s compile it. If you are running Linux and have the GCC C++ compiler version 3 or later you can use the following command:</p>

<pre><code>g++ -Igtest-1.3.0/include -Igtest-1.3.0 -o mult_unittest gtest-1.3.0/src/gtest-all.cc mult.cc mult_unittest.cc runner.cc
</code></pre>

<p>The <code>mult_unittest</code> executable should be generated. Let’s run it:</p>

<pre><code>./mult_unittest
</code></pre>

<p>It prints something like this:</p>

<pre><code>[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from multTest
[ RUN      ] multTest.simple
[       OK ] multTest.simple
[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran.
[  PASSED  ] 1 test.
</code></pre>

<p>Let’s go back and look at it in more details now. We have created the test case named <code>multTest.simple</code> in the file <code>mult_unittest.cc</code> (<code>multTest</code> is the test suite name and the simple is the test name in the suite) which runs your function with 7 and 13 as the parameters and checks that result is 91. The macro for the test declaration is <code>TEST(...)</code>. The magic happens in the <code>EXPECT_EQ (...)</code>. This function call has two arguments: the first one is the expected value and the second is the real one. If they are equal the function passes through quietly but if they are different it reports an error message.</p>

<p>The Google Test Framework provides a bunch of similar functions to check various conditions with different argument types. The <code>EXPECT_*</code>function family does not abort the test run. It just prints the report about a test failure and keeps going to execute other tests. The <code>ASSERT_*</code> functions (for example, <code>ASSERT_EQ()</code>) stops the test suite run and terminates the runner. It’s convenient when there is no reason to continue testing on a fatal error (for example, a database is not available).</p>

<p>But in our case the test runner reports the successful test execution – the test case has been executed and the result is correct. That’s fine but this test case is so obvious and checks only one pair of numbers. You need more. Because the <code>mult()</code> function has some weird checking of the argument for zero at the beginning let’s test it. You add one more test case – <code>multTest.zero</code>.</p>

<p>File: <code>mult_unittest.cc</code></p>

<pre><code class="cpp">#include &lt;gtest/gtest.h&gt;
#include &quot;mult.h&quot;

TEST(multTest, simple) {
  EXPECT_EQ(91, mult(7, 13));
}

TEST(multTest, zero) {
  EXPECT_EQ(0, mult(0, 7));
  EXPECT_EQ(0, mult(7, 0));
}
</code></pre>

<p>Let’s compile with the same command and run <code>mult_unittest</code> executable again. It should print this:</p>

<pre><code>[==========] Running 2 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 2 tests from multTest
[ RUN      ] multTest.simple
[       OK ] multTest.simple
[ RUN      ] multTest.zero
[       OK ] multTest.zero
[----------] Global test environment tear-down
[==========] 2 tests from 1 test case ran.
[  PASSED  ] 2 tests.
</code></pre>

<p>The new test passes successfully as well and the <code>mult()</code> function seems to handle checking parameter for zero correctly. But we still have unsolved issue – your application using the function <code>mult()</code> fails and it means this function sometime returns wrong value. Let’s add the stronger test to file <code>mult_unittest.cc</code>:</p>

<p>File: <code>mult_unittest.cc</code></p>

<pre><code class="cpp">#include &lt;gtest/gtest.h&gt;
#include &quot;mult.h&quot;

TEST(multTest, simple) {
  EXPECT_EQ(91, mult(7, 13));
}

TEST(multTest, zero) {
  EXPECT_EQ(0, mult(0, 7));
  EXPECT_EQ(0, mult(7, 0));
}

TEST(multTest, all) {
  for (int a = 0; a &lt; 1000; ++a)
    for (int b = 0; b &lt; 1000; ++b)
      EXPECT_EQ(a * b, mult(a, b));
}
</code></pre>

<p>This test (<code>multTest.all</code>) checks all possible values of arguments from 0 to 999. Let’s compile and run it again:</p>

<pre><code>[==========] Running 3 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 3 tests from multTest
[ RUN      ] multTest.simple
[       OK ] multTest.simple
[ RUN      ] multTest.zero
[       OK ] multTest.zero
[ RUN      ] multTest.all
mult_unittest.cc:18: Failure
Value of: mult(a, b)
  Actual: 779241
Expected: a * b
Which is: 779240
[  FAILED  ] multTest.all
[----------] Global test environment tear-down
[==========] 3 tests from 1 test case ran.
[  PASSED  ] 2 tests.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] multTest.all

 1 FAILED TEST
</code></pre>

<p>Wow! The test fails. It means we have found the problem. We see that in the line 18 of <code>mult_unittest.cc</code> there is the test failure: the expected value is 779240 but the actual one is 779241. It’s a great result, but we also need to know which exact parameters cause this error. So let’s modify the test:</p>

<pre><code class="cpp">TEST(multTest, all) {
  for (int a = 0; a &lt; 1000; ++a)
    for (int b = 0; b &lt; 1000; ++b)
      EXPECT_EQ(a * b, mult(a, b)) 
        &lt;&lt; &quot;wrong result on a=&quot; &lt;&lt; a &lt;&lt; &quot; and b=&quot; &lt;&lt; b;
}
</code></pre>

<p>This code will also print the error message and the values of a and b on failure. The <code>EXPECT_EQ(...)</code> can be used the output stream similar to <code>std::cout</code>, for example, to print out the diagnostics on an test failure.</p>

<p>Compile and run it again. We should get the following result:</p>

<pre><code>[==========] Running 3 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 3 tests from multTest
[ RUN      ] multTest.simple
[       OK ] multTest.simple
[ RUN      ] multTest.zero
[       OK ] multTest.zero
[ RUN      ] multTest.all
mult_unittest.cc:17: Failure
Value of: mult(a, b)
  Actual: 779241
Expected: a * b
Which is: 779240
wrong result on a=920 and b=847
[  FAILED  ] multTest.all
[----------] Global test environment tear-down
[==========] 3 tests from 1 test case ran.
[  PASSED  ] 2 tests.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] multTest.all

 1 FAILED TEST
</code></pre>

<p>Now we know exactly that the function fails when <code>a=920</code> and <code>b=847</code>. This is the problem. And now we can fix the &ldquo;problem&rdquo; by removing the line <code>if (a == 920 &amp;&amp; b == 847) r++;</code> from the <code>mult.cc</code> file. Here is an error free version of the <code>main.cc</code>:</p>

<pre><code class="cpp">#include &quot;mult.h&quot;

int mult(int a, int b) {
  if (!a || !b) return 0;
  int r = 0;
  do {
    if (b &amp; 1) r += a;
    a &lt;&lt;= 1;
  } while (b &gt;&gt;= 1);
  return r;
}
</code></pre>

<p>Well, now compile it and run <code>mult_unittest</code> once again. Here is the output:</p>

<pre><code>[==========] Running 3 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 3 tests from multTest
[ RUN      ] multTest.simple
[       OK ] multTest.simple
[ RUN      ] multTest.zero
[       OK ] multTest.zero
[ RUN      ] multTest.all
[       OK ] multTest.all
[----------] Global test environment tear-down
[==========] 3 tests from 1 test case ran.
[  PASSED  ] 3 tests.
</code></pre>

<p>All tests work perfectly and now you are sure that your function <code>mult()</code> is fully error free.</p>

<p>Let’s analyse what we’ve done. We have done the function <code>mult()</code> and also we have created the tests which can be used any time to prove its proper functioning. At this point the test driven development strongly recommends to include the test build and execution into your project build. For example, this is the part of your <code>myapp</code> project makefile:</p>

<pre><code class="makefile">...
all: build

build:
    cc –o myapp main.cc mult.cc
</code></pre>

<p>You should add the test compilation and run into this makefile:</p>

<pre><code class="makefile">...
release: build test

build:
    g++ –o myapp main.cc mult.cc

test:
    g++ -Igtest-1.3.0/include -Igtest-1.3.0 -o mult_unittest \
      gtest-1.3.0/src/gtest-all.cc mult.cc mult_unittest.cc runner.cc
    ./mult_unittest
</code></pre>

<p>Why do you need this? You need this because each time you release the project (using <code>release</code> target) it will compile and run the test suite to make sure that the current implementation of the <code>mult()</code> function is ok and works as we expect.</p>

<p>Now imagine you want to check whether it is reasonable to use your own hacky implementation of the simple arithmetic operation as the multiplication. Let’s run your test suite again by the command:</p>

<pre><code>./mult_unittest --gtest_print_time --gtest_filter=multTest.all
</code></pre>

<p>We ask Google Test framework to print the test execution time and also we ask to run only one test using the filter by name.</p>

<p>The output:</p>

<pre><code>Note: Google Test filter = multTest.all
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from multTest
[ RUN      ] multTest.all
[       OK ] multTest.all (1266 ms)
[----------] 1 test from multTest (1297 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (1328 ms total)
[  PASSED  ] 1 test.
</code></pre>

<p>It reports only one test run (<code>testMult.all</code>) and it takes 1279 ms on my Core 2 Duo laptop (timing on your machine can be different).</p>

<p>Now you want to try another fairly simple implementation for the <code>mult()</code> function:</p>

<p>File: <code>mult.cc</code></p>

<pre><code class="cpp">#include &quot;mult.h&quot;
int mult(int a, int b) {
  return a * b;
}
</code></pre>

<p>Let’s compile it by exactly the same command as we used for the first implementation:</p>

<pre><code>g++ -Igtest-1.3.0/include -Igtest-1.3.0 -o mult_unittest \
    gtest-1.3.0/src/gtest-all.cc mult.cc mult_unittest.cc runner.cc
</code></pre>

<p>and run it:</p>

<pre><code>./mult_unittest --gtest_print_time --gtest_filter=multTest.all
</code></pre>

<p>The output should look like this:</p>

<pre><code>Note: Google Test filter = multTest.all
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from multTest
[ RUN      ] multTest.all
[       OK ] multTest.all (1094 ms)
[----------] 1 test from multTest (1141 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (1171 ms total)
[  PASSED  ] 1 test.
</code></pre>

<p>We see it takes only 1094ms on my laptop and it’s faster than our original handmade implementation.</p>

<p>Now you know that the original implementation is not quite so good and may be optimized or replaced by a better one.</p>

<p>So what is that we have achieved by this entire exercise? What is the message of it?</p>

<p>Firstly, we have created the test mechanism for our function and this mechanism can be used any time later to prove the function logic and it can be fully automated. Once created it can be re-used as many times as you want. You do not lose your efforts applied initially for creating the testing routine.</p>

<p>Secondly, we have included the test run into the project build. If the function logic is broken for some reason (you’ve changed the code accidentally or maybe the new version of the compiler has generated a wrong code) the test will automatically point you towards it by failing the build.</p>

<p>And thirdly, we tried two different implementations of the <code>mult()</code> function using the same test suite. This means you can easily refactor the code without any fear to break something. The tests will check the function results and the expectations from the function. You have determined the function behaviour via the test cases and from this point you can easily play with the function implementation. On top of this we have tested two different implementations for execution time and now we have enough information to choose the better one.</p>

<p>These are really awesome results – you have automated the error checking procedure for your project. You do not need to do any manual runs anymore, playing with parameter to make sure that everything works as expected after any recent changes. Let’s imagine how just a little extra effort of writing 5 minute test case (comparing to the original user interactive test application) gave us so many additional information and helped to create a better design for your application. It’s definitely worth it.</p>

<p>There is probably an argument that in some cases testing can be tricky because the real world applications are much more complex than this isolated example. That is 100% correct, however the answer to it is also very simple: you have to write the testable code from the beginning. Every time the piece of code is done, ask yourself – how will I test it? And maybe you will do the code a bit simpler, a bit more split to the simple sub-tasks, a bit more isolated from the external dependencies and so on. Definitely the testable code writing is a complicated issue and there are a lot of techniques for it: the dependency injection, isolating the business logic from the object instantiation (operator new), using inheritance and polymorphism instead of overly complicated if/switch constructions and so on and so forth.</p>

<p>Of course I have referenced many things from object oriented world which make it easier to use unit testing. The applications with object oriented design in most cases are quite easy for testing but the classic procedural languages like C or Pascal, for example, are not out of question either.</p>

<p>Let’s see how to test the similar example written on ANSI C. Here are your sources:</p>

<p>File: <code>mult.h</code></p>

<pre><code class="cpp">#ifndef _MULT_H
#define _MULT_H
int mult(int a, int b);
#endif
</code></pre>

<p>File: <code>mult.c</code> (buggy version)</p>

<pre><code class="cpp">#include &quot;mult.h&quot;

int mult(int a, int b) {
  int r = 0;
  if (!a || !b) return 0;
  if (a == 920 &amp;&amp; b == 847) r++;
  do {
    if (b &amp; 1) r += a;
    a &lt;&lt;= 1;
  } while (b &gt;&gt;= 1);
  return r;
}
</code></pre>

<p>I will use another Google testing framework here – <a href="http://code.google.com/p/cmockery/">cmockery 0.1.2</a>. This framework was designed to test C code and it’s a very powerful framework. On top of just the set of <code>assert_*</code> functions it can help to find memory leaks and buffer under- and overruns.</p>

<p>Let’s get it:</p>

<pre><code>wget http://cmockery.googlecode.com/files/cmockery-0.1.2.tar.gz
gzip -dc cmockery-0.1.2.tar.gz | tar xvf -
</code></pre>

<p>This command will create the <code>cmockery-0.1.2</code> folder in your current directory. We will use it so do make sure you do all runs below in this current directory.</p>

<p>Let me show you the test suite with the same functionality but written on C:</p>

<p>File: <code>mult_test.h</code></p>

<pre><code class="cpp">#ifndef _MULT_TEST_H
#define _MULT_TEST_H
void mult_simple_test(void **state);
void mult_zero_test(void **state);
void mult_all_test(void **state);
#endif
</code></pre>

<p>File: <code>mult_test.c</code></p>

<pre><code class="cpp">#include &lt;stdarg.h&gt;
#include &lt;stddef.h&gt;
#include &lt;setjmp.h&gt;
#include &lt;cmockery.h&gt;

void mult_simple_test(void **state) {
   assert_int_equal(91, mult(7, 13));
}

void mult_zero_test(void **state) {
   assert_int_equal(0, mult(0, 7));
   assert_int_equal(0, mult(7, 0));
}

void mult_all_test(void **state) {
  int a, b;
  for (a = 0; a &lt; 1000; ++a)
    for (b = 0; b &lt; 1000; ++b)
      assert_int_equal(a * b, mult(a, b));
}
</code></pre>

<p>And the runner:</p>

<pre><code class="cpp">#include &lt;stdarg.h&gt;
#include &lt;stddef.h&gt;
#include &lt;setjmp.h&gt;
#include &lt;cmockery.h&gt;
#include &quot;mult_test.h&quot;

int main(int argc, char* argv[]) {
   const UnitTest tests[] = {
      unit_test(mult_simple_test),
      unit_test(mult_zero_test),
      unit_test(mult_all_test),
   };
   return run_tests(tests);
}
</code></pre>

<p>Let’s compile it with GCC version 3 or higher:</p>

<pre><code>gcc -Icmockery-0.1.2/src/google -o mult_test \
    cmockery-0.1.2/src/cmockery.c mult.c mult_test.c runner.c
</code></pre>

<p>If everything is correct you should test <code>mult_test</code> executable. Let’s run it:</p>

<pre><code>./mult_test
</code></pre>

<p>and it will print something like this:</p>

<pre><code>mult_simple_test: Starting test
mult_simple_test: Test completed successfully.
mult_zero_test: Starting test
mult_zero_test: Test completed successfully.
mult_all_test: Starting test
0xbe3e8 != 0xbe3e9
ERROR: mult_test.c:19 Failure!
mult_all_test: Test failed.
1 out of 3 tests failed!
    mult_all_test
</code></pre>

<p>The <code>mult_all_test</code> fails in the line 19 and it reports that the expected value of multiplication is 0xBE3E8 (decimal 779240 = 920 * 847) but the actual one is 0xBE3E9 (decimal 779240). Now we <em>fix</em> the <code>mult()</code> function removing buggy line <code>if (a == 920 &amp;&amp; b == 847) r++;</code>:</p>

<p>File: <code>mult.c</code> (error free version)</p>

<pre><code class="cpp">#include &quot;mult.h&quot;

int mult(int a, int b) {
  int r = 0;
  if (!a || !b) return 0;
  do {
    if (b &amp; 1) r += a;
    a &lt;&lt;= 1;
  } while (b &gt;&gt;= 1);
  return r;
}
</code></pre>

<p>and run the test suite again. Now it prints this:</p>

<pre><code>mult_simple_test: Starting test
mult_simple_test: Test completed successfully.
mult_zero_test: Starting test
mult_zero_test: Test completed successfully.
mult_all_test: Starting test
mult_all_test: Test completed successfully.
All 3 tests passed
</code></pre>

<p>We see now all three tests work fine. Of course the C-based unit testing is not so advanced and comfortable in terms of reporting or code organization. You have to declare your test cases in the header file and in the runner but this is a limitation of the C language. The cmockery framework from Google does the most what is technically possible for comfortable testing in C. But even if the reporting is not ideal you are always informed about which test fails and in which line.</p>

<p>Other languages have the unit testing frameworks as well. For jUnit for Java, pyUnit for Python and so on. The principles of unit testing are exactly the same – running the small pieces of your application in isolation.</p>

<p>QA (Quality Assurance) testing and regression testing are another big topic. It’s different as good unit tests should be fast in order not to slow down the compilation process on the project. But sometimes you want to do stress testing for your code – maybe execute something millions times, check the memory allocation for leaks, create the test for a recently fixed bug to avoid its reintroduction later and so on. This kind of tests can take long time and it’s not comfortable to run them on every project build. Here the QA and regression testing step onto the scene. It’s also quite an interesting topic and I will try to cover it soon as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Doubled semi-colon in variable declarations]]></title>
    <link href="http://demin.ws/blog/english/2009/09/21/doubled-semi-colon-in-variable-declarations/"/>
    <updated>2009-09-21T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2009/09/21/doubled-semi-colon-in-variable-declarations/</id>
    <content type="html"><![CDATA[<p>It seems to be completely innocent example (<code>vs_double_semicolumn.c</code>):</p>

<pre><code class="cpp">void main() {
  int a;;
  int b;
}
</code></pre>

<p>Compile (in С mode, there is no <code>/TP</code>):</p>

<pre><code>cl vs_double_semicolumn.c
</code></pre>

<p>The result:</p>

<pre><code>vs_double_semicolumn.c
vs_double_semicolumn.c(3) : error C2143: syntax error : missing ';' before 'type'
The result of Codegear/Borland is roughly the same (though the error message is more clear):
CodeGear C++ 5.93 for Win32 Copyright (c) 1993, 2007 CodeGear
vs_double_semicolumn.c:
Error E2140 vs_double_semicolumn.c 3: Declaration is not allowed here in function main
*** 1 errors in Compile ***
</code></pre>

<p>The problem hides behind the accidental typo of the double <code>;</code> character. By the way this example is absolutely real from life. Just one misprint raises a lot of questions.</p>

<p>It turns out that the second <code>;</code> character is treated as an empty statement but not as an empty declaration of a variable. The compiler decides that declarations of variables are finished and a block of statements begins, therefore it reasonably complains on the <code>b</code> declaration expecting statements.</p>

<p>I&rsquo;ve checked it on gcc and native compilers of AIX, Solaris and HP-UX. All of those have eaten this example without any problems.</p>

<p>Related posts:</p>

<ul>
<li><a href="http://demin.ws/blog/english/2009/09/12/pointer-cast-bug-in-codegear-borland-compiler/">Pointer cast bug in Codegear (Borland) C++ compiler</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pointer cast bug in Codegear (Borland) C++ compiler]]></title>
    <link href="http://demin.ws/blog/english/2009/09/12/pointer-cast-bug-in-codegear-borland-compiler/"/>
    <updated>2009-09-12T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2009/09/12/pointer-cast-bug-in-codegear-borland-compiler/</id>
    <content type="html"><![CDATA[<p>Here is the trivial program (<code>bcc32_5.93_cast_bug.cpp</code>):</p>

<pre><code class="cpp">class A {};
class C {};
A* a;
A* b = static_cast&lt;C*&gt;(a);
</code></pre>

<p>When using <code>bcc32.exe</code> (version 5.93) from the Codegear RAD Studio 2007:</p>

<pre><code>bcc32 -c bcc32_5.93_cast_bug.cpp
</code></pre>

<p>It dies with an internal compiler error:</p>

<pre><code>CodeGear C++ 5.93 for Win32 Copyright (c) 1993, 2007 CodeGear
bcc32_5.93_cast_bug.cpp:
Fatal F1004 bcc32_5.93_cast_bug.cpp 4: Internal compiler error at 0x44b34e with base 0x400000
Fatal F1004 bcc32_5.93_cast_bug.cpp 4: Internal compiler error
</code></pre>

<p>Nice one. I love internal compiler errors. Do you have some similar stuff in your stash?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Virtual functions in constructors and destructors]]></title>
    <link href="http://demin.ws/blog/english/2009/09/12/virtual-functions-in-constructors-and-destructors/"/>
    <updated>2009-09-12T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2009/09/12/virtual-functions-in-constructors-and-destructors/</id>
    <content type="html"><![CDATA[<p>Have a look at the simple example (<code>virtual_funct_const.cpp</code>):</p>

<pre><code class="cpp">#include &lt;iostream&gt;

class A {
 public:
  A() {
    construct();
  }

  ~A() {
    destruct();
  }

  virtual void construct() {
    std::cout &lt;&lt; &quot;A::construct()&quot; &lt;&lt; std::endl;
  }

  virtual void destruct() {
    std::cout &lt;&lt; &quot;A::destruct()&quot; &lt;&lt; std::endl;
  }
};

class B: public A {
 public:
  B() {
    construct();
  }

  ~B() {
    destruct();
  }

  virtual void construct() {
    std::cout &lt;&lt; &quot;B::construct()&quot; &lt;&lt; std::endl;
  }

  virtual void destruct() {
    std::cout &lt;&lt; &quot;B::destruct()&quot; &lt;&lt; std::endl;
  }
};

int main() {
  B b;
  return 0;
}
</code></pre>

<p>What does this program print out?</p>

<p>Here we go:</p>

<pre><code>A::construct()
B::construct()
B::destruct()
A::destruct()
</code></pre>

<p>Seems that constructors and destructors of the classes <code>A</code> and <code>B</code> called the functions from its own class only even if those functions <code>construct()</code> and <code>destruct()</code> were declared as virtual.</p>

<p>There is no magic here but the rule: a virtual function becomes non-virtual when called from a constructor or a destructor.</p>

<p>Any rule has to be memorized which is not convenient. It is much better to just understand why it works this way. This behaviour is based on the main principle of the inheritance implementation in C++: when an object is being constructed its constructors are called in order starting from the base class of the hierarchy to the last inherited one. Destructors are called in the reversed order.</p>

<p>A constructor always works with the assumption that its child classes are not constructed yet that is why there is not way to call anything declared in the child classes. Therefore to call a virtual function the constructor has nothing else to do but to call its own implementation of that function. It seems the mechanism of virtual functions does not work here. It really does not because the virtual functions table of the child class does not override the current table yet.</p>

<p>For a destructor everything works vice versa. A destructor knows that all child classes are already destructed and nothing can be called from them. Therefore it just changes an address of the virtual functions table to the address of its own table address and nicely calls an implementation of the virtual function defined in its own class.</p>

<p>Thus a virtual function is not virtual if it is called from a constructor or a destructor.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Code Jam Qualification Round 2009]]></title>
    <link href="http://demin.ws/blog/english/2009/09/04/google-code-jam-qualification-round-2009/"/>
    <updated>2009-09-04T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2009/09/04/google-code-jam-qualification-round-2009/</id>
    <content type="html"><![CDATA[<p>Google Code Jam Qualification round is finished. After the successful submission of the problem A (Alien Language), B (Watersheds) and the small dataset of the problem C (Welcome to Code Jam) I have failed on the large dataset of C. It was not about 8 minutes given for the calculation at all. The bug has been found but it does not help much - time&rsquo;s up and there was only one attempt permitted for a large dataset.</p>

<p>The traditional conclusion: Good algorithms are better than supercomputers.</p>

<p>Finally my rank is 2896 (nickname &lsquo;begoon&rsquo;) from all roughly 9700 competitors, almost closer to a pensionary level, and the score is 76.</p>

<p>It is great that there are three Russian flags in the top twenty.</p>

<p>They say it is enough to get only 33 points for the Round 1 which means you had to solve one small dataset and one large dataset from any problem.</p>

<p>Does anybody participate?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It is worth to use STL string?]]></title>
    <link href="http://demin.ws/blog/english/2009/08/15/is-it-worth-to-use-stl-string/"/>
    <updated>2009-08-15T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2009/08/15/is-it-worth-to-use-stl-string/</id>
    <content type="html"><![CDATA[<p>I regularly have arguments with colleagues about using <code>std::string</code>. Is it worth to use it at all or our own string class implementation could be better?</p>

<p>The first question is about <code>std::string</code> quality. Amusingly the majority of people which I asked to draft more or less efficient implementation of the string class wrote roughly this:</p>

<pre><code class="cpp">class String {
 public:
  explicit String(const std::string&amp; value) { 
    init(value.c_str(), value.length()); 
  }
  String(const String&amp; value) { init(value.data_, value.sz_); }
  ~String() { free(data_); }

  String&amp; operator=(const String&amp; value) {
    if (this != &amp;value) {
      if (value.sz_ &gt; sz_) data_ = (char*)std::realloc(data_, value.sz_);
      sz_ = value.sz_;
      std::memcpy(data_, value.data_, sz_);
    }
    return *this;
  }

 private:
  void init(const char* data, size_t sz) {
    sz_ = sz;
    data_ = (char*)malloc(sz_);
    std::memcpy(data_, data, sz_);
  }
  char* data_;
  size_t sz_;
};
</code></pre>

<p>It&rsquo;s clear that in this implementation of an assignment operator a string will only grow in terms of memory utilisation. It is done deliberately to save some extra time on assigning.</p>

<p>Practically nobody thought immediately about a moving operation, for example swap. For some reason the presence of a copy constructor and an assignment operator is considering to be sufficient.</p>

<p>To answer this question for myself I have written the test. The test sorts an array of long strings. The strings are represented in four ways: a <code>std::string</code> object, a <code>std::string</code> pointer, an object of my homemade <code>String</code> class (see above) and a pointer to <code>String</code>.</p>

<p>Apparently that usage of the pointer should be the most efficient method because in this case <code>std::sort()</code> swaps only pointers but not objects.</p>

<p>But it would be interesting to compare how my simple implementation of the string will yield to <code>std::string</code>.</p>

<p>So, <code>std_string.cpp</code>:</p>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;cstdlib&gt;
#include &lt;cstring&gt;
#include &lt;cassert&gt;

#include &quot;gtest/gtest.h&quot;

static const int N = 100;

// This homemade class implements the more or less efficient 
// string in terms of copying.
class String {
 public:
  // &quot;explicit&quot; disables any implicit cast making sure 
  // which constructor exactly is being called.
  explicit String(const std::string&amp; value) { 
    init(value.c_str(), value.length()); 
  }
  String(const String&amp; value) { init(value.data_, value.sz_); }
  ~String() { free(data_); }

  // Perhaps this method is only one attempt to use memory allocation
  // efficiently.
  String&amp; operator=(const String&amp; value) {
    if (this != &amp;value) {
      // Memory is re-allocated only if a source is longer the current
      // string. It is clear that this implementation will only increase 
      // memory allocated by the string.
      if (value.sz_ &gt; sz_) data_ = (char*)std::realloc(data_, value.sz_);
      sz_ = value.sz_;
      std::memcpy(data_, value.data_, sz_);
    }
    return *this;
  }

  friend class StringCmp;
  friend class StringPointerCmp;

 private:
  void init(const char* data, size_t sz) {
    sz_ = sz;
    data_ = (char*)malloc(sz_);
    std::memcpy(data_, data, sz_);
  }
  char* data_;
  size_t sz_;
};

std::vector&lt;std::string&gt; std_strings;
std::vector&lt;std::string*&gt; std_strings_p;
std::vector&lt;String&gt; strings;
std::vector&lt;String*&gt; strings_p;

// Functor to compare two std::string.
class StlStringCmp {
 public:
  bool operator()(const std::string&amp; a, const std::string&amp; b) {
    return a &lt; b;
  }
};

TEST(SortingStlString, StlString) {
  std::sort(std_strings.begin(), std_strings.end(), StlStringCmp());
}

// Functor to compare two std::string*.
class StlStringPointerCmp {
 public:
  bool operator()(const std::string* a, const std::string* b) {
    return *a &lt; *b;
  }
};

TEST(SortingStlString, StlStringPointer) {
  std::sort(std_strings_p.begin(), std_strings_p.end(), StlStringPointerCmp());
}

// Functor to compare two String.
class StringCmp {
 public:
  bool operator()(const String&amp; a, const String&amp; b) {
    assert(a.sz_ == b.sz_);
    return std::memcmp(a.data_, b.data_, a.sz_);
  }
};

TEST(SortingStlString, String) {
  std::sort(strings.begin(), strings.end(), StringCmp());
}

// Functor to compare two String*.
class StringPointerCmp {
 public:
  bool operator()(const String* a, const String* b) {
    assert(a-&gt;sz_ == b-&gt;sz_);
    return std::memcmp(a-&gt;data_, b-&gt;data_, a-&gt;sz_);
  }
};

TEST(SortingStlString, StringPointer) {
  std::sort(strings_p.begin(), strings_p.end(), StringPointerCmp());
}

int main(int argc, char* argv[]) {
  // The filler to make strings long enough making their copying expensive.
  std::string big(1024 * 1024, '?');
  for (int i = 0; i &lt; N; ++i) {
    // All strings are the same length. The comparison functions rely on it.
    std::stringstream fmt;
    fmt &lt;&lt; N * 2 - i &lt;&lt; big;
    std_strings.push_back(fmt.str());
    std_strings_p.push_back(new std::string(fmt.str()));
    strings.push_back(String(fmt.str()));
    strings_p.push_back(new String(fmt.str()));
  }

  testing::InitGoogleTest(&amp;argc, argv);
  // Enforce to print out tests' timing.
  testing::GTEST_FLAG(print_time) = true;
  return RUN_ALL_TESTS();
}
</code></pre>

<p>Compile:</p>

<pre><code>cl /O2 /EHsc /I. std_string.cpp gtest-all.cc
</code></pre>

<p>Run:</p>

<pre><code>[==========] Running 4 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 4 tests from SortingStlString
[ RUN      ] SortingStlString.StlString
[       OK ] SortingStlString.StlString (203 ms)
[ RUN      ] SortingStlString.StlStringPointer
[       OK ] SortingStlString.StlStringPointer (0 ms)
[ RUN      ] SortingStlString.String
[       OK ] SortingStlString.String (891 ms)
[ RUN      ] SortingStlString.StringPointer
[       OK ] SortingStlString.StringPointer (0 ms)
[----------] 4 tests from SortingStlString (1125 ms total)

[----------] Global test environment tear-down
[==========] 4 tests from 1 test case ran. (1125 ms total)
[  PASSED  ] 4 tests.
</code></pre>

<p>Apparently, the tests using pointers work equally fast but when the objects are in use, <code>std::string</code> has overrun my homemade implementation 4 times - 203 ms vs 891 ms.</p>

<p>It is simply to figure out why it is so. To swap elements <code>std::sort()</code> uses the template function <code>std::swap()</code> which applied for <code>std::string</code> exchanges data without physical data copying.</p>

<p>Eventually I&rsquo;ve convinced myself that in most cases <code>std::string</code> solves all problems. But what about adding more functionality to the <code>std::string</code>? For instance, a word search.</p>

<p>The problem is that the destructor of <code>std::string</code> is not virtual (maybe from considerations of efficiency), but an inheritance from the class with a non-virtual destructor in C++ is not right undertaking.</p>

<p>The STL author, Alexander Stepanov, in his article <a href="http://www.stepanovpapers.com/notes.pdf">Notes for the Programming course at Adobe</a> advises to implement additional functionality for the standard STL containers as template algorithms. There are many advantages doing so, for example, any string parsing implemented via iterators as the template algorithm becomes usable automatically for all other containers having the same iterators.</p>

<p>Interestingly what Stepanov says about the length() function of STL containers (in the article above he describes the process of creation the efficient container step by step):</p>

<blockquote>
<p>While we could make a member function to return length, it is better to make it a global friend function. If we do that, we will be able eventually to define the same function to work on built-in arrays and achieve greater uniformity of design. I made size into a member function in STL in an attempt to please the standard committee. I knew that begin, end and size should be global functions but was not willing to risk another fight with the committee.</p>

<p><strong>Alexander Stepanov</strong></p>
</blockquote>

<p>Summarizing it is worth to trust <code>std::string</code>. The for majority of problems it does pretty well and its functionality can be extended by implementing template algorithms.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I have started this blog?]]></title>
    <link href="http://demin.ws/blog/english/2009/01/24/why-i-have-started-this-blog/"/>
    <updated>2009-01-24T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/english/2009/01/24/why-i-have-started-this-blog/</id>
    <content type="html"><![CDATA[<p>This is the first and most likely the last non-technical post in this blog. Everything further will be extremely technical about computers, programming, and robots and so on, and so forth. The original idea was to create a collection of my own tips and tricks invented or grabbed. Many things are being forgotten very quickly and the online collection tends to help keeping it at hand. In addition it is silly to keep ideas under the pillow. Ideas should be shared that I am going to do right here.</p>

<p>Follow the announcements.</p>
]]></content>
  </entry>
  

</feed>
