---
layout: post
language: russian
date: 2012-04-06 22:16
title: Самодельный статический движок для блога Goblog
draft: yes
---
Я люблю писать тексты, люблю отлаживать примеры, пробовать, анализировать. Чего я не люблю, так это возиться с форматированием, закачиванием картинок, проверкой верстки и т.д.

По причине лени я начал использовать Блогспот. Тут тебе и море шаблонов, виджеты всякие, мгновенная индексация Гуглом, статистика разная и прочие свистелки. Ну все бы хорошо, но, увы, не предназначен редактор Блогспота для создания программистских постов с необходимостью вставлять код. Например, для своего другого блога "[Яйца всмятку, сэр!][]" "возможностей" Блогспота вполне хватает.

[Яйца всмятку, сэр!]: http://english-eggs.blogspot.com

Также мне хочется хранить оригиналы постов в нормальном, не в обгаженном html'ем виде. Получалось, что материалы по блогу раскиданы по компьютеру там и сям в нескольких копиях. Сначала ты просто пишешь текст в редакторе, только разбивая на абзацы, без ссылок и картинок, и в конце сохраняешь почти готовый документ. Потом начинается ~~ëрзанье~~верстка в html, в процессе которой, помимо, собственно, html'я, делаются поправки в оригинальном тексте. При этом обновлять оригинальный файл уже лень, и по сути, он остается в "сыром" виде. А в "сухом" виде остается только html'ная помойка. Но это еще не конец истории. Часто уже после публикации замечаешь опечатку, лезешь в Блогспот правишь прямо на странице. Опять, самый первый оригинал и его локальная об'html'ная версия остаются неисправленными. В итоге: актуальные версии постов находятся только на самом Блогспоте. Конечно, можно делать автоматизированный бэкап всего блога, но опять таки - все будет уже только в html'е.

Некоторое время назад я начал использовать [ReST][]. Тут жизнь хоть как-то полегчала. ReST позволяется писать текст в уже более менее предсказуемой разметке (абзацы, ссылки, код), и затем из него генерируется HTML, который вставляется (опять таки вручную) в Блогспот. Попытки автоматизировать пре-просмотр поста через [googlecl][] фактически провалились. Опять оставалась проблема, когда после исправления опечатся на странице оригинальный документ в ReST устаревал. Кроме того, ReST не решал проблему картинок. Их надо было куда-то заранее выкладывать, чтобы можно было полностью сделать preview.

[ReST]: http://docutils.sourceforge.net/rst.html
[googlecl]: http://code.google.com/p/googlecl/

Не могу объяснить почему, по идея динамических движков типа Wordpress'а меня как-то пугала. Сама идея держать посты в базе данных мне кажется перебором.

Я почти уже было остановился на промежуточном решении -- [Doku Wiki][], например как на [vak.ru][]. Тут движок хоть и динамический, но содержимое страниц хранится в файлах, и есть версионность. Doku можно использовать как движок всего сайта, не только блога. Хоть и дизайн неказистый, зато картинки и произвольные аттачменты поддерживаются системой. 

[Doku Wiki]: http://www.dokuwiki.org/dokuwiki
[vak.ru]: http://vak.ru/doku.php/proj

Был еще вариант, на которые я тоже почти подписался - блог на основе [TiddlyWiki][]. TiddlyWiki - это мой любимый инструмент на Windows для ведения записей. Я про это ужи [писал][Электронная записная книга TiddlyWiki]. Почему на Windows? Потому что на Маке я просто делаю записи в простых текстовых файлах, располагая их по смыслу в документах или на рабочем столе, а [Spotlight][], который индексирует все и вся на компьютере, моментально позволяет искать по фрагментам слов. Получается, что в ключей возможности TiddlyWiki, мгновенном поиске, уже не особого смысла. Но я отвлекся.

[Электронная записная книга TiddlyWiki]: /blog/russian/2009/11/28/tiddly-wiki/
[Spotlight]: http://en.wikipedia.org/wiki/Spotlight_(software)

Оказывает, есть фанаты, которые превратили TiddlyWiki в блог-платформу. В эдакий статически-динамический мутант.

Например, вариант блога с таким движком - [Rich Signell's Work Log][]. Эзотерика, на мой взгляд. Например, не ясно, как прикрутить комментарии, хотя бы то же Disqus. Но если кому интересно, есть даже публичный хостинг - tiddlyspot

[Rich Signell's Work Log]: http://rsignell.tiddlyspot.com/
[tiddlyspot]: http://tiddlyspot.com/

Но вот реально я возбудился на идее чисто статических движков. Например, [Jekyll][]. Прелесть тут в том, что такой блог хостить можно где угодно. Тут не только база данных не нужна, и даже серверное скриптование не нужно. Но дальше больше. GitHub или Heroku позволяют не только хостить статические сайты, но и управлять контентом через git. Посты пишутся с использованием разметки Markdown или Textile. Также можно добавлять в проект произвольные файлы, которые при генерации сайта будут выкладываться без изменений.

Комментарии же, как основная "динамика" блога, может реализоваться через, например, [Disqus][]. К слову сказать, есть эстэты статических блогов с высшей степенью дзэна - со *статическими комментариями*. Для даже это словосочетания является оксюмороном. Подход тут такой: у поста внизу есть секция со *статически* выведенными ранее введенными комментариями, и рядом форма для ввода нового. Ты вводишь комментарий, и он отсылается автору блога. Тот его подтверждает (или нет), куда-то кликает, и комментарий помещается в виде файла в статический проект блога, все пересобирается и выкладывается на публику. Понятно, что это никакой ни разу не real-time, а больше похоже на комментарии с пре-модерированием, причем модератор выходит на связь раз в неделю.

[Disqus]: http://disqus.com

Я очень ценю дискуссию, и подобный подход не для меня. И продолжаю использовать Disqus.

Кстати, из Disqus можно прекрасно экспортировать базу комментарием, и, например, превратить ее в статические страницы, если вдруг придется в него уходить.

Но вернемся к Jekyll.

Например, GitHub Pages напрямую поддерживает Jekyll (его автор и есть сооснователь GitHub) и умеет рендерить Jekyll (хотя можно и рендерить самому локально). Заливаешь через git проект Jekyll, и сайт становится видимым в GitHub Pages.

На Heroku идея немного иная. Heroku хостит Ruby, поэтому статический сайт на Heroku - это сами страницы и программа-вебсервер, которая их отдает. Звучит страшновато, но на Ruby такой сервер выглядит весьма компактно, например так:

{% codeblock lang:ruby %}
require 'bundler/setup'
require 'sinatra/base'

# The project root directory
$root = ::File.dirname(__FILE__)

class SinatraStaticServer < Sinatra::Base  

  get(/.+/) do
    send_sinatra_file(request.path) {404}
  end

  def send_sinatra_file(path, &missing_file_block)
    file_path = File.join(File.dirname(__FILE__), 'public',  path)
    file_path = File.join(file_path, 'index.html') unless file_path =~ /\.[a-z]+$/i  
    File.exist?(file_path) ? send_file(file_path) : missing_file_block.call
  end
end

run SinatraStaticServer
{% endcodeblock %}

[Jekyll]: http://jekyllrb.com/

Как ни странно, хостинг на Heroku в целом проще, чем на GitHub. Также на Heroku git-репозиторий блога остается private, тогда как на GitHub'е он становиться открытым как и все остальные проекты. Хотя для меня звучит странно держать проект блога (фактически, сайта) закрытым. Он же и так весь допупен через веб.

Да, и GitHub Pages и Heroku позволяются "прикрутить" нормальный домен второго уровня, если у вас есть таковой.

Итак, я выбрал Jekyll c хостингом на Heroku. Увы, если взять чистный Jekyll, то придется самому с нуля разрабатывать стили и макет страниц. Если этим заниматься лень, то можно взять [Octopress][].

Octopress - это статический движок блога на базе Jekyll, но который укомплектован HTML5 макетом страниц, пачкой удобных плагинов и автоматизированной возможностью выкладывания блога на GitHub Pages и Heroku.

[Octopress]: http://octopress.org/

Итак, я взял Octopress, покрутил туда-сюда, попробовал несколько постов, протестировал рендерить блог локально, повыкладывал на Heroku и GitHub Pages. Все вроде было на мази.

Далее была самая нудная часть марлезонского балета - перетаскивание постов из любимого Блогспота. Фактически приходилось это делать вручную через cut-and-paste. Недели три мучений, и свои несчастные триста постов я обработал.

Все было готово для запуска моего нового статического блога. Но тут меня ждало главное разочарование.

Драгоценный Jekyll, написанный на Ruby, рендерил мой несчастные триста постов (внимание!) - 15 минут (на Mac Air). А как сами понимаете, надо было много пробовать, пересобирать, особенно сначала. И такое время полной пересборки не лезло ни в какие ворота.

Методом тыка а нашел узкое место в движке Jekyll/Octopress - львиная доля этих 15 минут уходил на генерацию файла atom.xml, RSS-фида. Почему-то в изначальных шаблонах в RSS-файл включалось только последние двадцать постов. Но у меня блог небольшой, поэтому я включил туда все поста, и тогда время генерации этого файла приводилось к пятнадцати минутной сброки всего блога.

Все это показалось мне каким-то абсурдом (при всей моей любви к Ruby). После небольшого размышления (я к тому времени уже более менее понимал внутренности Jekyll), я задался вопросом - а не написать ли мне свой статический движок по схожей идее? Ведь это всего работа с файлами, текстом и, возможно, шаблонами.

Язык, C++/boost - можно, но скучно. Я решил Go. Нативная, очень быстрая компиляция, удобная работы со строками и файловой системой, урощенная работа с памятью (сборщик мусора), регулярные выражения, библиотека шаблонов, [библиотека для Markdown][]. Все, кроме последнего, "из коробки". Каких-либо проблем с производительностью не должно быть вообще.

[библиотека для Markdown]: https://github.com/russross/blackfriday

Итак, после трех вечеров родился мой велосипед - Goblog.

Принцип работы: 

## Теги (категории)

Я решил не делать теги вообще. Основывась на собственном опыте, я понял, что никогда не пользуюсь тегами ни в своем блоге, ни в чужих. К тому же со временем взляды на логику категоризации информации меняются, и порой приходится просто для совместимости с прошлым расставлять теги, в которых уже не видишь смысла. Какой, например, смысл в теге `c++` в моем блоге? Кто-нибудь когда-нибудь его использовал?

Но минимализм - это не путь к усложнению жизни. Наоборот. Лично я постоянно что-то ищу у себя в блоге в старых постах. На Блогспоте я просто заходил на главную страницу, жал `⌘-F` (ой, простите, CTRL-F) и искал про фрагментам слов в заголовках. Именно для этого я с некоторого в правой колонке стал выводить ссылки практически на все информативные посты.

В новом блоге все "работает" точно также прямо на первой странице с каталогом постов. При переносе постов я изменил заголовки некоторых, сделав их более информативными или пригодными для поиска.

Но! 

# Мораль 

Вы думаете, я сейчас буду убеждать использовать мой движок? Совсем нет. Я старался сделать движок максимально гибким и непривязанным конкретно к моему блогу. Статический движок сайта/блога стоит написать самому. Почему? А потому, что эта задача решается за несколько вечеров (раз), и в нем будет только то, что вам реально нужно (остальное вам будет лень программировать) (два).

Минус - придется ра

P.S. Этот писался почти неделю, урывками. Параллельно я писал поиск. Внезапно я осознал, как все-таки это нереально удобно с git'ом в работе с блогом. Пишешь в бэкграунде пост - ветка, дописываешь функционал (например, поиск был создан в процессе написания этого поста) - ветка. Когда что-то готово, сливает в master и push на GitHub. Красота.

