---
layout: post
title: 'Александр Степанов, "Elements of Programming"'
language: russian
date: 2009-07-30 00:00
comments: true
blogspot: http://easy-coding.blogspot.com/2009/07/blog-post_30.html
categories:
- cplusplus
- book
- russian
---
[Александр Степанов][] - это создатель STL. Ни добавить, ни отнять. Последние годы он занимается в основном преподаванием и написанием книг.

[Александр Степанов]: http://ru.wikipedia.org/wiki/%D0%A1%D1%82%D0%B5%D0%BF%D0%B0%D0%BD%D0%BE%D0%B2,_%D0%90%D0%BB%D0%B5%D0%BA%D1%81%D0%B0%D0%BD%D0%B4%D1%80_%D0%90%D0%BB%D0%B5%D0%BA%D1%81%D0%B0%D0%BD%D0%B4%D1%80%D0%BE%D0%B2%D0%B8%D1%87

Недавно я купил его последнюю книгу "Elements of Programming".

<a href="http://www.amazon.co.uk/gp/product/032163537X/ref=as_li_tf_il?ie=UTF8&tag=prodiy-21&linkCode=as2&camp=1634&creative=6738&creativeASIN=032163537X"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=032163537X&MarketPlace=GB&ID=AsinImage&WS=1&tag=prodiy-21&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&l=as2&o=2&a=032163537X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />

Довольно своеобразная книга. Много математики, приводимой как обоснование тех или иных приемов в программировании (язык, конечно, С++), из-за чего читается немного тяжело. Забавно, я читал многие его публикации до этого, и как-то заметил, что чем дальше, тем больше он использует формальную математику для описания программирования.

Еще интересный факт: в данной книге везде при использовании шаблонов используются [концепты][], хотя недавно было принято решение, что в [C++0x][] их [не будет][No concepts in C++0x] из-за общей пока недоработанности идеи.

[концепты]: http://en.wikipedia.org/wiki/Concepts_(C%2B%2B0x)
[C++0x]: http://ru.wikipedia.org/wiki/C%2B%2B0x
[No concepts in C++0x]: http://www.informit.com/guides/content.aspx?g=cplusplus&seqNum=441

Но вернемся к другим публикациям Степанова.

Одни из мои любимых - [Notes for the Programming course at Adobe][] и [Science of C++ Programming][].

[Notes for the Programming course at Adobe]: http://www.stepanovpapers.com/notes.pdf
[Science of C++ Programming]: http://www.stepanovpapers.com/Stepanov-Science_of_C++_Programming-1993.pdf

Например, ставший классикой, его пример на тему итераторов:

{% codeblock lang:cpp %}
if (!v.empty()) {
  sort(&*begin(), &*v.begin() + v.size());
}
{% endcodeblock %}

когда спрашивается, почему в данном вполне рабочем примере обязательно нужна проверка `v.empty()` и почему нельзя второй аргумент нельзя записать как `&*v.end()`?

Но вот что лично мне понравилось, это способ реализации оператора присваивания для класса. Обычно, когда в классе есть конструктор копирования и оператор присваивания, стандартный прием - это сделать закрытую функцию типа `clone()` или `copy()`, которая умеет правильно копировать класс, если внутренняя его структура нетривиальна, и вызывать эту функцию из конструктора копирования и оператора присваивания, тем самым избегая дублирования кода.

Но Степанов говорит следующее: "...присваивание должно осуществляться вызовом деструктора и последующим конструктором". То есть надо просто сделать полноценный конструктор копирования, а оператор присваивание реализовать так:

{% codeblock lang:cpp %}
T& T::operator=(const T& x) {
  if (this != &x) {
    this->T::~T();
    new (this) T(x);
  }
  return *this;
}
{% endcodeblock %}

Получается, что старый объект сам себя разрушает, вызвав деструктор (но память под ним не освобождается), а затем оператором `new` с явным размещением (память под объект тут уже повторно не распределяется) объект создается снова через конструктор копирования.

В общем, данные pdf-ки - очень интересное чтиво. Причем, Степанов никогда не забывает об эффективности (ибо неграмотное использования возможностей шаблонов элементарно делает программу очень медленной и жадной до ресурсов), и, например, главы про техники перемещения, а не копирования объектов очень познавательны.

