---
layout: post
title: "Коварный prinf()"
language: russian
date: 2009-10-22 00:00
comments: true
blogspot: http://easy-coding.blogspot.com/2009/10/printf.html
categories:
- cplusplus
- radio86
- russian
---
Вчера подорвался на ерунде как ребенок.

Сижу, отлаживаю новый онлайновый ассемблер в своем [эмуляторе Радио-86РК][radio86]. Под отладкой понимается ёрзанье с применением html'я.

[radio86]: http://code.google.com/p/radio86

Для сборки финального html-файла из кучи мелких у меня написана примитивная программа. Вот ее фрагмент:

{% codeblock lang:cpp %}
while (!feof(f)) {
  char line[1024];
  *line = 0;
  fgets(line, sizeof(line), f);
  printf(line);
}
{% endcodeblock %}

Подразумевается, что данный код прострочно копирует данные из файла `f` на стандарный вывод.

Даже если отставить в сторону использование буфера с константной длиной и прочих "штучек" языка С, этот код имеет одну проблему, которая стоила мне сомнений в наличии сознания. До каких-то пор все работало отлично, но как только я начал использовать процентные значения для широт и высот в html, начались странности. 

Получалось, что вместо, например:

{% codeblock lang:html %}
<table width="100%">
{% endcodeblock %}

на выходе было:

{% codeblock lang:html %}
<table width="100">
{% endcodeblock %}

Вы, наверное, уже догадались, в чем тут дело. Но, признаюсь, я искал проблему минут тридцать.

Вместо:

{% codeblock lang:cpp %}
printf(line);
{% endcodeblock %}

надо писать:

{% codeblock lang:cpp %}
printf("%s", line);
{% endcodeblock %}

А иначе все процентные символы будут расцены как указатели форматов, ибо первый параметр `printf()` - это не просто строка, а формат, и в случае их неэкранирования будут уделены, что и происходило в моем случае.

Вывод (который следует после начального "сам дурак"): Лучше писать на С++ и использовать потоки для форматного вывода.

**Лирическое отступление**. Кстати, онлайновый ассемблер очень огранично вписался в эмулятор. Спасибо [Вячеславу Славинскому][Вячеслав Славинский] за оригинальный код этого ассемблера. Особенно меня радует возможность автоматической фоновой компиляции. Теперь можно, прямо не отходя от эмулятора, переключиться в ассемблер, написать что-нибудь на диалекте Intel 8080 ([КР580][]), скомпилировать и загнать прямо в эмулятор.

[Вячеслав Славинский]: http://sensi.org/~svo/vector06c/
[КР580]: http://code.google.com/p/radio86/wiki/KP580BM1

{% img /images/blog/radio86-builtin-assembler.png %}
 